let kernelMode;
const kernelAttr = "fast-kernel";

try {
  if (document.currentScript) {
    kernelMode = document.currentScript.getAttribute(kernelAttr);
  } else {
    const scripts = document.getElementsByTagName("script");
    const currentScript = scripts[scripts.length - 1];
    kernelMode = currentScript.getAttribute(kernelAttr);
  }
} catch (e) {
  kernelMode = "isolate";
}

let KernelServiceId;

switch (kernelMode) {
  case "share":
    // share the kernel across major versions
    KernelServiceId = Object.freeze({
      updateQueue: 1,
      observable: 2,
      contextEvent: 3,
      elementRegistry: 4
    });
    break;

  case "share-v2":
    // only share the kernel with other v2 instances
    KernelServiceId = Object.freeze({
      updateQueue: 1.2,
      observable: 2.2,
      contextEvent: 3.2,
      elementRegistry: 4.2
    });
    break;

  default:
    // fully isolate the kernel from all other FAST instances
    const postfix = `-${Math.random().toString(36).substring(2, 8)}`;
    KernelServiceId = Object.freeze({
      updateQueue: `1.2${postfix}`,
      observable: `2.2${postfix}`,
      contextEvent: `3.2${postfix}`,
      elementRegistry: `4.2${postfix}`
    });
    break;
}
/**
 * Determines whether or not an object is a function.
 * @public
 */

const isFunction = object => typeof object === "function";
/**
 * Determines whether or not an object is a string.
 * @public
 */

const isString = object => typeof object === "string";
/**
 * A function which does nothing.
 * @public
 */

const noop = () => void 0;

/* eslint-disable @typescript-eslint/ban-ts-comment */
(function ensureGlobalThis() {
  if (typeof globalThis !== "undefined") {
    // We're running in a modern environment.
    return;
  } // @ts-ignore


  if (typeof global !== "undefined") {
    // We're running in NodeJS
    // @ts-ignore
    global.globalThis = global;
  } else if (typeof self !== "undefined") {
    self.globalThis = self;
  } else if (typeof window !== "undefined") {
    // We're running in the browser's main thread.
    window.globalThis = window;
  } else {
    // Hopefully we never get here...
    // Not all environments allow eval and Function. Use only as a last resort:
    // eslint-disable-next-line no-new-func
    const result = new Function("return this")();
    result.globalThis = result;
  }
})();

const propConfig = {
  configurable: false,
  enumerable: false,
  writable: false
};

if (globalThis.FAST === void 0) {
  Reflect.defineProperty(globalThis, "FAST", Object.assign({
    value: Object.create(null)
  }, propConfig));
}
/**
 * The FAST global.
 * @public
 */


const FAST = globalThis.FAST;

if (FAST.getById === void 0) {
  const storage = Object.create(null);
  Reflect.defineProperty(FAST, "getById", Object.assign({
    value(id, initialize) {
      let found = storage[id];

      if (found === void 0) {
        found = initialize ? storage[id] = initialize() : null;
      }

      return found;
    }

  }, propConfig));
}

if (FAST.error === void 0) {
  Object.assign(FAST, {
    warn() {},

    error(code) {
      return new Error(`Error ${code}`);
    },

    addMessages() {}

  });
}
/**
 * A readonly, empty array.
 * @remarks
 * Typically returned by APIs that return arrays when there are
 * no actual items to return.
 * @public
 */


const emptyArray = Object.freeze([]);
/**
 * Do not change. Part of shared kernel contract.
 * @internal
 */

function createTypeRegistry() {
  const typeToDefinition = new Map();
  return Object.freeze({
    register(definition) {
      if (typeToDefinition.has(definition.type)) {
        return false;
      }

      typeToDefinition.set(definition.type, definition);
      return true;
    },

    getByType(key) {
      return typeToDefinition.get(key);
    },

    getForInstance(object) {
      if (object === null || object === void 0) {
        return void 0;
      }

      return typeToDefinition.get(object.constructor);
    }

  });
}
/**
 * Creates a function capable of locating metadata associated with a type.
 * @returns A metadata locator function.
 * @internal
 */

function createMetadataLocator() {
  const metadataLookup = new WeakMap();
  return function (target) {
    let metadata = metadataLookup.get(target);

    if (metadata === void 0) {
      let currentTarget = Reflect.getPrototypeOf(target);

      while (metadata === void 0 && currentTarget !== null) {
        metadata = metadataLookup.get(currentTarget);
        currentTarget = Reflect.getPrototypeOf(currentTarget);
      }

      metadata = metadata === void 0 ? [] : metadata.slice(0);
      metadataLookup.set(target, metadata);
    }

    return metadata;
  };
}
/**
 * Makes a type noop for JSON serialization.
 * @param type - The type to make noop for JSON serialization.
 * @internal
 */

function makeSerializationNoop(type) {
  type.prototype.toJSON = noop;
}

/**
 * The type of HTML aspect to target.
 * @public
 */

const DOMAspect = Object.freeze({
  /**
   * Not aspected.
   */
  none: 0,

  /**
   * An attribute.
   */
  attribute: 1,

  /**
   * A boolean attribute.
   */
  booleanAttribute: 2,

  /**
   * A property.
   */
  property: 3,

  /**
   * Content
   */
  content: 4,

  /**
   * A token list.
   */
  tokenList: 5,

  /**
   * An event.
   */
  event: 6
});

const createHTML$1 = html => html;

const fastTrustedType = globalThis.trustedTypes ? globalThis.trustedTypes.createPolicy("fast-html", {
  createHTML: createHTML$1
}) : {
  createHTML: createHTML$1
};
let defaultPolicy = Object.freeze({
  createHTML(value) {
    return fastTrustedType.createHTML(value);
  },

  protect(tagName, aspect, aspectName, sink) {
    return sink;
  }

});
const fastPolicy = defaultPolicy;
/**
 * Common DOM APIs.
 * @public
 */

const DOM = Object.freeze({
  /**
   * Gets the dom policy used by the templating system.
   */
  get policy() {
    return defaultPolicy;
  },

  /**
   * Sets the dom policy used by the templating system.
   * @param policy - The policy to set.
   * @remarks
   * This API can only be called once, for security reasons. It should be
   * called by the application developer at the start of their program.
   */
  setPolicy(value) {
    if (defaultPolicy !== fastPolicy) {
      throw FAST.error(1201
      /* Message.onlySetDOMPolicyOnce */
      );
    }

    defaultPolicy = value;
  },

  /**
   * Sets an attribute value on an element.
   * @param element - The element to set the attribute value on.
   * @param attributeName - The attribute name to set.
   * @param value - The value of the attribute to set.
   * @remarks
   * If the value is `null` or `undefined`, the attribute is removed, otherwise
   * it is set to the provided value using the standard `setAttribute` API.
   */
  setAttribute(element, attributeName, value) {
    value === null || value === undefined ? element.removeAttribute(attributeName) : element.setAttribute(attributeName, value);
  },

  /**
   * Sets a boolean attribute value.
   * @param element - The element to set the boolean attribute value on.
   * @param attributeName - The attribute name to set.
   * @param value - The value of the attribute to set.
   * @remarks
   * If the value is true, the attribute is added; otherwise it is removed.
   */
  setBooleanAttribute(element, attributeName, value) {
    value ? element.setAttribute(attributeName, "") : element.removeAttribute(attributeName);
  }

});

/**
 * The default UpdateQueue.
 * @public
 */

const Updates = FAST.getById(KernelServiceId.updateQueue, () => {
  const tasks = [];
  const pendingErrors = [];
  const rAF = globalThis.requestAnimationFrame;
  let updateAsync = true;

  function throwFirstError() {
    if (pendingErrors.length) {
      throw pendingErrors.shift();
    }
  }

  function tryRunTask(task) {
    try {
      task.call();
    } catch (error) {
      if (updateAsync) {
        pendingErrors.push(error);
        setTimeout(throwFirstError, 0);
      } else {
        tasks.length = 0;
        throw error;
      }
    }
  }

  function process() {
    const capacity = 1024;
    let index = 0;

    while (index < tasks.length) {
      tryRunTask(tasks[index]);
      index++; // Prevent leaking memory for long chains of recursive calls to `enqueue`.
      // If we call `enqueue` within a task scheduled by `enqueue`, the queue will
      // grow, but to avoid an O(n) walk for every task we execute, we don't
      // shift tasks off the queue after they have been executed.
      // Instead, we periodically shift 1024 tasks off the queue.

      if (index > capacity) {
        // Manually shift all values starting at the index back to the
        // beginning of the queue.
        for (let scan = 0, newLength = tasks.length - index; scan < newLength; scan++) {
          tasks[scan] = tasks[scan + index];
        }

        tasks.length -= index;
        index = 0;
      }
    }

    tasks.length = 0;
  }

  function enqueue(callable) {
    tasks.push(callable);

    if (tasks.length < 2) {
      updateAsync ? rAF(process) : process();
    }
  }

  return Object.freeze({
    enqueue,
    next: () => new Promise(enqueue),
    process,
    setMode: isAsync => updateAsync = isAsync
  });
});

/**
 * An implementation of {@link Notifier} that efficiently keeps track of
 * subscribers interested in a specific change notification on an
 * observable subject.
 *
 * @remarks
 * This set is optimized for the most common scenario of 1 or 2 subscribers.
 * With this in mind, it can store a subscriber in an internal field, allowing it to avoid Array#push operations.
 * If the set ever exceeds two subscribers, it upgrades to an array automatically.
 * @public
 */
class SubscriberSet {
  /**
   * Creates an instance of SubscriberSet for the specified subject.
   * @param subject - The subject that subscribers will receive notifications from.
   * @param initialSubscriber - An initial subscriber to changes.
   */
  constructor(subject, initialSubscriber) {
    this.sub1 = void 0;
    this.sub2 = void 0;
    this.spillover = void 0;
    this.subject = subject;
    this.sub1 = initialSubscriber;
  }
  /**
   * Checks whether the provided subscriber has been added to this set.
   * @param subscriber - The subscriber to test for inclusion in this set.
   */


  has(subscriber) {
    return this.spillover === void 0 ? this.sub1 === subscriber || this.sub2 === subscriber : this.spillover.indexOf(subscriber) !== -1;
  }
  /**
   * Subscribes to notification of changes in an object's state.
   * @param subscriber - The object that is subscribing for change notification.
   */


  subscribe(subscriber) {
    const spillover = this.spillover;

    if (spillover === void 0) {
      if (this.has(subscriber)) {
        return;
      }

      if (this.sub1 === void 0) {
        this.sub1 = subscriber;
        return;
      }

      if (this.sub2 === void 0) {
        this.sub2 = subscriber;
        return;
      }

      this.spillover = [this.sub1, this.sub2, subscriber];
      this.sub1 = void 0;
      this.sub2 = void 0;
    } else {
      const index = spillover.indexOf(subscriber);

      if (index === -1) {
        spillover.push(subscriber);
      }
    }
  }
  /**
   * Unsubscribes from notification of changes in an object's state.
   * @param subscriber - The object that is unsubscribing from change notification.
   */


  unsubscribe(subscriber) {
    const spillover = this.spillover;

    if (spillover === void 0) {
      if (this.sub1 === subscriber) {
        this.sub1 = void 0;
      } else if (this.sub2 === subscriber) {
        this.sub2 = void 0;
      }
    } else {
      const index = spillover.indexOf(subscriber);

      if (index !== -1) {
        spillover.splice(index, 1);
      }
    }
  }
  /**
   * Notifies all subscribers.
   * @param args - Data passed along to subscribers during notification.
   */


  notify(args) {
    const spillover = this.spillover;
    const subject = this.subject;

    if (spillover === void 0) {
      const sub1 = this.sub1;
      const sub2 = this.sub2;

      if (sub1 !== void 0) {
        sub1.handleChange(subject, args);
      }

      if (sub2 !== void 0) {
        sub2.handleChange(subject, args);
      }
    } else {
      for (let i = 0, ii = spillover.length; i < ii; ++i) {
        spillover[i].handleChange(subject, args);
      }
    }
  }

}
/**
 * An implementation of Notifier that allows subscribers to be notified
 * of individual property changes on an object.
 * @public
 */

class PropertyChangeNotifier {
  /**
   * Creates an instance of PropertyChangeNotifier for the specified subject.
   * @param subject - The object that subscribers will receive notifications for.
   */
  constructor(subject) {
    this.subscribers = {};
    this.subjectSubscribers = null;
    this.subject = subject;
  }
  /**
   * Notifies all subscribers, based on the specified property.
   * @param propertyName - The property name, passed along to subscribers during notification.
   */


  notify(propertyName) {
    var _a, _b;

    (_a = this.subscribers[propertyName]) === null || _a === void 0 ? void 0 : _a.notify(propertyName);
    (_b = this.subjectSubscribers) === null || _b === void 0 ? void 0 : _b.notify(propertyName);
  }
  /**
   * Subscribes to notification of changes in an object's state.
   * @param subscriber - The object that is subscribing for change notification.
   * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.
   */


  subscribe(subscriber, propertyToWatch) {
    var _a, _b;

    let subscribers;

    if (propertyToWatch) {
      subscribers = (_a = this.subscribers[propertyToWatch]) !== null && _a !== void 0 ? _a : this.subscribers[propertyToWatch] = new SubscriberSet(this.subject);
    } else {
      subscribers = (_b = this.subjectSubscribers) !== null && _b !== void 0 ? _b : this.subjectSubscribers = new SubscriberSet(this.subject);
    }

    subscribers.subscribe(subscriber);
  }
  /**
   * Unsubscribes from notification of changes in an object's state.
   * @param subscriber - The object that is unsubscribing from change notification.
   * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.
   */


  unsubscribe(subscriber, propertyToUnwatch) {
    var _a, _b;

    if (propertyToUnwatch) {
      (_a = this.subscribers[propertyToUnwatch]) === null || _a === void 0 ? void 0 : _a.unsubscribe(subscriber);
    } else {
      (_b = this.subjectSubscribers) === null || _b === void 0 ? void 0 : _b.unsubscribe(subscriber);
    }
  }

}

/**
 * Describes how the source's lifetime relates to its controller's lifetime.
 * @public
 */

const SourceLifetime = Object.freeze({
  /**
   * The source to controller lifetime relationship is unknown.
   */
  unknown: void 0,

  /**
   * The source and controller lifetimes are coupled to one another.
   * They can/will be GC'd together.
   */
  coupled: 1
});
/**
 * Common Observable APIs.
 * @public
 */

const Observable = FAST.getById(KernelServiceId.observable, () => {
  const queueUpdate = Updates.enqueue;
  const volatileRegex = /(:|&&|\|\||if)/;
  const notifierLookup = new WeakMap();
  let watcher = void 0;

  let createArrayObserver = array => {
    throw FAST.error(1101
    /* Message.needsArrayObservation */
    );
  };

  function getNotifier(source) {
    var _a;

    let found = (_a = source.$fastController) !== null && _a !== void 0 ? _a : notifierLookup.get(source);

    if (found === void 0) {
      Array.isArray(source) ? found = createArrayObserver(source) : notifierLookup.set(source, found = new PropertyChangeNotifier(source));
    }

    return found;
  }

  const getAccessors = createMetadataLocator();

  class DefaultObservableAccessor {
    constructor(name) {
      this.name = name;
      this.field = `_${name}`;
      this.callback = `${name}Changed`;
    }

    getValue(source) {
      if (watcher !== void 0) {
        watcher.watch(source, this.name);
      }

      return source[this.field];
    }

    setValue(source, newValue) {
      const field = this.field;
      const oldValue = source[field];

      if (oldValue !== newValue) {
        source[field] = newValue;
        const callback = source[this.callback];

        if (isFunction(callback)) {
          callback.call(source, oldValue, newValue);
        }

        getNotifier(source).notify(this.name);
      }
    }

  }

  class ExpressionNotifierImplementation extends SubscriberSet {
    constructor(expression, initialSubscriber, isVolatileBinding = false) {
      super(expression, initialSubscriber);
      this.expression = expression;
      this.isVolatileBinding = isVolatileBinding;
      this.needsRefresh = true;
      this.needsQueue = true;
      this.isAsync = true;
      this.first = this;
      this.last = null;
      this.propertySource = void 0;
      this.propertyName = void 0;
      this.notifier = void 0;
      this.next = void 0;
    }

    setMode(isAsync) {
      this.isAsync = this.needsQueue = isAsync;
    }

    bind(controller) {
      this.controller = controller;
      const value = this.observe(controller.source, controller.context);

      if (!controller.isBound && this.requiresUnbind(controller)) {
        controller.onUnbind(this);
      }

      return value;
    }

    requiresUnbind(controller) {
      return controller.sourceLifetime !== SourceLifetime.coupled || this.first !== this.last || this.first.propertySource !== controller.source;
    }

    unbind(controller) {
      this.dispose();
    }

    observe(source, context) {
      if (this.needsRefresh && this.last !== null) {
        this.dispose();
      }

      const previousWatcher = watcher;
      watcher = this.needsRefresh ? this : void 0;
      this.needsRefresh = this.isVolatileBinding;
      let result;

      try {
        result = this.expression(source, context);
      } finally {
        watcher = previousWatcher;
      }

      return result;
    } // backwards compat with v1 kernel


    disconnect() {
      this.dispose();
    }

    dispose() {
      if (this.last !== null) {
        let current = this.first;

        while (current !== void 0) {
          current.notifier.unsubscribe(this, current.propertyName);
          current = current.next;
        }

        this.last = null;
        this.needsRefresh = this.needsQueue = this.isAsync;
      }
    }

    watch(propertySource, propertyName) {
      const prev = this.last;
      const notifier = getNotifier(propertySource);
      const current = prev === null ? this.first : {};
      current.propertySource = propertySource;
      current.propertyName = propertyName;
      current.notifier = notifier;
      notifier.subscribe(this, propertyName);

      if (prev !== null) {
        if (!this.needsRefresh) {
          // Declaring the variable prior to assignment below circumvents
          // a bug in Angular's optimization process causing infinite recursion
          // of this watch() method. Details https://github.com/microsoft/fast/issues/4969
          let prevValue;
          watcher = void 0;
          /* eslint-disable-next-line */

          prevValue = prev.propertySource[prev.propertyName];
          /* eslint-disable-next-line */

          watcher = this;

          if (propertySource === prevValue) {
            this.needsRefresh = true;
          }
        }

        prev.next = current;
      }

      this.last = current;
    }

    handleChange() {
      if (this.needsQueue) {
        this.needsQueue = false;
        queueUpdate(this);
      } else if (!this.isAsync) {
        this.call();
      }
    }

    call() {
      if (this.last !== null) {
        this.needsQueue = this.isAsync;
        this.notify(this);
      }
    }

    *records() {
      let next = this.first;

      while (next !== void 0) {
        yield next;
        next = next.next;
      }
    }

  }

  makeSerializationNoop(ExpressionNotifierImplementation);
  return Object.freeze({
    /**
     * @internal
     * @param factory - The factory used to create array observers.
     */
    setArrayObserverFactory(factory) {
      createArrayObserver = factory;
    },

    /**
     * Gets a notifier for an object or Array.
     * @param source - The object or Array to get the notifier for.
     */
    getNotifier,

    /**
     * Records a property change for a source object.
     * @param source - The object to record the change against.
     * @param propertyName - The property to track as changed.
     */
    track(source, propertyName) {
      watcher && watcher.watch(source, propertyName);
    },

    /**
     * Notifies watchers that the currently executing property getter or function is volatile
     * with respect to its observable dependencies.
     */
    trackVolatile() {
      watcher && (watcher.needsRefresh = true);
    },

    /**
     * Notifies subscribers of a source object of changes.
     * @param source - the object to notify of changes.
     * @param args - The change args to pass to subscribers.
     */
    notify(source, args) {
      /* eslint-disable-next-line @typescript-eslint/no-use-before-define */
      getNotifier(source).notify(args);
    },

    /**
     * Defines an observable property on an object or prototype.
     * @param target - The target object to define the observable on.
     * @param nameOrAccessor - The name of the property to define as observable;
     * or a custom accessor that specifies the property name and accessor implementation.
     */
    defineProperty(target, nameOrAccessor) {
      if (isString(nameOrAccessor)) {
        nameOrAccessor = new DefaultObservableAccessor(nameOrAccessor);
      }

      getAccessors(target).push(nameOrAccessor);
      Reflect.defineProperty(target, nameOrAccessor.name, {
        enumerable: true,

        get() {
          return nameOrAccessor.getValue(this);
        },

        set(newValue) {
          nameOrAccessor.setValue(this, newValue);
        }

      });
    },

    /**
     * Finds all the observable accessors defined on the target,
     * including its prototype chain.
     * @param target - The target object to search for accessor on.
     */
    getAccessors,

    /**
     * Creates a {@link ExpressionNotifier} that can watch the
     * provided {@link Expression} for changes.
     * @param expression - The binding to observe.
     * @param initialSubscriber - An initial subscriber to changes in the binding value.
     * @param isVolatileBinding - Indicates whether the binding's dependency list must be re-evaluated on every value evaluation.
     */
    binding(expression, initialSubscriber, isVolatileBinding = this.isVolatileBinding(expression)) {
      return new ExpressionNotifierImplementation(expression, initialSubscriber, isVolatileBinding);
    },

    /**
     * Determines whether a binding expression is volatile and needs to have its dependency list re-evaluated
     * on every evaluation of the value.
     * @param expression - The binding to inspect.
     */
    isVolatileBinding(expression) {
      return volatileRegex.test(expression.toString());
    }

  });
});
/**
 * Decorator: Defines an observable property on the target.
 * @param target - The target to define the observable on.
 * @param nameOrAccessor - The property name or accessor to define the observable as.
 * @public
 */

function observable(target, nameOrAccessor) {
  Observable.defineProperty(target, nameOrAccessor);
}
/**
 * Decorator: Marks a property getter as having volatile observable dependencies.
 * @param target - The target that the property is defined on.
 * @param name - The property name.
 * @param name - The existing descriptor.
 * @public
 */

function volatile(target, name, descriptor) {
  return Object.assign({}, descriptor, {
    get() {
      Observable.trackVolatile();
      return descriptor.get.apply(this);
    }

  });
}
const contextEvent = FAST.getById(KernelServiceId.contextEvent, () => {
  let current = null;
  return {
    get() {
      return current;
    },

    set(event) {
      current = event;
    }

  };
});
/**
 * Provides additional contextual information available to behaviors and expressions.
 * @public
 */

const ExecutionContext = Object.freeze({
  /**
   * A default execution context.
   */
  default: {
    index: 0,
    length: 0,

    get event() {
      return ExecutionContext.getEvent();
    },

    eventDetail() {
      return this.event.detail;
    },

    eventTarget() {
      return this.event.target;
    }

  },

  /**
   * Gets the current event.
   * @returns An event object.
   */
  getEvent() {
    return contextEvent.get();
  },

  /**
   * Sets the current event.
   * @param event - An event object.
   */
  setEvent(event) {
    contextEvent.set(event);
  }

});

/**
 * A splice map is a representation of how a previous array of items
 * was transformed into a new array of items. Conceptually it is a list of
 * tuples of
 *
 *   (index, removed, addedCount)
 *
 * which are kept in ascending index order of. The tuple represents that at
 * the |index|, |removed| sequence of items were removed, and counting forward
 * from |index|, |addedCount| items were added.
 * @public
 */

class Splice {
  /**
   * Creates a splice.
   * @param index - The index that the splice occurs at.
   * @param removed - The items that were removed.
   * @param addedCount - The  number of items that were added.
   */
  constructor(index, removed, addedCount) {
    this.index = index;
    this.removed = removed;
    this.addedCount = addedCount;
  }
  /**
   * Adjusts the splice index based on the provided array.
   * @param array - The array to adjust to.
   * @returns The same splice, mutated based on the reference array.
   */


  adjustTo(array) {
    let index = this.index;
    const arrayLength = array.length;

    if (index > arrayLength) {
      index = arrayLength - this.addedCount;
    } else if (index < 0) {
      index = arrayLength + this.removed.length + index - this.addedCount;
    }

    this.index = index < 0 ? 0 : index;
    return this;
  }

}
/**
 * Indicates what level of feature support the splice
 * strategy provides.
 * @public
 */

const SpliceStrategySupport = Object.freeze({
  /**
   * Only supports resets.
   */
  reset: 1,

  /**
   * Supports tracking splices and resets.
   */
  splice: 2,

  /**
   * Supports tracking splices and resets, while applying some form
   * of optimization, such as merging, to the splices.
   */
  optimized: 3
});
const reset = new Splice(0, emptyArray, 0);
reset.reset = true;
const resetSplices = [reset]; // Note: This function is *based* on the computation of the Levenshtein
// "edit" distance. The one change is that "updates" are treated as two
// edits - not one. With Array splices, an update is really a delete
// followed by an add. By retaining this, we optimize for "keeping" the
// maximum array items in the original array. For example:
//
//   'xxxx123' to '123yyyy'
//
// With 1-edit updates, the shortest path would be just to update all seven
// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This
// leaves the substring '123' intact.

function calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {
  // "Deletion" columns
  const rowCount = oldEnd - oldStart + 1;
  const columnCount = currentEnd - currentStart + 1;
  const distances = new Array(rowCount);
  let north;
  let west; // "Addition" rows. Initialize null column.

  for (let i = 0; i < rowCount; ++i) {
    distances[i] = new Array(columnCount);
    distances[i][0] = i;
  } // Initialize null row


  for (let j = 0; j < columnCount; ++j) {
    distances[0][j] = j;
  }

  for (let i = 1; i < rowCount; ++i) {
    for (let j = 1; j < columnCount; ++j) {
      if (current[currentStart + j - 1] === old[oldStart + i - 1]) {
        distances[i][j] = distances[i - 1][j - 1];
      } else {
        north = distances[i - 1][j] + 1;
        west = distances[i][j - 1] + 1;
        distances[i][j] = north < west ? north : west;
      }
    }
  }

  return distances;
} // This starts at the final weight, and walks "backward" by finding
// the minimum previous weight recursively until the origin of the weight
// matrix.


function spliceOperationsFromEditDistances(distances) {
  let i = distances.length - 1;
  let j = distances[0].length - 1;
  let current = distances[i][j];
  const edits = [];

  while (i > 0 || j > 0) {
    if (i === 0) {
      edits.push(2
      /* Edit.add */
      );
      j--;
      continue;
    }

    if (j === 0) {
      edits.push(3
      /* Edit.delete */
      );
      i--;
      continue;
    }

    const northWest = distances[i - 1][j - 1];
    const west = distances[i - 1][j];
    const north = distances[i][j - 1];
    let min;

    if (west < north) {
      min = west < northWest ? west : northWest;
    } else {
      min = north < northWest ? north : northWest;
    }

    if (min === northWest) {
      if (northWest === current) {
        edits.push(0
        /* Edit.leave */
        );
      } else {
        edits.push(1
        /* Edit.update */
        );
        current = northWest;
      }

      i--;
      j--;
    } else if (min === west) {
      edits.push(3
      /* Edit.delete */
      );
      i--;
      current = west;
    } else {
      edits.push(2
      /* Edit.add */
      );
      j--;
      current = north;
    }
  }

  return edits.reverse();
}

function sharedPrefix(current, old, searchLength) {
  for (let i = 0; i < searchLength; ++i) {
    if (current[i] !== old[i]) {
      return i;
    }
  }

  return searchLength;
}

function sharedSuffix(current, old, searchLength) {
  let index1 = current.length;
  let index2 = old.length;
  let count = 0;

  while (count < searchLength && current[--index1] === old[--index2]) {
    count++;
  }

  return count;
}

function intersect(start1, end1, start2, end2) {
  // Disjoint
  if (end1 < start2 || end2 < start1) {
    return -1;
  } // Adjacent


  if (end1 === start2 || end2 === start1) {
    return 0;
  } // Non-zero intersect, span1 first


  if (start1 < start2) {
    if (end1 < end2) {
      return end1 - start2; // Overlap
    }

    return end2 - start2; // Contained
  } // Non-zero intersect, span2 first


  if (end2 < end1) {
    return end2 - start1; // Overlap
  }

  return end1 - start1; // Contained
}
/**
 * @remarks
 * Lacking individual splice mutation information, the minimal set of
 * splices can be synthesized given the previous state and final state of an
 * array. The basic approach is to calculate the edit distance matrix and
 * choose the shortest path through it.
 *
 * Complexity: O(l * p)
 *   l: The length of the current array
 *   p: The length of the old array
 */


function calc(current, currentStart, currentEnd, old, oldStart, oldEnd) {
  let prefixCount = 0;
  let suffixCount = 0;
  const minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);

  if (currentStart === 0 && oldStart === 0) {
    prefixCount = sharedPrefix(current, old, minLength);
  }

  if (currentEnd === current.length && oldEnd === old.length) {
    suffixCount = sharedSuffix(current, old, minLength - prefixCount);
  }

  currentStart += prefixCount;
  oldStart += prefixCount;
  currentEnd -= suffixCount;
  oldEnd -= suffixCount;

  if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {
    return emptyArray;
  }

  if (currentStart === currentEnd) {
    const splice = new Splice(currentStart, [], 0);

    while (oldStart < oldEnd) {
      splice.removed.push(old[oldStart++]);
    }

    return [splice];
  } else if (oldStart === oldEnd) {
    return [new Splice(currentStart, [], currentEnd - currentStart)];
  }

  const ops = spliceOperationsFromEditDistances(calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));
  const splices = [];
  let splice = void 0;
  let index = currentStart;
  let oldIndex = oldStart;

  for (let i = 0; i < ops.length; ++i) {
    switch (ops[i]) {
      case 0
      /* Edit.leave */
      :
        if (splice !== void 0) {
          splices.push(splice);
          splice = void 0;
        }

        index++;
        oldIndex++;
        break;

      case 1
      /* Edit.update */
      :
        if (splice === void 0) {
          splice = new Splice(index, [], 0);
        }

        splice.addedCount++;
        index++;
        splice.removed.push(old[oldIndex]);
        oldIndex++;
        break;

      case 2
      /* Edit.add */
      :
        if (splice === void 0) {
          splice = new Splice(index, [], 0);
        }

        splice.addedCount++;
        index++;
        break;

      case 3
      /* Edit.delete */
      :
        if (splice === void 0) {
          splice = new Splice(index, [], 0);
        }

        splice.removed.push(old[oldIndex]);
        oldIndex++;
        break;
      // no default
    }
  }

  if (splice !== void 0) {
    splices.push(splice);
  }

  return splices;
}

function merge(splice, splices) {
  let inserted = false;
  let insertionOffset = 0;

  for (let i = 0; i < splices.length; i++) {
    const current = splices[i];
    current.index += insertionOffset;

    if (inserted) {
      continue;
    }

    const intersectCount = intersect(splice.index, splice.index + splice.removed.length, current.index, current.index + current.addedCount);

    if (intersectCount >= 0) {
      // Merge the two splices
      splices.splice(i, 1);
      i--;
      insertionOffset -= current.addedCount - current.removed.length;
      splice.addedCount += current.addedCount - intersectCount;
      const deleteCount = splice.removed.length + current.removed.length - intersectCount;

      if (!splice.addedCount && !deleteCount) {
        // merged splice is a noop. discard.
        inserted = true;
      } else {
        let currentRemoved = current.removed;

        if (splice.index < current.index) {
          // some prefix of splice.removed is prepended to current.removed.
          const prepend = splice.removed.slice(0, current.index - splice.index);
          prepend.push(...currentRemoved);
          currentRemoved = prepend;
        }

        if (splice.index + splice.removed.length > current.index + current.addedCount) {
          // some suffix of splice.removed is appended to current.removed.
          const append = splice.removed.slice(current.index + current.addedCount - splice.index);
          currentRemoved.push(...append);
        }

        splice.removed = currentRemoved;

        if (current.index < splice.index) {
          splice.index = current.index;
        }
      }
    } else if (splice.index < current.index) {
      // Insert splice here.
      inserted = true;
      splices.splice(i, 0, splice);
      i++;
      const offset = splice.addedCount - splice.removed.length;
      current.index += offset;
      insertionOffset += offset;
    }
  }

  if (!inserted) {
    splices.push(splice);
  }
}

function project(array, changes) {
  let splices = [];
  const initialSplices = [];

  for (let i = 0, ii = changes.length; i < ii; i++) {
    merge(changes[i], initialSplices);
  }

  for (let i = 0, ii = initialSplices.length; i < ii; ++i) {
    const splice = initialSplices[i];

    if (splice.addedCount === 1 && splice.removed.length === 1) {
      if (splice.removed[0] !== array[splice.index]) {
        splices.push(splice);
      }

      continue;
    }

    splices = splices.concat(calc(array, splice.index, splice.index + splice.addedCount, splice.removed, 0, splice.removed.length));
  }

  return splices;
}
/**
 * A SpliceStrategy that attempts to merge all splices into the minimal set of
 * splices needed to represent the change from the old array to the new array.
 * @public
 */


let defaultSpliceStrategy = Object.freeze({
  support: SpliceStrategySupport.optimized,

  normalize(previous, current, changes) {
    if (previous === void 0) {
      if (changes === void 0) {
        return emptyArray;
      }

      return changes.length > 1 ? project(current, changes) : changes;
    }

    return resetSplices;
  },

  pop(array, observer, pop, args) {
    const notEmpty = array.length > 0;
    const result = pop.apply(array, args);

    if (notEmpty) {
      observer.addSplice(new Splice(array.length, [result], 0));
    }

    return result;
  },

  push(array, observer, push, args) {
    const result = push.apply(array, args);
    observer.addSplice(new Splice(array.length - args.length, [], args.length).adjustTo(array));
    return result;
  },

  reverse(array, observer, reverse, args) {
    const result = reverse.apply(array, args);
    observer.reset(array);
    return result;
  },

  shift(array, observer, shift, args) {
    const notEmpty = array.length > 0;
    const result = shift.apply(array, args);

    if (notEmpty) {
      observer.addSplice(new Splice(0, [result], 0));
    }

    return result;
  },

  sort(array, observer, sort, args) {
    const result = sort.apply(array, args);
    observer.reset(array);
    return result;
  },

  splice(array, observer, splice, args) {
    const result = splice.apply(array, args);
    observer.addSplice(new Splice(+args[0], result, args.length > 2 ? args.length - 2 : 0).adjustTo(array));
    return result;
  },

  unshift(array, observer, unshift, args) {
    const result = unshift.apply(array, args);
    observer.addSplice(new Splice(0, [], args.length).adjustTo(array));
    return result;
  }

});
/**
 * Functionality related to tracking changes in arrays.
 * @public
 */

const SpliceStrategy = Object.freeze({
  /**
   * A set of changes that represent a full array reset.
   */
  reset: resetSplices,

  /**
   * Sets the default strategy to use for array observers.
   * @param strategy - The splice strategy to use.
   */
  setDefaultStrategy(strategy) {
    defaultSpliceStrategy = strategy;
  }

});

function setNonEnumerable(target, property, value) {
  Reflect.defineProperty(target, property, {
    value,
    enumerable: false
  });
}

class DefaultArrayObserver extends SubscriberSet {
  constructor(subject) {
    super(subject);
    this.oldCollection = void 0;
    this.splices = void 0;
    this.needsQueue = true;
    this._strategy = null;
    this._lengthObserver = void 0;
    this.call = this.flush;
    setNonEnumerable(subject, "$fastController", this);
  }

  get strategy() {
    return this._strategy;
  }

  set strategy(value) {
    this._strategy = value;
  }

  get lengthObserver() {
    let observer = this._lengthObserver;

    if (observer === void 0) {
      const array = this.subject;
      this._lengthObserver = observer = {
        length: array.length,

        handleChange() {
          if (this.length !== array.length) {
            this.length = array.length;
            Observable.notify(observer, "length");
          }
        }

      };
      this.subscribe(observer);
    }

    return observer;
  }

  subscribe(subscriber) {
    this.flush();
    super.subscribe(subscriber);
  }

  addSplice(splice) {
    if (this.splices === void 0) {
      this.splices = [splice];
    } else {
      this.splices.push(splice);
    }

    this.enqueue();
  }

  reset(oldCollection) {
    this.oldCollection = oldCollection;
    this.enqueue();
  }

  flush() {
    var _a;

    const splices = this.splices;
    const oldCollection = this.oldCollection;

    if (splices === void 0 && oldCollection === void 0) {
      return;
    }

    this.needsQueue = true;
    this.splices = void 0;
    this.oldCollection = void 0;
    this.notify(((_a = this._strategy) !== null && _a !== void 0 ? _a : defaultSpliceStrategy).normalize(oldCollection, this.subject, splices));
  }

  enqueue() {
    if (this.needsQueue) {
      this.needsQueue = false;
      Updates.enqueue(this);
    }
  }

}

let enabled = false;
/**
 * An observer for arrays.
 * @public
 */

const ArrayObserver = Object.freeze({
  /**
   * Enables the array observation mechanism.
   * @remarks
   * Array observation is enabled automatically when using the
   * {@link RepeatDirective}, so calling this API manually is
   * not typically necessary.
   */
  enable() {
    if (enabled) {
      return;
    }

    enabled = true;
    Observable.setArrayObserverFactory(collection => new DefaultArrayObserver(collection));
    const proto = Array.prototype;

    if (!proto.$fastPatch) {
      setNonEnumerable(proto, "$fastPatch", 1);
      [proto.pop, proto.push, proto.reverse, proto.shift, proto.sort, proto.splice, proto.unshift].forEach(method => {
        proto[method.name] = function (...args) {
          var _a;

          const o = this.$fastController;
          return o === void 0 ? method.apply(this, args) : ((_a = o.strategy) !== null && _a !== void 0 ? _a : defaultSpliceStrategy)[method.name](this, o, method, args);
        };
      });
    }
  }

});
/**
 * Enables observing the length of an array.
 * @param array - The array to observe the length of.
 * @returns The length of the array.
 * @public
 */

function lengthOf(array) {
  if (!array) {
    return 0;
  }

  let arrayObserver = array.$fastController;

  if (arrayObserver === void 0) {
    ArrayObserver.enable();
    arrayObserver = Observable.getNotifier(array);
  }

  Observable.track(arrayObserver.lengthObserver, "length");
  return array.length;
}

/**
 * Captures a binding expression along with related information and capabilities.
 *
 * @public
 */
class Binding {
  /**
   * Creates a binding.
   * @param evaluate - Evaluates the binding.
   * @param policy - The security policy to associate with this binding.
   * @param isVolatile - Indicates whether the binding is volatile.
   */
  constructor(evaluate, policy, isVolatile = false) {
    this.evaluate = evaluate;
    this.policy = policy;
    this.isVolatile = isVolatile;
  }

}

class OneWayBinding extends Binding {
  createObserver(subscriber) {
    return Observable.binding(this.evaluate, subscriber, this.isVolatile);
  }

}
/**
 * Creates an standard binding.
 * @param expression - The binding to refresh when changed.
 * @param policy - The security policy to associate with th binding.
 * @param isVolatile - Indicates whether the binding is volatile or not.
 * @returns A binding configuration.
 * @public
 */


function oneWay(expression, policy, isVolatile = Observable.isVolatileBinding(expression)) {
  return new OneWayBinding(expression, policy, isVolatile);
}
/**
 * Creates an event listener binding.
 * @param expression - The binding to invoke when the event is raised.
 * @param options - Event listener options.
 * @returns A binding configuration.
 * @public
 */

function listener(expression, options) {
  const config = new OneWayBinding(expression);
  config.options = options;
  return config;
}

class OneTimeBinding extends Binding {
  createObserver() {
    return this;
  }

  bind(controller) {
    return this.evaluate(controller.source, controller.context);
  }

}

makeSerializationNoop(OneTimeBinding);
/**
 * Creates a one time binding
 * @param expression - The binding to refresh when signaled.
 * @param policy - The security policy to associate with th binding.
 * @returns A binding configuration.
 * @public
 */

function oneTime(expression, policy) {
  return new OneTimeBinding(expression, policy);
}

/**
 * Normalizes the input value into a binding.
 * @param value - The value to create the default binding for.
 * @returns A binding configuration for the provided value.
 * @public
 */

function normalizeBinding(value) {
  return isFunction(value) ? oneWay(value) : value instanceof Binding ? value : oneTime(() => value);
}

let DefaultStyleStrategy;

function reduceStyles(styles) {
  return styles.map(x => x instanceof ElementStyles ? reduceStyles(x.styles) : [x]).reduce((prev, curr) => prev.concat(curr), []);
}
/**
 * Represents styles that can be applied to a custom element.
 * @public
 */


class ElementStyles {
  /**
   * Creates an instance of ElementStyles.
   * @param styles - The styles that will be associated with elements.
   */
  constructor(styles) {
    this.styles = styles;
    this.targets = new WeakSet();
    this._strategy = null;
    this.behaviors = styles.map(x => x instanceof ElementStyles ? x.behaviors : null).reduce((prev, curr) => curr === null ? prev : prev === null ? curr : prev.concat(curr), null);
  }
  /**
   * Gets the StyleStrategy associated with these element styles.
   */


  get strategy() {
    if (this._strategy === null) {
      this.withStrategy(DefaultStyleStrategy);
    }

    return this._strategy;
  }
  /** @internal */


  addStylesTo(target) {
    this.strategy.addStylesTo(target);
    this.targets.add(target);
  }
  /** @internal */


  removeStylesFrom(target) {
    this.strategy.removeStylesFrom(target);
    this.targets.delete(target);
  }
  /** @internal */


  isAttachedTo(target) {
    return this.targets.has(target);
  }
  /**
   * Associates behaviors with this set of styles.
   * @param behaviors - The behaviors to associate.
   */


  withBehaviors(...behaviors) {
    this.behaviors = this.behaviors === null ? behaviors : this.behaviors.concat(behaviors);
    return this;
  }
  /**
   * Sets the strategy that handles adding/removing these styles for an element.
   * @param strategy - The strategy to use.
   */


  withStrategy(Strategy) {
    this._strategy = new Strategy(reduceStyles(this.styles));
    return this;
  }
  /**
   * Sets the default strategy type to use when creating style strategies.
   * @param Strategy - The strategy type to construct.
   */


  static setDefaultStrategy(Strategy) {
    DefaultStyleStrategy = Strategy;
  }
  /**
   * Normalizes a set of composable style options.
   * @param styles - The style options to normalize.
   * @returns A singular ElementStyles instance or undefined.
   */


  static normalize(styles) {
    return styles === void 0 ? void 0 : Array.isArray(styles) ? new ElementStyles(styles) : styles instanceof ElementStyles ? styles : new ElementStyles([styles]);
  }

}
/**
 * Indicates whether the DOM supports the adoptedStyleSheets feature.
 */

ElementStyles.supportsAdoptedStyleSheets = Array.isArray(document.adoptedStyleSheets) && "replace" in CSSStyleSheet.prototype;

const registry$1 = createTypeRegistry();
/**
 * Instructs the css engine to provide dynamic styles or
 * associate behaviors with styles.
 * @public
 */

const CSSDirective = Object.freeze({
  /**
   * Gets the directive definition associated with the instance.
   * @param instance - The directive instance to retrieve the definition for.
   */
  getForInstance: registry$1.getForInstance,

  /**
   * Gets the directive definition associated with the specified type.
   * @param type - The directive type to retrieve the definition for.
   */
  getByType: registry$1.getByType,

  /**
   * Defines a CSSDirective.
   * @param type - The type to define as a directive.
   */
  define(type) {
    registry$1.register({
      type
    });
    return type;
  }

});
/**
 * Decorator: Defines a CSSDirective.
 * @public
 */

function cssDirective() {
  /* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */
  return function (type) {
    CSSDirective.define(type);
  };
}

function handleChange(directive, controller, observer) {
  controller.source.style.setProperty(directive.targetAspect, observer.bind(controller));
}
/**
 * Enables bindings in CSS.
 *
 * @public
 */


class CSSBindingDirective {
  /**
   * Creates an instance of CSSBindingDirective.
   * @param dataBinding - The binding to use in CSS.
   * @param targetAspect - The CSS property to target.
   */
  constructor(dataBinding, targetAspect) {
    this.dataBinding = dataBinding;
    this.targetAspect = targetAspect;
  }
  /**
   * Creates a CSS fragment to interpolate into the CSS document.
   * @returns - the string to interpolate into CSS
   */


  createCSS(add) {
    add(this);
    return `var(${this.targetAspect})`;
  }
  /**
   * Executed when this behavior is attached to a controller.
   * @param controller - Controls the behavior lifecycle.
   */


  addedCallback(controller) {
    var _a;

    const element = controller.source;

    if (!element.$cssBindings) {
      element.$cssBindings = new Map();
      const setAttribute = element.setAttribute;

      element.setAttribute = (attr, value) => {
        setAttribute.call(element, attr, value);

        if (attr === "style") {
          element.$cssBindings.forEach((v, k) => handleChange(k, v.controller, v.observer));
        }
      };
    }

    const observer = (_a = controller[this.targetAspect]) !== null && _a !== void 0 ? _a : controller[this.targetAspect] = this.dataBinding.createObserver(this, this);
    observer.controller = controller;
    controller.source.$cssBindings.set(this, {
      controller,
      observer
    });
  }
  /**
   * Executed when this behavior's host is connected.
   * @param controller - Controls the behavior lifecycle.
   */


  connectedCallback(controller) {
    handleChange(this, controller, controller[this.targetAspect]);
  }
  /**
   * Executed when this behavior is detached from a controller.
   * @param controller - Controls the behavior lifecycle.
   */


  removedCallback(controller) {
    if (controller.source.$cssBindings) {
      controller.source.$cssBindings.delete(this);
    }
  }
  /**
   * Called when a subject this instance has subscribed to changes.
   * @param subject - The subject of the change.
   * @param args - The event args detailing the change that occurred.
   *
   * @internal
   */


  handleChange(_, observer) {
    handleChange(this, observer.controller, observer);
  }

}
CSSDirective.define(CSSBindingDirective);

const marker$1 = `${Math.random().toString(36).substring(2, 8)}`;
let varId = 0;

const nextCSSVariable = () => `--v${marker$1}${++varId}`;

function collectStyles(strings, values) {
  const styles = [];
  let cssString = "";
  const behaviors = [];

  const add = behavior => {
    behaviors.push(behavior);
  };

  for (let i = 0, ii = strings.length - 1; i < ii; ++i) {
    cssString += strings[i];
    let value = values[i];

    if (isFunction(value)) {
      value = new CSSBindingDirective(oneWay(value), nextCSSVariable()).createCSS(add);
    } else if (value instanceof Binding) {
      value = new CSSBindingDirective(value, nextCSSVariable()).createCSS(add);
    } else if (CSSDirective.getForInstance(value) !== void 0) {
      value = value.createCSS(add);
    }

    if (value instanceof ElementStyles || value instanceof CSSStyleSheet) {
      if (cssString.trim() !== "") {
        styles.push(cssString);
        cssString = "";
      }

      styles.push(value);
    } else {
      cssString += value;
    }
  }

  cssString += strings[strings.length - 1];

  if (cssString.trim() !== "") {
    styles.push(cssString);
  }

  return {
    styles,
    behaviors
  };
}
/**
 * Transforms a template literal string into styles.
 * @param strings - The string fragments that are interpolated with the values.
 * @param values - The values that are interpolated with the string fragments.
 * @remarks
 * The css helper supports interpolation of strings and ElementStyle instances.
 * @public
 */


const css = (strings, ...values) => {
  const {
    styles,
    behaviors
  } = collectStyles(strings, values);
  const elementStyles = new ElementStyles(styles);
  return behaviors.length ? elementStyles.withBehaviors(...behaviors) : elementStyles;
};

class CSSPartial {
  constructor(styles, behaviors) {
    this.behaviors = behaviors;
    this.css = "";
    const stylesheets = styles.reduce((accumulated, current) => {
      if (isString(current)) {
        this.css += current;
      } else {
        accumulated.push(current);
      }

      return accumulated;
    }, []);

    if (stylesheets.length) {
      this.styles = new ElementStyles(stylesheets);
    }
  }

  createCSS(add) {
    this.behaviors.forEach(add);

    if (this.styles) {
      add(this);
    }

    return this.css;
  }

  addedCallback(controller) {
    controller.addStyles(this.styles);
  }

  removedCallback(controller) {
    controller.removeStyles(this.styles);
  }

}

CSSDirective.define(CSSPartial);

css.partial = (strings, ...values) => {
  const {
    styles,
    behaviors
  } = collectStyles(strings, values);
  return new CSSPartial(styles, behaviors);
};

const marker = `fast-${Math.random().toString(36).substring(2, 8)}`;
const interpolationStart = `${marker}{`;
const interpolationEnd = `}${marker}`;
const interpolationEndLength = interpolationEnd.length;
let id$1 = 0;
/** @internal */

const nextId = () => `${marker}-${++id$1}`;
/**
 * Common APIs related to markup generation.
 * @public
 */

const Markup = Object.freeze({
  /**
   * Creates a placeholder string suitable for marking out a location *within*
   * an attribute value or HTML content.
   * @param index - The directive index to create the placeholder for.
   * @remarks
   * Used internally by binding directives.
   */
  interpolation: id => `${interpolationStart}${id}${interpolationEnd}`,

  /**
   * Creates a placeholder that manifests itself as an attribute on an
   * element.
   * @param attributeName - The name of the custom attribute.
   * @param index - The directive index to create the placeholder for.
   * @remarks
   * Used internally by attribute directives such as `ref`, `slotted`, and `children`.
   */
  attribute: id => `${nextId()}="${interpolationStart}${id}${interpolationEnd}"`,

  /**
   * Creates a placeholder that manifests itself as a marker within the DOM structure.
   * @param index - The directive index to create the placeholder for.
   * @remarks
   * Used internally by structural directives such as `repeat`.
   */
  comment: id => `<!--${interpolationStart}${id}${interpolationEnd}-->`
});
/**
 * Common APIs related to content parsing.
 * @public
 */

const Parser = Object.freeze({
  /**
   * Parses text content or HTML attribute content, separating out the static strings
   * from the directives.
   * @param value - The content or attribute string to parse.
   * @param factories - A list of directives to search for in the string.
   * @returns A heterogeneous array of static strings interspersed with
   * directives or null if no directives are found in the string.
   */
  parse(value, factories) {
    const parts = value.split(interpolationStart);

    if (parts.length === 1) {
      return null;
    }

    const result = [];

    for (let i = 0, ii = parts.length; i < ii; ++i) {
      const current = parts[i];
      const index = current.indexOf(interpolationEnd);
      let literal;

      if (index === -1) {
        literal = current;
      } else {
        const factoryId = current.substring(0, index);
        result.push(factories[factoryId]);
        literal = current.substring(index + interpolationEndLength);
      }

      if (literal !== "") {
        result.push(literal);
      }
    }

    return result;
  }

});

const registry = createTypeRegistry();
/**
 * Instructs the template engine to apply behavior to a node.
 * @public
 */

const HTMLDirective = Object.freeze({
  /**
   * Gets the directive definition associated with the instance.
   * @param instance - The directive instance to retrieve the definition for.
   */
  getForInstance: registry.getForInstance,

  /**
   * Gets the directive definition associated with the specified type.
   * @param type - The directive type to retrieve the definition for.
   */
  getByType: registry.getByType,

  /**
   * Defines an HTMLDirective based on the options.
   * @param type - The type to define as a directive.
   * @param options - Options that specify the directive's application.
   */
  define(type, options) {
    options = options || {};
    options.type = type;
    registry.register(options);
    return type;
  },

  /**
   *
   * @param directive - The directive to assign the aspect to.
   * @param value - The value to base the aspect determination on.
   * @remarks
   * If a falsy value is provided, then the content aspect will be assigned.
   */
  assignAspect(directive, value) {
    if (!value) {
      directive.aspectType = DOMAspect.content;
      return;
    }

    directive.sourceAspect = value;

    switch (value[0]) {
      case ":":
        directive.targetAspect = value.substring(1);
        directive.aspectType = directive.targetAspect === "classList" ? DOMAspect.tokenList : DOMAspect.property;
        break;

      case "?":
        directive.targetAspect = value.substring(1);
        directive.aspectType = DOMAspect.booleanAttribute;
        break;

      case "@":
        directive.targetAspect = value.substring(1);
        directive.aspectType = DOMAspect.event;
        break;

      default:
        directive.targetAspect = value;
        directive.aspectType = DOMAspect.attribute;
        break;
    }
  }

});
/**
 * Decorator: Defines an HTMLDirective.
 * @param options - Provides options that specify the directive's application.
 * @public
 */

function htmlDirective(options) {
  /* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */
  return function (type) {
    HTMLDirective.define(type, options);
  };
}
/**
 * A base class used for attribute directives that don't need internal state.
 * @public
 */

class StatelessAttachedAttributeDirective {
  /**
   * Creates an instance of RefDirective.
   * @param options - The options to use in configuring the directive.
   */
  constructor(options) {
    this.options = options;
  }
  /**
   * Creates a placeholder string based on the directive's index within the template.
   * @param index - The index of the directive within the template.
   * @remarks
   * Creates a custom attribute placeholder.
   */


  createHTML(add) {
    return Markup.attribute(add(this));
  }
  /**
   * Creates a behavior.
   * @param targets - The targets available for behaviors to be attached to.
   */


  createBehavior() {
    return this;
  }

}
makeSerializationNoop(StatelessAttachedAttributeDirective);

function updateContent(target, aspect, value, controller) {
  // If there's no actual value, then this equates to the
  // empty string for the purposes of content bindings.
  if (value === null || value === undefined) {
    value = "";
  } // If the value has a "create" method, then it's a ContentTemplate.


  if (value.create) {
    target.textContent = "";
    let view = target.$fastView; // If there's no previous view that we might be able to
    // reuse then create a new view from the template.

    if (view === void 0) {
      view = value.create();
    } else {
      // If there is a previous view, but it wasn't created
      // from the same template as the new value, then we
      // need to remove the old view if it's still in the DOM
      // and create a new view from the template.
      if (target.$fastTemplate !== value) {
        if (view.isComposed) {
          view.remove();
          view.unbind();
        }

        view = value.create();
      }
    } // It's possible that the value is the same as the previous template
    // and that there's actually no need to compose it.


    if (!view.isComposed) {
      view.isComposed = true;
      view.bind(controller.source, controller.context);
      view.insertBefore(target);
      target.$fastView = view;
      target.$fastTemplate = value;
    } else if (view.needsBindOnly) {
      view.needsBindOnly = false;
      view.bind(controller.source, controller.context);
    }
  } else {
    const view = target.$fastView; // If there is a view and it's currently composed into
    // the DOM, then we need to remove it.

    if (view !== void 0 && view.isComposed) {
      view.isComposed = false;
      view.remove();

      if (view.needsBindOnly) {
        view.needsBindOnly = false;
      } else {
        view.unbind();
      }
    }

    target.textContent = value;
  }
}

function updateTokenList(target, aspect, value) {
  var _a;

  const lookup = `${this.id}-t`;
  const state = (_a = target[lookup]) !== null && _a !== void 0 ? _a : target[lookup] = {
    v: 0,
    cv: Object.create(null)
  };
  const classVersions = state.cv;
  let version = state.v;
  const tokenList = target[aspect]; // Add the classes, tracking the version at which they were added.

  if (value !== null && value !== undefined && value.length) {
    const names = value.split(/\s+/);

    for (let i = 0, ii = names.length; i < ii; ++i) {
      const currentName = names[i];

      if (currentName === "") {
        continue;
      }

      classVersions[currentName] = version;
      tokenList.add(currentName);
    }
  }

  state.v = version + 1; // If this is the first call to add classes, there's no need to remove old ones.

  if (version === 0) {
    return;
  } // Remove classes from the previous version.


  version -= 1;

  for (const name in classVersions) {
    if (classVersions[name] === version) {
      tokenList.remove(name);
    }
  }
}

const sinkLookup = {
  [DOMAspect.attribute]: DOM.setAttribute,
  [DOMAspect.booleanAttribute]: DOM.setBooleanAttribute,
  [DOMAspect.property]: (t, a, v) => t[a] = v,
  [DOMAspect.content]: updateContent,
  [DOMAspect.tokenList]: updateTokenList,
  [DOMAspect.event]: () => void 0
};
/**
 * A directive that applies bindings.
 * @public
 */

class HTMLBindingDirective {
  /**
   * Creates an instance of HTMLBindingDirective.
   * @param dataBinding - The binding configuration to apply.
   */
  constructor(dataBinding) {
    this.dataBinding = dataBinding;
    this.updateTarget = null;
    /**
     * The type of aspect to target.
     */

    this.aspectType = DOMAspect.content;
  }
  /**
   * Creates HTML to be used within a template.
   * @param add - Can be used to add  behavior factories to a template.
   */


  createHTML(add) {
    return Markup.interpolation(add(this));
  }
  /**
   * Creates a behavior.
   */


  createBehavior() {
    var _a;

    if (this.updateTarget === null) {
      const sink = sinkLookup[this.aspectType];
      const policy = (_a = this.dataBinding.policy) !== null && _a !== void 0 ? _a : this.policy;

      if (!sink) {
        throw FAST.error(1205
        /* Message.unsupportedBindingBehavior */
        );
      }

      this.data = `${this.id}-d`;
      this.updateTarget = policy.protect(this.targetTagName, this.aspectType, this.targetAspect, sink);
    }

    return this;
  }
  /** @internal */


  bind(controller) {
    var _a;

    const target = controller.targets[this.targetNodeId];

    switch (this.aspectType) {
      case DOMAspect.event:
        target[this.data] = controller;
        target.addEventListener(this.targetAspect, this, this.dataBinding.options);
        break;

      case DOMAspect.content:
        controller.onUnbind(this);
      // intentional fall through

      default:
        const observer = (_a = target[this.data]) !== null && _a !== void 0 ? _a : target[this.data] = this.dataBinding.createObserver(this, this);
        observer.target = target;
        observer.controller = controller;
        this.updateTarget(target, this.targetAspect, observer.bind(controller), controller);
        break;
    }
  }
  /** @internal */


  unbind(controller) {
    const target = controller.targets[this.targetNodeId];
    const view = target.$fastView;

    if (view !== void 0 && view.isComposed) {
      view.unbind();
      view.needsBindOnly = true;
    }
  }
  /** @internal */


  handleEvent(event) {
    const controller = event.currentTarget[this.data];

    if (controller.isBound) {
      ExecutionContext.setEvent(event);
      const result = this.dataBinding.evaluate(controller.source, controller.context);
      ExecutionContext.setEvent(null);

      if (result !== true) {
        event.preventDefault();
      }
    }
  }
  /** @internal */


  handleChange(binding, observer) {
    const target = observer.target;
    const controller = observer.controller;
    this.updateTarget(target, this.targetAspect, observer.bind(controller), controller);
  }

}
HTMLDirective.define(HTMLBindingDirective, {
  aspected: true
});

function removeNodeSequence(firstNode, lastNode) {
  const parent = firstNode.parentNode;
  let current = firstNode;
  let next;

  while (current !== lastNode) {
    next = current.nextSibling;
    parent.removeChild(current);
    current = next;
  }

  parent.removeChild(lastNode);
}
/**
 * The standard View implementation, which also implements ElementView and SyntheticView.
 * @public
 */


class HTMLView {
  /**
   * Constructs an instance of HTMLView.
   * @param fragment - The html fragment that contains the nodes for this view.
   * @param behaviors - The behaviors to be applied to this view.
   */
  constructor(fragment, factories, targets) {
    this.fragment = fragment;
    this.factories = factories;
    this.targets = targets;
    this.behaviors = null;
    this.unbindables = [];
    /**
     * The data that the view is bound to.
     */

    this.source = null;
    /**
     * Indicates whether the controller is bound.
     */

    this.isBound = false;
    /**
     * Indicates how the source's lifetime relates to the controller's lifetime.
     */

    this.sourceLifetime = SourceLifetime.unknown;
    /**
     * The execution context the view is running within.
     */

    this.context = this;
    /**
     * The index of the current item within a repeat context.
     */

    this.index = 0;
    /**
     * The length of the current collection within a repeat context.
     */

    this.length = 0;
    this.firstChild = fragment.firstChild;
    this.lastChild = fragment.lastChild;
  }
  /**
   * The current event within an event handler.
   */


  get event() {
    return ExecutionContext.getEvent();
  }
  /**
   * Indicates whether the current item within a repeat context
   * has an even index.
   */


  get isEven() {
    return this.index % 2 === 0;
  }
  /**
   * Indicates whether the current item within a repeat context
   * has an odd index.
   */


  get isOdd() {
    return this.index % 2 !== 0;
  }
  /**
   * Indicates whether the current item within a repeat context
   * is the first item in the collection.
   */


  get isFirst() {
    return this.index === 0;
  }
  /**
   * Indicates whether the current item within a repeat context
   * is somewhere in the middle of the collection.
   */


  get isInMiddle() {
    return !this.isFirst && !this.isLast;
  }
  /**
   * Indicates whether the current item within a repeat context
   * is the last item in the collection.
   */


  get isLast() {
    return this.index === this.length - 1;
  }
  /**
   * Returns the typed event detail of a custom event.
   */


  eventDetail() {
    return this.event.detail;
  }
  /**
   * Returns the typed event target of the event.
   */


  eventTarget() {
    return this.event.target;
  }
  /**
   * Appends the view's DOM nodes to the referenced node.
   * @param node - The parent node to append the view's DOM nodes to.
   */


  appendTo(node) {
    node.appendChild(this.fragment);
  }
  /**
   * Inserts the view's DOM nodes before the referenced node.
   * @param node - The node to insert the view's DOM before.
   */


  insertBefore(node) {
    if (this.fragment.hasChildNodes()) {
      node.parentNode.insertBefore(this.fragment, node);
    } else {
      const end = this.lastChild;
      if (node.previousSibling === end) return;
      const parentNode = node.parentNode;
      let current = this.firstChild;
      let next;

      while (current !== end) {
        next = current.nextSibling;
        parentNode.insertBefore(current, node);
        current = next;
      }

      parentNode.insertBefore(end, node);
    }
  }
  /**
   * Removes the view's DOM nodes.
   * The nodes are not disposed and the view can later be re-inserted.
   */


  remove() {
    const fragment = this.fragment;
    const end = this.lastChild;
    let current = this.firstChild;
    let next;

    while (current !== end) {
      next = current.nextSibling;
      fragment.appendChild(current);
      current = next;
    }

    fragment.appendChild(end);
  }
  /**
   * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.
   * Once a view has been disposed, it cannot be inserted or bound again.
   */


  dispose() {
    removeNodeSequence(this.firstChild, this.lastChild);
    this.unbind();
  }

  onUnbind(behavior) {
    this.unbindables.push(behavior);
  }
  /**
   * Binds a view's behaviors to its binding source.
   * @param source - The binding source for the view's binding behaviors.
   * @param context - The execution context to run the behaviors within.
   */


  bind(source, context = this) {
    if (this.source === source) {
      return;
    }

    let behaviors = this.behaviors;

    if (behaviors === null) {
      this.source = source;
      this.context = context;
      this.behaviors = behaviors = new Array(this.factories.length);
      const factories = this.factories;

      for (let i = 0, ii = factories.length; i < ii; ++i) {
        const behavior = factories[i].createBehavior();
        behavior.bind(this);
        behaviors[i] = behavior;
      }
    } else {
      if (this.source !== null) {
        this.evaluateUnbindables();
      }

      this.isBound = false;
      this.source = source;
      this.context = context;

      for (let i = 0, ii = behaviors.length; i < ii; ++i) {
        behaviors[i].bind(this);
      }
    }

    this.isBound = true;
  }
  /**
   * Unbinds a view's behaviors from its binding source.
   */


  unbind() {
    if (!this.isBound || this.source === null) {
      return;
    }

    this.evaluateUnbindables();
    this.source = null;
    this.context = this;
    this.isBound = false;
  }

  evaluateUnbindables() {
    const unbindables = this.unbindables;

    for (let i = 0, ii = unbindables.length; i < ii; ++i) {
      unbindables[i].unbind(this);
    }

    unbindables.length = 0;
  }
  /**
   * Efficiently disposes of a contiguous range of synthetic view instances.
   * @param views - A contiguous range of views to be disposed.
   */


  static disposeContiguousBatch(views) {
    if (views.length === 0) {
      return;
    }

    removeNodeSequence(views[0].firstChild, views[views.length - 1].lastChild);

    for (let i = 0, ii = views.length; i < ii; ++i) {
      views[i].unbind();
    }
  }

}
makeSerializationNoop(HTMLView);
Observable.defineProperty(HTMLView.prototype, "index");
Observable.defineProperty(HTMLView.prototype, "length");

const targetIdFrom = (parentId, nodeIndex) => `${parentId}.${nodeIndex}`;

const descriptorCache = {}; // used to prevent creating lots of objects just to track node and index while compiling

const next = {
  index: 0,
  node: null
};

function tryWarn(name) {
  if (!name.startsWith("fast-")) {
    FAST.warn(1204
    /* Message.hostBindingWithoutHost */
    , {
      name
    });
  }
}

const warningHost = new Proxy(document.createElement("div"), {
  get(target, property) {
    tryWarn(property);
    const value = Reflect.get(target, property);
    return isFunction(value) ? value.bind(target) : value;
  },

  set(target, property, value) {
    tryWarn(property);
    return Reflect.set(target, property, value);
  }

});

class CompilationContext {
  constructor(fragment, directives, policy) {
    this.fragment = fragment;
    this.directives = directives;
    this.policy = policy;
    this.proto = null;
    this.nodeIds = new Set();
    this.descriptors = {};
    this.factories = [];
  }

  addFactory(factory, parentId, nodeId, targetIndex, tagName) {
    var _a, _b;

    if (!this.nodeIds.has(nodeId)) {
      this.nodeIds.add(nodeId);
      this.addTargetDescriptor(parentId, nodeId, targetIndex);
    }

    factory.id = (_a = factory.id) !== null && _a !== void 0 ? _a : nextId();
    factory.targetNodeId = nodeId;
    factory.targetTagName = tagName;
    factory.policy = (_b = factory.policy) !== null && _b !== void 0 ? _b : this.policy;
    this.factories.push(factory);
  }

  freeze() {
    this.proto = Object.create(null, this.descriptors);
    return this;
  }

  addTargetDescriptor(parentId, targetId, targetIndex) {
    const descriptors = this.descriptors;

    if (targetId === "r" || // root
    targetId === "h" || // host
    descriptors[targetId]) {
      return;
    }

    if (!descriptors[parentId]) {
      const index = parentId.lastIndexOf(".");
      const grandparentId = parentId.substring(0, index);
      const childIndex = parseInt(parentId.substring(index + 1));
      this.addTargetDescriptor(grandparentId, parentId, childIndex);
    }

    let descriptor = descriptorCache[targetId];

    if (!descriptor) {
      const field = `_${targetId}`;
      descriptorCache[targetId] = descriptor = {
        get() {
          var _a;

          return (_a = this[field]) !== null && _a !== void 0 ? _a : this[field] = this[parentId].childNodes[targetIndex];
        }

      };
    }

    descriptors[targetId] = descriptor;
  }

  createView(hostBindingTarget) {
    const fragment = this.fragment.cloneNode(true);
    const targets = Object.create(this.proto);
    targets.r = fragment;
    targets.h = hostBindingTarget !== null && hostBindingTarget !== void 0 ? hostBindingTarget : warningHost;

    for (const id of this.nodeIds) {
      targets[id]; // trigger locator
    }

    return new HTMLView(fragment, this.factories, targets);
  }

}

function compileAttributes(context, parentId, node, nodeId, nodeIndex, includeBasicValues = false) {
  const attributes = node.attributes;
  const directives = context.directives;

  for (let i = 0, ii = attributes.length; i < ii; ++i) {
    const attr = attributes[i];
    const attrValue = attr.value;
    const parseResult = Parser.parse(attrValue, directives);
    let result = null;

    if (parseResult === null) {
      if (includeBasicValues) {
        result = new HTMLBindingDirective(oneTime(() => attrValue, context.policy));
        HTMLDirective.assignAspect(result, attr.name);
      }
    } else {
      /* eslint-disable-next-line @typescript-eslint/no-use-before-define */
      result = Compiler.aggregate(parseResult, context.policy);
    }

    if (result !== null) {
      node.removeAttributeNode(attr);
      i--;
      ii--;
      context.addFactory(result, parentId, nodeId, nodeIndex, node.tagName);
    }
  }
}

function compileContent(context, node, parentId, nodeId, nodeIndex) {
  const parseResult = Parser.parse(node.textContent, context.directives);

  if (parseResult === null) {
    next.node = node.nextSibling;
    next.index = nodeIndex + 1;
    return next;
  }

  let currentNode;
  let lastNode = currentNode = node;

  for (let i = 0, ii = parseResult.length; i < ii; ++i) {
    const currentPart = parseResult[i];

    if (i !== 0) {
      nodeIndex++;
      nodeId = targetIdFrom(parentId, nodeIndex);
      currentNode = lastNode.parentNode.insertBefore(document.createTextNode(""), lastNode.nextSibling);
    }

    if (isString(currentPart)) {
      currentNode.textContent = currentPart;
    } else {
      currentNode.textContent = " ";
      HTMLDirective.assignAspect(currentPart);
      context.addFactory(currentPart, parentId, nodeId, nodeIndex, null);
    }

    lastNode = currentNode;
  }

  next.index = nodeIndex + 1;
  next.node = lastNode.nextSibling;
  return next;
}

function compileChildren(context, parent, parentId) {
  let nodeIndex = 0;
  let childNode = parent.firstChild;

  while (childNode) {
    /* eslint-disable-next-line @typescript-eslint/no-use-before-define */
    const result = compileNode(context, parentId, childNode, nodeIndex);
    childNode = result.node;
    nodeIndex = result.index;
  }
}

function compileNode(context, parentId, node, nodeIndex) {
  const nodeId = targetIdFrom(parentId, nodeIndex);

  switch (node.nodeType) {
    case 1:
      // element node
      compileAttributes(context, parentId, node, nodeId, nodeIndex);
      compileChildren(context, node, nodeId);
      break;

    case 3:
      // text node
      return compileContent(context, node, parentId, nodeId, nodeIndex);

    case 8:
      // comment
      const parts = Parser.parse(node.data, context.directives);

      if (parts !== null) {
        context.addFactory(
        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */
        Compiler.aggregate(parts), parentId, nodeId, nodeIndex, null);
      }

      break;
  }

  next.index = nodeIndex + 1;
  next.node = node.nextSibling;
  return next;
}

function isMarker(node, directives) {
  return node && node.nodeType == 8 && Parser.parse(node.data, directives) !== null;
}

const templateTag = "TEMPLATE";
/**
 * Common APIs related to compilation.
 * @public
 */

const Compiler = {
  /**
   * Compiles a template and associated directives into a compilation
   * result which can be used to create views.
   * @param html - The html string or template element to compile.
   * @param factories - The behavior factories referenced by the template.
   * @param policy - The security policy to compile the html with.
   * @remarks
   * The template that is provided for compilation is altered in-place
   * and cannot be compiled again. If the original template must be preserved,
   * it is recommended that you clone the original and pass the clone to this API.
   * @public
   */
  compile(html, factories, policy = DOM.policy) {
    let template;

    if (isString(html)) {
      template = document.createElement(templateTag);
      template.innerHTML = policy.createHTML(html);
      const fec = template.content.firstElementChild;

      if (fec !== null && fec.tagName === templateTag) {
        template = fec;
      }
    } else {
      template = html;
    } // https://bugs.chromium.org/p/chromium/issues/detail?id=1111864


    const fragment = document.adoptNode(template.content);
    const context = new CompilationContext(fragment, factories, policy);
    compileAttributes(context, "", template,
    /* host */
    "h", 0, true);

    if ( // If the first node in a fragment is a marker, that means it's an unstable first node,
    // because something like a when, repeat, etc. could add nodes before the marker.
    // To mitigate this, we insert a stable first node. However, if we insert a node,
    // that will alter the result of the TreeWalker. So, we also need to offset the target index.
    isMarker(fragment.firstChild, factories) || // Or if there is only one node and a directive, it means the template's content
    // is *only* the directive. In that case, HTMLView.dispose() misses any nodes inserted by
    // the directive. Inserting a new node ensures proper disposal of nodes added by the directive.
    fragment.childNodes.length === 1 && Object.keys(factories).length > 0) {
      fragment.insertBefore(document.createComment(""), fragment.firstChild);
    }

    compileChildren(context, fragment,
    /* root */
    "r");
    next.node = null; // prevent leaks

    return context.freeze();
  },

  /**
   * Sets the default compilation strategy that will be used by the ViewTemplate whenever
   * it needs to compile a view preprocessed with the html template function.
   * @param strategy - The compilation strategy to use when compiling templates.
   */
  setDefaultStrategy(strategy) {
    this.compile = strategy;
  },

  /**
   * Aggregates an array of strings and directives into a single directive.
   * @param parts - A heterogeneous array of static strings interspersed with
   * directives.
   * @param policy - The security policy to use with the aggregated bindings.
   * @returns A single inline directive that aggregates the behavior of all the parts.
   */
  aggregate(parts, policy = DOM.policy) {
    if (parts.length === 1) {
      return parts[0];
    }

    let sourceAspect;
    let binding;
    let isVolatile = false;
    let bindingPolicy = void 0;
    const partCount = parts.length;
    const finalParts = parts.map(x => {
      if (isString(x)) {
        return () => x;
      }

      sourceAspect = x.sourceAspect || sourceAspect;
      binding = x.dataBinding || binding;
      isVolatile = isVolatile || x.dataBinding.isVolatile;
      bindingPolicy = bindingPolicy || x.dataBinding.policy;
      return x.dataBinding.evaluate;
    });

    const expression = (scope, context) => {
      let output = "";

      for (let i = 0; i < partCount; ++i) {
        output += finalParts[i](scope, context);
      }

      return output;
    };

    binding.evaluate = expression;
    binding.isVolatile = isVolatile;
    binding.policy = bindingPolicy !== null && bindingPolicy !== void 0 ? bindingPolicy : policy;
    const directive = new HTMLBindingDirective(binding);
    HTMLDirective.assignAspect(directive, sourceAspect);
    return directive;
  }

};

const lastAttributeNameRegex =
/* eslint-disable-next-line no-control-regex */
/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
const noFactories = Object.create(null);
/**
 * Inlines a template into another template.
 * @public
 */

class InlineTemplateDirective {
  /**
   * Creates an instance of InlineTemplateDirective.
   * @param template - The template to inline.
   */
  constructor(html, factories = noFactories) {
    this.html = html;
    this.factories = factories;
  }
  /**
   * Creates HTML to be used within a template.
   * @param add - Can be used to add  behavior factories to a template.
   */


  createHTML(add) {
    const factories = this.factories;

    for (const key in factories) {
      add(factories[key]);
    }

    return this.html;
  }

}
/**
 * An empty template partial.
 */

InlineTemplateDirective.empty = new InlineTemplateDirective("");
HTMLDirective.define(InlineTemplateDirective);

function createHTML(value, prevString, add, definition = HTMLDirective.getForInstance(value)) {
  if (definition.aspected) {
    const match = lastAttributeNameRegex.exec(prevString);

    if (match !== null) {
      HTMLDirective.assignAspect(value, match[2]);
    }
  }

  return value.createHTML(add);
}
/**
 * A template capable of creating HTMLView instances or rendering directly to DOM.
 * @public
 */


class ViewTemplate {
  /**
   * Creates an instance of ViewTemplate.
   * @param html - The html representing what this template will instantiate, including placeholders for directives.
   * @param factories - The directives that will be connected to placeholders in the html.
   * @param policy - The security policy to use when compiling this template.
   */
  constructor(html, factories = {}, policy) {
    this.policy = policy;
    this.result = null;
    this.html = html;
    this.factories = factories;
  }
  /**
   * Creates an HTMLView instance based on this template definition.
   * @param hostBindingTarget - The element that host behaviors will be bound to.
   */


  create(hostBindingTarget) {
    if (this.result === null) {
      this.result = Compiler.compile(this.html, this.factories, this.policy);
    }

    return this.result.createView(hostBindingTarget);
  }
  /**
   * Returns a directive that can inline the template.
   */


  inline() {
    return new InlineTemplateDirective(isString(this.html) ? this.html : this.html.innerHTML, this.factories);
  }
  /**
   * Sets the DOMPolicy for this template.
   * @param policy - The policy to associated with this template.
   * @returns The modified template instance.
   * @remarks
   * The DOMPolicy can only be set once for a template and cannot be
   * set after the template is compiled.
   */


  withPolicy(policy) {
    if (this.result) {
      throw FAST.error(1208
      /* Message.cannotSetTemplatePolicyAfterCompilation */
      );
    }

    if (this.policy) {
      throw FAST.error(1207
      /* Message.onlySetTemplatePolicyOnce */
      );
    }

    this.policy = policy;
    return this;
  }
  /**
   * Creates an HTMLView from this template, binds it to the source, and then appends it to the host.
   * @param source - The data source to bind the template to.
   * @param host - The Element where the template will be rendered.
   * @param hostBindingTarget - An HTML element to target the host bindings at if different from the
   * host that the template is being attached to.
   */


  render(source, host, hostBindingTarget) {
    const view = this.create(hostBindingTarget);
    view.bind(source);
    view.appendTo(host);
    return view;
  }
  /**
   * Creates a template based on a set of static strings and dynamic values.
   * @param strings - The static strings to create the template with.
   * @param values - The dynamic values to create the template with.
   * @param policy - The DOMPolicy to associated with the template.
   * @returns A ViewTemplate.
   * @remarks
   * This API should not be used directly under normal circumstances because constructing
   * a template in this way, if not done properly, can open up the application to XSS
   * attacks. When using this API, provide a strong DOMPolicy that can properly sanitize
   * and also be sure to manually sanitize all static strings particularly if they can
   * come from user input.
   */


  static create(strings, values, policy) {
    let html = "";
    const factories = Object.create(null);

    const add = factory => {
      var _a;

      const id = (_a = factory.id) !== null && _a !== void 0 ? _a : factory.id = nextId();
      factories[id] = factory;
      return id;
    };

    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {
      const currentString = strings[i];
      let currentValue = values[i];
      let definition;
      html += currentString;

      if (isFunction(currentValue)) {
        currentValue = new HTMLBindingDirective(oneWay(currentValue));
      } else if (currentValue instanceof Binding) {
        currentValue = new HTMLBindingDirective(currentValue);
      } else if (!(definition = HTMLDirective.getForInstance(currentValue))) {
        const staticValue = currentValue;
        currentValue = new HTMLBindingDirective(oneTime(() => staticValue));
      }

      html += createHTML(currentValue, currentString, add, definition);
    }

    return new ViewTemplate(html + strings[strings.length - 1], factories, policy);
  }

}
makeSerializationNoop(ViewTemplate);
/**
 * Transforms a template literal string into a ViewTemplate.
 * @param strings - The string fragments that are interpolated with the values.
 * @param values - The values that are interpolated with the string fragments.
 * @remarks
 * The html helper supports interpolation of strings, numbers, binding expressions,
 * other template instances, and Directive instances.
 * @public
 */

const html = (strings, ...values) => {
  if (Array.isArray(strings) && Array.isArray(strings.raw)) {
    return ViewTemplate.create(strings, values);
  }

  throw FAST.error(1206
  /* Message.directCallToHTMLTagNotAllowed */
  );
};

html.partial = html => {
  return new InlineTemplateDirective(html);
};

/**
 * The runtime behavior for template references.
 * @public
 */

class RefDirective extends StatelessAttachedAttributeDirective {
  /**
   * Bind this behavior.
   * @param controller - The view controller that manages the lifecycle of this behavior.
   */
  bind(controller) {
    controller.source[this.options] = controller.targets[this.targetNodeId];
  }

}
HTMLDirective.define(RefDirective);
/**
 * A directive that observes the updates a property with a reference to the element.
 * @param propertyName - The name of the property to assign the reference to.
 * @public
 */

const ref = propertyName => new RefDirective(propertyName);

/**
 * A directive that enables basic conditional rendering in a template.
 * @param condition - The condition to test for rendering.
 * @param templateOrTemplateBinding - The template or a binding that gets
 * the template to render when the condition is true.
 * @public
 */

function when(condition, templateOrTemplateBinding) {
  const dataBinding = isFunction(condition) ? condition : () => condition;
  const templateBinding = isFunction(templateOrTemplateBinding) ? templateOrTemplateBinding : () => templateOrTemplateBinding;
  return (source, context) => dataBinding(source, context) ? templateBinding(source, context) : null;
}

const defaultRepeatOptions = Object.freeze({
  positioning: false,
  recycle: true
});

function bindWithoutPositioning(view, items, index, controller) {
  view.context.parent = controller.source;
  view.context.parentContext = controller.context;
  view.bind(items[index]);
}

function bindWithPositioning(view, items, index, controller) {
  view.context.parent = controller.source;
  view.context.parentContext = controller.context;
  view.context.length = items.length;
  view.context.index = index;
  view.bind(items[index]);
}
/**
 * A behavior that renders a template for each item in an array.
 * @public
 */


class RepeatBehavior {
  /**
   * Creates an instance of RepeatBehavior.
   * @param location - The location in the DOM to render the repeat.
   * @param dataBinding - The array to render.
   * @param isItemsBindingVolatile - Indicates whether the items binding has volatile dependencies.
   * @param templateBinding - The template to render for each item.
   * @param isTemplateBindingVolatile - Indicates whether the template binding has volatile dependencies.
   * @param options - Options used to turn on special repeat features.
   */
  constructor(directive) {
    this.directive = directive;
    this.items = null;
    this.itemsObserver = null;
    this.bindView = bindWithoutPositioning;
    /** @internal */

    this.views = [];
    this.itemsBindingObserver = directive.dataBinding.createObserver(this, directive);
    this.templateBindingObserver = directive.templateBinding.createObserver(this, directive);

    if (directive.options.positioning) {
      this.bindView = bindWithPositioning;
    }
  }
  /**
   * Bind this behavior.
   * @param controller - The view controller that manages the lifecycle of this behavior.
   */


  bind(controller) {
    this.location = controller.targets[this.directive.targetNodeId];
    this.controller = controller;
    this.items = this.itemsBindingObserver.bind(controller);
    this.template = this.templateBindingObserver.bind(controller);
    this.observeItems(true);
    this.refreshAllViews();
    controller.onUnbind(this);
  }
  /**
   * Unbinds this behavior.
   */


  unbind() {
    if (this.itemsObserver !== null) {
      this.itemsObserver.unsubscribe(this);
    }

    this.unbindAllViews();
  }
  /**
   * Handles changes in the array, its items, and the repeat template.
   * @param source - The source of the change.
   * @param args - The details about what was changed.
   */


  handleChange(source, args) {
    if (args === this.itemsBindingObserver) {
      this.items = this.itemsBindingObserver.bind(this.controller);
      this.observeItems();
      this.refreshAllViews();
    } else if (args === this.templateBindingObserver) {
      this.template = this.templateBindingObserver.bind(this.controller);
      this.refreshAllViews(true);
    } else if (!args[0]) {
      return;
    } else if (args[0].reset) {
      this.refreshAllViews();
    } else {
      this.updateViews(args);
    }
  }

  observeItems(force = false) {
    if (!this.items) {
      this.items = emptyArray;
      return;
    }

    const oldObserver = this.itemsObserver;
    const newObserver = this.itemsObserver = Observable.getNotifier(this.items);
    const hasNewObserver = oldObserver !== newObserver;

    if (hasNewObserver && oldObserver !== null) {
      oldObserver.unsubscribe(this);
    }

    if (hasNewObserver || force) {
      newObserver.subscribe(this);
    }
  }

  updateViews(splices) {
    const views = this.views;
    const bindView = this.bindView;
    const items = this.items;
    const template = this.template;
    const controller = this.controller;
    const recycle = this.directive.options.recycle;
    const leftoverViews = [];
    let leftoverIndex = 0;
    let availableViews = 0;

    for (let i = 0, ii = splices.length; i < ii; ++i) {
      const splice = splices[i];
      const removed = splice.removed;
      let removeIndex = 0;
      let addIndex = splice.index;
      const end = addIndex + splice.addedCount;
      const removedViews = views.splice(splice.index, removed.length);
      const totalAvailableViews = availableViews = leftoverViews.length + removedViews.length;

      for (; addIndex < end; ++addIndex) {
        const neighbor = views[addIndex];
        const location = neighbor ? neighbor.firstChild : this.location;
        let view;

        if (recycle && availableViews > 0) {
          if (removeIndex <= totalAvailableViews && removedViews.length > 0) {
            view = removedViews[removeIndex];
            removeIndex++;
          } else {
            view = leftoverViews[leftoverIndex];
            leftoverIndex++;
          }

          availableViews--;
        } else {
          view = template.create();
        }

        views.splice(addIndex, 0, view);
        bindView(view, items, addIndex, controller);
        view.insertBefore(location);
      }

      if (removedViews[removeIndex]) {
        leftoverViews.push(...removedViews.slice(removeIndex));
      }
    }

    for (let i = leftoverIndex, ii = leftoverViews.length; i < ii; ++i) {
      leftoverViews[i].dispose();
    }

    if (this.directive.options.positioning) {
      for (let i = 0, viewsLength = views.length; i < viewsLength; ++i) {
        const context = views[i].context;
        context.length = viewsLength;
        context.index = i;
      }
    }
  }

  refreshAllViews(templateChanged = false) {
    const items = this.items;
    const template = this.template;
    const location = this.location;
    const bindView = this.bindView;
    const controller = this.controller;
    let itemsLength = items.length;
    let views = this.views;
    let viewsLength = views.length;

    if (itemsLength === 0 || templateChanged || !this.directive.options.recycle) {
      // all views need to be removed
      HTMLView.disposeContiguousBatch(views);
      viewsLength = 0;
    }

    if (viewsLength === 0) {
      // all views need to be created
      this.views = views = new Array(itemsLength);

      for (let i = 0; i < itemsLength; ++i) {
        const view = template.create();
        bindView(view, items, i, controller);
        views[i] = view;
        view.insertBefore(location);
      }
    } else {
      // attempt to reuse existing views with new data
      let i = 0;

      for (; i < itemsLength; ++i) {
        if (i < viewsLength) {
          const view = views[i];
          bindView(view, items, i, controller);
        } else {
          const view = template.create();
          bindView(view, items, i, controller);
          views.push(view);
          view.insertBefore(location);
        }
      }

      const removed = views.splice(i, viewsLength - i);

      for (i = 0, itemsLength = removed.length; i < itemsLength; ++i) {
        removed[i].dispose();
      }
    }
  }

  unbindAllViews() {
    const views = this.views;

    for (let i = 0, ii = views.length; i < ii; ++i) {
      views[i].unbind();
    }
  }

}
/**
 * A directive that configures list rendering.
 * @public
 */

class RepeatDirective {
  /**
   * Creates an instance of RepeatDirective.
   * @param dataBinding - The binding that provides the array to render.
   * @param templateBinding - The template binding used to obtain a template to render for each item in the array.
   * @param options - Options used to turn on special repeat features.
   */
  constructor(dataBinding, templateBinding, options) {
    this.dataBinding = dataBinding;
    this.templateBinding = templateBinding;
    this.options = options;
    ArrayObserver.enable();
  }
  /**
   * Creates a placeholder string based on the directive's index within the template.
   * @param index - The index of the directive within the template.
   */


  createHTML(add) {
    return Markup.comment(add(this));
  }
  /**
   * Creates a behavior for the provided target node.
   * @param target - The node instance to create the behavior for.
   */


  createBehavior() {
    return new RepeatBehavior(this);
  }

}
HTMLDirective.define(RepeatDirective);
/**
 * A directive that enables list rendering.
 * @param items - The array to render.
 * @param template - The template or a template binding used obtain a template
 * to render for each item in the array.
 * @param options - Options used to turn on special repeat features.
 * @public
 */

function repeat(items, template, options = defaultRepeatOptions) {
  const dataBinding = normalizeBinding(items);
  const templateBinding = normalizeBinding(template);
  return new RepeatDirective(dataBinding, templateBinding, Object.assign(Object.assign({}, defaultRepeatOptions), options));
}

const selectElements = value => value.nodeType === 1;
/**
 * Creates a function that can be used to filter a Node array, selecting only elements.
 * @param selector - An optional selector to restrict the filter to.
 * @public
 */


const elements = selector => selector ? value => value.nodeType === 1 && value.matches(selector) : selectElements;
/**
 * A base class for node observation.
 * @public
 * @remarks
 * Internally used by the SlottedDirective and the ChildrenDirective.
 */

class NodeObservationDirective extends StatelessAttachedAttributeDirective {
  /**
   * The unique id of the factory.
   */
  get id() {
    return this._id;
  }

  set id(value) {
    this._id = value;
    this._controllerProperty = `${value}-c`;
  }
  /**
   * Bind this behavior to the source.
   * @param source - The source to bind to.
   * @param context - The execution context that the binding is operating within.
   * @param targets - The targets that behaviors in a view can attach to.
   */


  bind(controller) {
    const target = controller.targets[this.targetNodeId];
    target[this._controllerProperty] = controller;
    this.updateTarget(controller.source, this.computeNodes(target));
    this.observe(target);
    controller.onUnbind(this);
  }
  /**
   * Unbinds this behavior from the source.
   * @param source - The source to unbind from.
   * @param context - The execution context that the binding is operating within.
   * @param targets - The targets that behaviors in a view can attach to.
   */


  unbind(controller) {
    const target = controller.targets[this.targetNodeId];
    this.updateTarget(controller.source, emptyArray);
    this.disconnect(target);
    target[this._controllerProperty] = null;
  }
  /**
   * Gets the data source for the target.
   * @param target - The target to get the source for.
   * @returns The source.
   */


  getSource(target) {
    return target[this._controllerProperty].source;
  }
  /**
   * Updates the source property with the computed nodes.
   * @param source - The source object to assign the nodes property to.
   * @param value - The nodes to assign to the source object property.
   */


  updateTarget(source, value) {
    source[this.options.property] = value;
  }
  /**
   * Computes the set of nodes that should be assigned to the source property.
   * @param target - The target to compute the nodes for.
   * @returns The computed nodes.
   * @remarks
   * Applies filters if provided.
   */


  computeNodes(target) {
    let nodes = this.getNodes(target);

    if ("filter" in this.options) {
      nodes = nodes.filter(this.options.filter);
    }

    return nodes;
  }

}

const slotEvent = "slotchange";
/**
 * The runtime behavior for slotted node observation.
 * @public
 */

class SlottedDirective extends NodeObservationDirective {
  /**
   * Begins observation of the nodes.
   * @param target - The target to observe.
   */
  observe(target) {
    target.addEventListener(slotEvent, this);
  }
  /**
   * Disconnects observation of the nodes.
   * @param target - The target to unobserve.
   */


  disconnect(target) {
    target.removeEventListener(slotEvent, this);
  }
  /**
   * Retrieves the raw nodes that should be assigned to the source property.
   * @param target - The target to get the node to.
   */


  getNodes(target) {
    return target.assignedNodes(this.options);
  }
  /** @internal */


  handleEvent(event) {
    const target = event.currentTarget;
    this.updateTarget(this.getSource(target), this.computeNodes(target));
  }

}
HTMLDirective.define(SlottedDirective);
/**
 * A directive that observes the `assignedNodes()` of a slot and updates a property
 * whenever they change.
 * @param propertyOrOptions - The options used to configure slotted node observation.
 * @public
 */

function slotted(propertyOrOptions) {
  if (isString(propertyOrOptions)) {
    propertyOrOptions = {
      property: propertyOrOptions
    };
  }

  return new SlottedDirective(propertyOrOptions);
}

/**
 * The runtime behavior for child node observation.
 * @public
 */

class ChildrenDirective extends NodeObservationDirective {
  /**
   * Creates an instance of ChildrenDirective.
   * @param options - The options to use in configuring the child observation behavior.
   */
  constructor(options) {
    super(options);
    this.observerProperty = `${this.id}-o`;

    this.handleEvent = (mutations, observer) => {
      const target = observer.target;
      this.updateTarget(this.getSource(target), this.computeNodes(target));
    };

    options.childList = true;
  }
  /**
   * Begins observation of the nodes.
   * @param target - The target to observe.
   */


  observe(target) {
    let observer = target[this.observerProperty];

    if (!observer) {
      observer = new MutationObserver(this.handleEvent);
      observer.toJSON = noop;
      observer.target = target;
      target[this.observerProperty] = observer;
    }

    observer.observe(target, this.options);
  }
  /**
   * Disconnects observation of the nodes.
   * @param target - The target to unobserve.
   */


  disconnect(target) {
    const observer = target[this.observerProperty];
    observer.target = null;
    observer.disconnect();
  }
  /**
   * Retrieves the raw nodes that should be assigned to the source property.
   * @param target - The target to get the node to.
   */


  getNodes(target) {
    if ("selector" in this.options) {
      return Array.from(target.querySelectorAll(this.options.selector));
    }

    return Array.from(target.childNodes);
  }

}
HTMLDirective.define(ChildrenDirective);
/**
 * A directive that observes the `childNodes` of an element and updates a property
 * whenever they change.
 * @param propertyOrOptions - The options used to configure child node observation.
 * @public
 */

function children(propertyOrOptions) {
  if (isString(propertyOrOptions)) {
    propertyOrOptions = {
      property: propertyOrOptions
    };
  }

  return new ChildrenDirective(propertyOrOptions);
}

const booleanMode = "boolean";
const reflectMode = "reflect";
/**
 * Metadata used to configure a custom attribute's behavior.
 * @public
 */

const AttributeConfiguration = Object.freeze({
  /**
   * Locates all attribute configurations associated with a type.
   */
  locate: createMetadataLocator()
});
/**
 * A {@link ValueConverter} that converts to and from `boolean` values.
 * @remarks
 * Used automatically when the `boolean` {@link AttributeMode} is selected.
 * @public
 */

const booleanConverter = {
  toView(value) {
    return value ? "true" : "false";
  },

  fromView(value) {
    return value === null || value === void 0 || value === "false" || value === false || value === 0 ? false : true;
  }

};
/**
 * A {@link ValueConverter} that converts to and from `boolean` values. `null`, `undefined`, `""`, and `void` values are converted to `null`.
 * @public
 */

const nullableBooleanConverter = {
  toView(value) {
    return typeof value === "boolean" ? value.toString() : "";
  },

  fromView(value) {
    return [null, undefined, void 0].includes(value) ? null : booleanConverter.fromView(value);
  }

};

function toNumber(value) {
  if (value === null || value === undefined) {
    return null;
  }

  const number = value * 1;
  return isNaN(number) ? null : number;
}
/**
 * A {@link ValueConverter} that converts to and from `number` values.
 * @remarks
 * This converter allows for nullable numbers, returning `null` if the
 * input was `null`, `undefined`, or `NaN`.
 * @public
 */


const nullableNumberConverter = {
  toView(value) {
    const output = toNumber(value);
    return output ? output.toString() : output;
  },

  fromView: toNumber
};
/**
 * An implementation of {@link Accessor} that supports reactivity,
 * change callbacks, attribute reflection, and type conversion for
 * custom elements.
 * @public
 */

class AttributeDefinition {
  /**
   * Creates an instance of AttributeDefinition.
   * @param Owner - The class constructor that owns this attribute.
   * @param name - The name of the property associated with the attribute.
   * @param attribute - The name of the attribute in HTML.
   * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.
   * @param converter - A {@link ValueConverter} that integrates with the property getter/setter
   * to convert values to and from a DOM string.
   */
  constructor(Owner, name, attribute = name.toLowerCase(), mode = reflectMode, converter) {
    this.guards = new Set();
    this.Owner = Owner;
    this.name = name;
    this.attribute = attribute;
    this.mode = mode;
    this.converter = converter;
    this.fieldName = `_${name}`;
    this.callbackName = `${name}Changed`;
    this.hasCallback = this.callbackName in Owner.prototype;

    if (mode === booleanMode && converter === void 0) {
      this.converter = booleanConverter;
    }
  }
  /**
   * Sets the value of the attribute/property on the source element.
   * @param source - The source element to access.
   * @param value - The value to set the attribute/property to.
   */


  setValue(source, newValue) {
    const oldValue = source[this.fieldName];
    const converter = this.converter;

    if (converter !== void 0) {
      newValue = converter.fromView(newValue);
    }

    if (oldValue !== newValue) {
      source[this.fieldName] = newValue;
      this.tryReflectToAttribute(source);

      if (this.hasCallback) {
        source[this.callbackName](oldValue, newValue);
      }

      source.$fastController.notify(this.name);
    }
  }
  /**
   * Gets the value of the attribute/property on the source element.
   * @param source - The source element to access.
   */


  getValue(source) {
    Observable.track(source, this.name);
    return source[this.fieldName];
  }
  /** @internal */


  onAttributeChangedCallback(element, value) {
    if (this.guards.has(element)) {
      return;
    }

    this.guards.add(element);
    this.setValue(element, value);
    this.guards.delete(element);
  }

  tryReflectToAttribute(element) {
    const mode = this.mode;
    const guards = this.guards;

    if (guards.has(element) || mode === "fromView") {
      return;
    }

    Updates.enqueue(() => {
      guards.add(element);
      const latestValue = element[this.fieldName];

      switch (mode) {
        case reflectMode:
          const converter = this.converter;
          DOM.setAttribute(element, this.attribute, converter !== void 0 ? converter.toView(latestValue) : latestValue);
          break;

        case booleanMode:
          DOM.setBooleanAttribute(element, this.attribute, latestValue);
          break;
      }

      guards.delete(element);
    });
  }
  /**
   * Collects all attribute definitions associated with the owner.
   * @param Owner - The class constructor to collect attribute for.
   * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.
   * @internal
   */


  static collect(Owner, ...attributeLists) {
    const attributes = [];
    attributeLists.push(AttributeConfiguration.locate(Owner));

    for (let i = 0, ii = attributeLists.length; i < ii; ++i) {
      const list = attributeLists[i];

      if (list === void 0) {
        continue;
      }

      for (let j = 0, jj = list.length; j < jj; ++j) {
        const config = list[j];

        if (isString(config)) {
          attributes.push(new AttributeDefinition(Owner, config));
        } else {
          attributes.push(new AttributeDefinition(Owner, config.property, config.attribute, config.mode, config.converter));
        }
      }
    }

    return attributes;
  }

}
function attr(configOrTarget, prop) {
  let config;

  function decorator($target, $prop) {
    if (arguments.length > 1) {
      // Non invocation:
      // - @attr
      // Invocation with or w/o opts:
      // - @attr()
      // - @attr({...opts})
      config.property = $prop;
    }

    AttributeConfiguration.locate($target.constructor).push(config);
  }

  if (arguments.length > 1) {
    // Non invocation:
    // - @attr
    config = {};
    decorator(configOrTarget, prop);
    return;
  } // Invocation with or w/o opts:
  // - @attr()
  // - @attr({...opts})


  config = configOrTarget === void 0 ? {} : configOrTarget;
  return decorator;
}

const defaultShadowOptions = {
  mode: "open"
};
const defaultElementOptions = {};
const fastElementBaseTypes = new Set();
const fastElementRegistry = FAST.getById(KernelServiceId.elementRegistry, () => createTypeRegistry());
/**
 * Defines metadata for a FASTElement.
 * @public
 */

class FASTElementDefinition {
  constructor(type, nameOrConfig = type.definition) {
    var _a;

    this.platformDefined = false;

    if (isString(nameOrConfig)) {
      nameOrConfig = {
        name: nameOrConfig
      };
    }

    this.type = type;
    this.name = nameOrConfig.name;
    this.template = nameOrConfig.template;
    this.registry = (_a = nameOrConfig.registry) !== null && _a !== void 0 ? _a : customElements;
    const proto = type.prototype;
    const attributes = AttributeDefinition.collect(type, nameOrConfig.attributes);
    const observedAttributes = new Array(attributes.length);
    const propertyLookup = {};
    const attributeLookup = {};

    for (let i = 0, ii = attributes.length; i < ii; ++i) {
      const current = attributes[i];
      observedAttributes[i] = current.attribute;
      propertyLookup[current.name] = current;
      attributeLookup[current.attribute] = current;
      Observable.defineProperty(proto, current);
    }

    Reflect.defineProperty(type, "observedAttributes", {
      value: observedAttributes,
      enumerable: true
    });
    this.attributes = attributes;
    this.propertyLookup = propertyLookup;
    this.attributeLookup = attributeLookup;
    this.shadowOptions = nameOrConfig.shadowOptions === void 0 ? defaultShadowOptions : nameOrConfig.shadowOptions === null ? void 0 : Object.assign(Object.assign({}, defaultShadowOptions), nameOrConfig.shadowOptions);
    this.elementOptions = nameOrConfig.elementOptions === void 0 ? defaultElementOptions : Object.assign(Object.assign({}, defaultElementOptions), nameOrConfig.elementOptions);
    this.styles = ElementStyles.normalize(nameOrConfig.styles);
    fastElementRegistry.register(this);
  }
  /**
   * Indicates if this element has been defined in at least one registry.
   */


  get isDefined() {
    return this.platformDefined;
  }
  /**
   * Defines a custom element based on this definition.
   * @param registry - The element registry to define the element in.
   * @remarks
   * This operation is idempotent per registry.
   */


  define(registry = this.registry) {
    const type = this.type;

    if (!registry.get(this.name)) {
      this.platformDefined = true;
      registry.define(this.name, type, this.elementOptions);
    }

    return this;
  }
  /**
   * Creates an instance of FASTElementDefinition.
   * @param type - The type this definition is being created for.
   * @param nameOrDef - The name of the element to define or a config object
   * that describes the element to define.
   */


  static compose(type, nameOrDef) {
    if (fastElementBaseTypes.has(type) || fastElementRegistry.getByType(type)) {
      return new FASTElementDefinition(class extends type {}, nameOrDef);
    }

    return new FASTElementDefinition(type, nameOrDef);
  }
  /**
   * Registers a FASTElement base type.
   * @param type - The type to register as a base type.
   * @internal
   */


  static registerBaseType(type) {
    fastElementBaseTypes.add(type);
  }

}
/**
 * Gets the element definition associated with the specified type.
 * @param type - The custom element type to retrieve the definition for.
 */

FASTElementDefinition.getByType = fastElementRegistry.getByType;
/**
 * Gets the element definition associated with the instance.
 * @param instance - The custom element instance to retrieve the definition for.
 */

FASTElementDefinition.getForInstance = fastElementRegistry.getForInstance;

const defaultEventOptions = {
  bubbles: true,
  composed: true,
  cancelable: true
};
const isConnectedPropertyName = "isConnected";
const shadowRoots = new WeakMap();

function getShadowRoot(element) {
  var _a, _b;

  return (_b = (_a = element.shadowRoot) !== null && _a !== void 0 ? _a : shadowRoots.get(element)) !== null && _b !== void 0 ? _b : null;
}

let elementControllerStrategy;
/**
 * Controls the lifecycle and rendering of a `FASTElement`.
 * @public
 */

class ElementController extends PropertyChangeNotifier {
  /**
   * Creates a Controller to control the specified element.
   * @param element - The element to be controlled by this controller.
   * @param definition - The element definition metadata that instructs this
   * controller in how to handle rendering and other platform integrations.
   * @internal
   */
  constructor(element, definition) {
    super(element);
    this.boundObservables = null;
    this.needsInitialization = true;
    this.hasExistingShadowRoot = false;
    this._template = null;
    this.stage = 3
    /* Stages.disconnected */
    ;
    /**
     * A guard against connecting behaviors multiple times
     * during connect in scenarios where a behavior adds
     * another behavior during it's connectedCallback
     */

    this.guardBehaviorConnection = false;
    this.behaviors = null;
    this._mainStyles = null;
    /**
     * This allows Observable.getNotifier(...) to return the Controller
     * when the notifier for the Controller itself is being requested. The
     * result is that the Observable system does not need to create a separate
     * instance of Notifier for observables on the Controller. The component and
     * the controller will now share the same notifier, removing one-object construct
     * per web component instance.
     */

    this.$fastController = this;
    /**
     * The view associated with the custom element.
     * @remarks
     * If `null` then the element is managing its own rendering.
     */

    this.view = null;
    this.source = element;
    this.definition = definition;
    const shadowOptions = definition.shadowOptions;

    if (shadowOptions !== void 0) {
      let shadowRoot = element.shadowRoot;

      if (shadowRoot) {
        this.hasExistingShadowRoot = true;
      } else {
        shadowRoot = element.attachShadow(shadowOptions);

        if (shadowOptions.mode === "closed") {
          shadowRoots.set(element, shadowRoot);
        }
      }
    } // Capture any observable values that were set by the binding engine before
    // the browser upgraded the element. Then delete the property since it will
    // shadow the getter/setter that is required to make the observable operate.
    // Later, in the connect callback, we'll re-apply the values.


    const accessors = Observable.getAccessors(element);

    if (accessors.length > 0) {
      const boundObservables = this.boundObservables = Object.create(null);

      for (let i = 0, ii = accessors.length; i < ii; ++i) {
        const propertyName = accessors[i].name;
        const value = element[propertyName];

        if (value !== void 0) {
          delete element[propertyName];
          boundObservables[propertyName] = value;
        }
      }
    }
  }
  /**
   * Indicates whether or not the custom element has been
   * connected to the document.
   */


  get isConnected() {
    Observable.track(this, isConnectedPropertyName);
    return this.stage === 1
    /* Stages.connected */
    ;
  }
  /**
   * The context the expression is evaluated against.
   */


  get context() {
    var _a, _b;

    return (_b = (_a = this.view) === null || _a === void 0 ? void 0 : _a.context) !== null && _b !== void 0 ? _b : ExecutionContext.default;
  }
  /**
   * Indicates whether the controller is bound.
   */


  get isBound() {
    var _a, _b;

    return (_b = (_a = this.view) === null || _a === void 0 ? void 0 : _a.isBound) !== null && _b !== void 0 ? _b : false;
  }
  /**
   * Indicates how the source's lifetime relates to the controller's lifetime.
   */


  get sourceLifetime() {
    var _a;

    return (_a = this.view) === null || _a === void 0 ? void 0 : _a.sourceLifetime;
  }
  /**
   * Gets/sets the template used to render the component.
   * @remarks
   * This value can only be accurately read after connect but can be set at any time.
   */


  get template() {
    var _a; // 1. Template overrides take top precedence.


    if (this._template === null) {
      const definition = this.definition;

      if (this.source.resolveTemplate) {
        // 2. Allow for element instance overrides next.
        this._template = this.source.resolveTemplate();
      } else if (definition.template) {
        // 3. Default to the static definition.
        this._template = (_a = definition.template) !== null && _a !== void 0 ? _a : null;
      }
    }

    return this._template;
  }

  set template(value) {
    if (this._template === value) {
      return;
    }

    this._template = value;

    if (!this.needsInitialization) {
      this.renderTemplate(value);
    }
  }
  /**
   * The main set of styles used for the component, independent
   * of any dynamically added styles.
   */


  get mainStyles() {
    var _a; // 1. Styles overrides take top precedence.


    if (this._mainStyles === null) {
      const definition = this.definition;

      if (this.source.resolveStyles) {
        // 2. Allow for element instance overrides next.
        this._mainStyles = this.source.resolveStyles();
      } else if (definition.styles) {
        // 3. Default to the static definition.
        this._mainStyles = (_a = definition.styles) !== null && _a !== void 0 ? _a : null;
      }
    }

    return this._mainStyles;
  }

  set mainStyles(value) {
    if (this._mainStyles === value) {
      return;
    }

    if (this._mainStyles !== null) {
      this.removeStyles(this._mainStyles);
    }

    this._mainStyles = value;

    if (!this.needsInitialization) {
      this.addStyles(value);
    }
  }
  /**
   * Registers an unbind handler with the controller.
   * @param behavior - An object to call when the controller unbinds.
   */


  onUnbind(behavior) {
    var _a;

    (_a = this.view) === null || _a === void 0 ? void 0 : _a.onUnbind(behavior);
  }
  /**
   * Adds the behavior to the component.
   * @param behavior - The behavior to add.
   */


  addBehavior(behavior) {
    var _a, _b;

    const targetBehaviors = (_a = this.behaviors) !== null && _a !== void 0 ? _a : this.behaviors = new Map();
    const count = (_b = targetBehaviors.get(behavior)) !== null && _b !== void 0 ? _b : 0;

    if (count === 0) {
      targetBehaviors.set(behavior, 1);
      behavior.addedCallback && behavior.addedCallback(this);

      if (behavior.connectedCallback && !this.guardBehaviorConnection && (this.stage === 1
      /* Stages.connected */
      || this.stage === 0
      /* Stages.connecting */
      )) {
        behavior.connectedCallback(this);
      }
    } else {
      targetBehaviors.set(behavior, count + 1);
    }
  }
  /**
   * Removes the behavior from the component.
   * @param behavior - The behavior to remove.
   * @param force - Forces removal even if this behavior was added more than once.
   */


  removeBehavior(behavior, force = false) {
    const targetBehaviors = this.behaviors;

    if (targetBehaviors === null) {
      return;
    }

    const count = targetBehaviors.get(behavior);

    if (count === void 0) {
      return;
    }

    if (count === 1 || force) {
      targetBehaviors.delete(behavior);

      if (behavior.disconnectedCallback && this.stage !== 3
      /* Stages.disconnected */
      ) {
        behavior.disconnectedCallback(this);
      }

      behavior.removedCallback && behavior.removedCallback(this);
    } else {
      targetBehaviors.set(behavior, count - 1);
    }
  }
  /**
   * Adds styles to this element. Providing an HTMLStyleElement will attach the element instance to the shadowRoot.
   * @param styles - The styles to add.
   */


  addStyles(styles) {
    var _a;

    if (!styles) {
      return;
    }

    const source = this.source;

    if (styles instanceof HTMLElement) {
      const target = (_a = getShadowRoot(source)) !== null && _a !== void 0 ? _a : this.source;
      target.append(styles);
    } else if (!styles.isAttachedTo(source)) {
      const sourceBehaviors = styles.behaviors;
      styles.addStylesTo(source);

      if (sourceBehaviors !== null) {
        for (let i = 0, ii = sourceBehaviors.length; i < ii; ++i) {
          this.addBehavior(sourceBehaviors[i]);
        }
      }
    }
  }
  /**
   * Removes styles from this element. Providing an HTMLStyleElement will detach the element instance from the shadowRoot.
   * @param styles - the styles to remove.
   */


  removeStyles(styles) {
    var _a;

    if (!styles) {
      return;
    }

    const source = this.source;

    if (styles instanceof HTMLElement) {
      const target = (_a = getShadowRoot(source)) !== null && _a !== void 0 ? _a : source;
      target.removeChild(styles);
    } else if (styles.isAttachedTo(source)) {
      const sourceBehaviors = styles.behaviors;
      styles.removeStylesFrom(source);

      if (sourceBehaviors !== null) {
        for (let i = 0, ii = sourceBehaviors.length; i < ii; ++i) {
          this.addBehavior(sourceBehaviors[i]);
        }
      }
    }
  }
  /**
   * Runs connected lifecycle behavior on the associated element.
   */


  connect() {
    if (this.stage !== 3
    /* Stages.disconnected */
    ) {
      return;
    }

    this.stage = 0
    /* Stages.connecting */
    ; // If we have any observables that were bound, re-apply their values.

    if (this.boundObservables !== null) {
      const element = this.source;
      const boundObservables = this.boundObservables;
      const propertyNames = Object.keys(boundObservables);

      for (let i = 0, ii = propertyNames.length; i < ii; ++i) {
        const propertyName = propertyNames[i];
        element[propertyName] = boundObservables[propertyName];
      }

      this.boundObservables = null;
    }

    const behaviors = this.behaviors;

    if (behaviors !== null) {
      this.guardBehaviorConnection = true;

      for (const key of behaviors.keys()) {
        key.connectedCallback && key.connectedCallback(this);
      }

      this.guardBehaviorConnection = false;
    }

    if (this.needsInitialization) {
      this.renderTemplate(this.template);
      this.addStyles(this.mainStyles);
      this.needsInitialization = false;
    } else if (this.view !== null) {
      this.view.bind(this.source);
    }

    this.stage = 1
    /* Stages.connected */
    ;
    Observable.notify(this, isConnectedPropertyName);
  }
  /**
   * Runs disconnected lifecycle behavior on the associated element.
   */


  disconnect() {
    if (this.stage !== 1
    /* Stages.connected */
    ) {
      return;
    }

    this.stage = 2
    /* Stages.disconnecting */
    ;
    Observable.notify(this, isConnectedPropertyName);

    if (this.view !== null) {
      this.view.unbind();
    }

    const behaviors = this.behaviors;

    if (behaviors !== null) {
      for (const key of behaviors.keys()) {
        key.disconnectedCallback && key.disconnectedCallback(this);
      }
    }

    this.stage = 3
    /* Stages.disconnected */
    ;
  }
  /**
   * Runs the attribute changed callback for the associated element.
   * @param name - The name of the attribute that changed.
   * @param oldValue - The previous value of the attribute.
   * @param newValue - The new value of the attribute.
   */


  onAttributeChangedCallback(name, oldValue, newValue) {
    const attrDef = this.definition.attributeLookup[name];

    if (attrDef !== void 0) {
      attrDef.onAttributeChangedCallback(this.source, newValue);
    }
  }
  /**
   * Emits a custom HTML event.
   * @param type - The type name of the event.
   * @param detail - The event detail object to send with the event.
   * @param options - The event options. By default bubbles and composed.
   * @remarks
   * Only emits events if connected.
   */


  emit(type, detail, options) {
    if (this.stage === 1
    /* Stages.connected */
    ) {
      return this.source.dispatchEvent(new CustomEvent(type, Object.assign(Object.assign({
        detail
      }, defaultEventOptions), options)));
    }

    return false;
  }

  renderTemplate(template) {
    var _a; // When getting the host to render to, we start by looking
    // up the shadow root. If there isn't one, then that means
    // we're doing a Light DOM render to the element's direct children.


    const element = this.source;
    const host = (_a = getShadowRoot(element)) !== null && _a !== void 0 ? _a : element;

    if (this.view !== null) {
      // If there's already a view, we need to unbind and remove through dispose.
      this.view.dispose();
      this.view = null;
    } else if (!this.needsInitialization || this.hasExistingShadowRoot) {
      this.hasExistingShadowRoot = false; // If there was previous custom rendering, we need to clear out the host.

      for (let child = host.firstChild; child !== null; child = host.firstChild) {
        host.removeChild(child);
      }
    }

    if (template) {
      // If a new template was provided, render it.
      this.view = template.render(element, host, element);
      this.view.sourceLifetime = SourceLifetime.coupled;
    }
  }
  /**
   * Locates or creates a controller for the specified element.
   * @param element - The element to return the controller for.
   * @remarks
   * The specified element must have a {@link FASTElementDefinition}
   * registered either through the use of the {@link customElement}
   * decorator or a call to `FASTElement.define`.
   */


  static forCustomElement(element) {
    const controller = element.$fastController;

    if (controller !== void 0) {
      return controller;
    }

    const definition = FASTElementDefinition.getForInstance(element);

    if (definition === void 0) {
      throw FAST.error(1401
      /* Message.missingElementDefinition */
      );
    }

    return element.$fastController = new elementControllerStrategy(element, definition);
  }
  /**
   * Sets the strategy that ElementController.forCustomElement uses to construct
   * ElementController instances for an element.
   * @param strategy - The strategy to use.
   */


  static setStrategy(strategy) {
    elementControllerStrategy = strategy;
  }

}
makeSerializationNoop(ElementController); // Set default strategy for ElementController

ElementController.setStrategy(ElementController);
/**
 * Converts a styleTarget into the operative target. When the provided target is an Element
 * that is a FASTElement, the function will return the ShadowRoot for that element. Otherwise,
 * it will return the root node for the element.
 * @param target
 * @returns
 */

function normalizeStyleTarget(target) {
  var _a;

  if ("adoptedStyleSheets" in target) {
    return target;
  } else {
    return (_a = getShadowRoot(target)) !== null && _a !== void 0 ? _a : target.getRootNode();
  }
} // Default StyleStrategy implementations are defined in this module because they
// require access to element shadowRoots, and we don't want to leak shadowRoot
// objects out of this module.

/**
 * https://wicg.github.io/construct-stylesheets/
 * https://developers.google.com/web/updates/2019/02/constructable-stylesheets
 *
 * @internal
 */


class AdoptedStyleSheetsStrategy {
  constructor(styles) {
    const styleSheetCache = AdoptedStyleSheetsStrategy.styleSheetCache;
    this.sheets = styles.map(x => {
      if (x instanceof CSSStyleSheet) {
        return x;
      }

      let sheet = styleSheetCache.get(x);

      if (sheet === void 0) {
        sheet = new CSSStyleSheet();
        sheet.replaceSync(x);
        styleSheetCache.set(x, sheet);
      }

      return sheet;
    });
  }

  addStylesTo(target) {
    const t = normalizeStyleTarget(target);
    t.adoptedStyleSheets = [...t.adoptedStyleSheets, ...this.sheets];
  }

  removeStylesFrom(target) {
    const t = normalizeStyleTarget(target);
    const sheets = this.sheets;
    t.adoptedStyleSheets = t.adoptedStyleSheets.filter(x => sheets.indexOf(x) === -1);
  }

}
AdoptedStyleSheetsStrategy.styleSheetCache = new Map();
let id = 0;

const nextStyleId = () => `fast-${++id}`;

function usableStyleTarget(target) {
  return target === document ? document.body : target;
}
/**
 * @internal
 */


class StyleElementStrategy {
  constructor(styles) {
    this.styles = styles;
    this.styleClass = nextStyleId();
  }

  addStylesTo(target) {
    target = usableStyleTarget(normalizeStyleTarget(target));
    const styles = this.styles;
    const styleClass = this.styleClass;

    for (let i = 0; i < styles.length; i++) {
      const element = document.createElement("style");
      element.innerHTML = styles[i];
      element.className = styleClass;
      target.append(element);
    }
  }

  removeStylesFrom(target) {
    target = usableStyleTarget(normalizeStyleTarget(target));
    const styles = target.querySelectorAll(`.${this.styleClass}`);

    for (let i = 0, ii = styles.length; i < ii; ++i) {
      target.removeChild(styles[i]);
    }
  }

}
ElementStyles.setDefaultStrategy(ElementStyles.supportsAdoptedStyleSheets ? AdoptedStyleSheetsStrategy : StyleElementStrategy);

/* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */

function createFASTElement(BaseType) {
  const type = class extends BaseType {
    constructor() {
      /* eslint-disable-next-line */
      super();
      ElementController.forCustomElement(this);
    }

    $emit(type, detail, options) {
      return this.$fastController.emit(type, detail, options);
    }

    connectedCallback() {
      this.$fastController.connect();
    }

    disconnectedCallback() {
      this.$fastController.disconnect();
    }

    attributeChangedCallback(name, oldValue, newValue) {
      this.$fastController.onAttributeChangedCallback(name, oldValue, newValue);
    }

  };
  FASTElementDefinition.registerBaseType(type);
  return type;
}

function compose(type, nameOrDef) {
  if (isFunction(type)) {
    return FASTElementDefinition.compose(type, nameOrDef);
  }

  return FASTElementDefinition.compose(this, type);
}

function define(type, nameOrDef) {
  if (isFunction(type)) {
    return FASTElementDefinition.compose(type, nameOrDef).define().type;
  }

  return FASTElementDefinition.compose(this, type).define().type;
}

function from(BaseType) {
  return createFASTElement(BaseType);
}
/**
 * A minimal base class for FASTElements that also provides
 * static helpers for working with FASTElements.
 * @public
 */


const FASTElement = Object.assign(createFASTElement(HTMLElement), {
  /**
   * Creates a new FASTElement base class inherited from the
   * provided base type.
   * @param BaseType - The base element type to inherit from.
   */
  from,

  /**
   * Defines a platform custom element based on the provided type and definition.
   * @param type - The custom element type to define.
   * @param nameOrDef - The name of the element to define or a definition object
   * that describes the element to define.
   */
  define,

  /**
   * Defines metadata for a FASTElement which can be used to later define the element.
   * @public
   */
  compose
});
/**
 * Decorator: Defines a platform custom element based on `FASTElement`.
 * @param nameOrDef - The name of the element to define or a definition object
 * that describes the element to define.
 * @public
 */

function customElement(nameOrDef) {
  /* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */
  return function (type) {
    define(type, nameOrDef);
  };
}

function safeURL(tagName, aspect, aspectName, sink) {
  return (target, name, value, ...rest) => {
    if (isString(value)) {
      value = value.replace("javascript:", "");
    }

    sink(target, name, value, ...rest);
  };
}

function block(tagName, aspect, aspectName, sink) {
  throw FAST.error(1209
  /* Message.blockedByDOMPolicy */
  , {
    aspectName,
    tagName: tagName !== null && tagName !== void 0 ? tagName : "text"
  });
}

const defaultDOMElementGuards = {
  a: {
    [DOMAspect.attribute]: {
      href: safeURL
    },
    [DOMAspect.property]: {
      href: safeURL
    }
  },
  area: {
    [DOMAspect.attribute]: {
      href: safeURL
    },
    [DOMAspect.property]: {
      href: safeURL
    }
  },
  button: {
    [DOMAspect.attribute]: {
      formaction: safeURL
    },
    [DOMAspect.property]: {
      formAction: safeURL
    }
  },
  embed: {
    [DOMAspect.attribute]: {
      src: block
    },
    [DOMAspect.property]: {
      src: block
    }
  },
  form: {
    [DOMAspect.attribute]: {
      action: safeURL
    },
    [DOMAspect.property]: {
      action: safeURL
    }
  },
  frame: {
    [DOMAspect.attribute]: {
      src: safeURL
    },
    [DOMAspect.property]: {
      src: safeURL
    }
  },
  iframe: {
    [DOMAspect.attribute]: {
      src: safeURL
    },
    [DOMAspect.property]: {
      src: safeURL,
      srcdoc: block
    }
  },
  input: {
    [DOMAspect.attribute]: {
      formaction: safeURL
    },
    [DOMAspect.property]: {
      formAction: safeURL
    }
  },
  link: {
    [DOMAspect.attribute]: {
      href: block
    },
    [DOMAspect.property]: {
      href: block
    }
  },
  object: {
    [DOMAspect.attribute]: {
      codebase: block,
      data: block
    },
    [DOMAspect.property]: {
      codeBase: block,
      data: block
    }
  },
  script: {
    [DOMAspect.attribute]: {
      src: block,
      text: block
    },
    [DOMAspect.property]: {
      src: block,
      text: block,
      innerText: block,
      textContent: block
    }
  },
  style: {
    [DOMAspect.property]: {
      innerText: block,
      textContent: block
    }
  }
};
const blockedEvents = {
  onabort: block,
  onauxclick: block,
  onbeforeinput: block,
  onbeforematch: block,
  onblur: block,
  oncancel: block,
  oncanplay: block,
  oncanplaythrough: block,
  onchange: block,
  onclick: block,
  onclose: block,
  oncontextlost: block,
  oncontextmenu: block,
  oncontextrestored: block,
  oncopy: block,
  oncuechange: block,
  oncut: block,
  ondblclick: block,
  ondrag: block,
  ondragend: block,
  ondragenter: block,
  ondragleave: block,
  ondragover: block,
  ondragstart: block,
  ondrop: block,
  ondurationchange: block,
  onemptied: block,
  onended: block,
  onerror: block,
  onfocus: block,
  onformdata: block,
  oninput: block,
  oninvalid: block,
  onkeydown: block,
  onkeypress: block,
  onkeyup: block,
  onload: block,
  onloadeddata: block,
  onloadedmetadata: block,
  onloadstart: block,
  onmousedown: block,
  onmouseenter: block,
  onmouseleave: block,
  onmousemove: block,
  onmouseout: block,
  onmouseover: block,
  onmouseup: block,
  onpaste: block,
  onpause: block,
  onplay: block,
  onplaying: block,
  onprogress: block,
  onratechange: block,
  onreset: block,
  onresize: block,
  onscroll: block,
  onsecuritypolicyviolation: block,
  onseeked: block,
  onseeking: block,
  onselect: block,
  onslotchange: block,
  onstalled: block,
  onsubmit: block,
  onsuspend: block,
  ontimeupdate: block,
  ontoggle: block,
  onvolumechange: block,
  onwaiting: block,
  onwebkitanimationend: block,
  onwebkitanimationiteration: block,
  onwebkitanimationstart: block,
  onwebkittransitionend: block,
  onwheel: block
};
const defaultDOMGuards = {
  elements: defaultDOMElementGuards,
  aspects: {
    [DOMAspect.attribute]: Object.assign({}, blockedEvents),
    [DOMAspect.property]: Object.assign({
      innerHTML: block
    }, blockedEvents),
    [DOMAspect.event]: Object.assign({}, blockedEvents)
  }
};

function createDomSinkGuards(config, defaults) {
  const result = {};

  for (const name in defaults) {
    const overrideValue = config[name];
    const defaultValue = defaults[name];

    switch (overrideValue) {
      case null:
        // remove the default
        break;

      case undefined:
        // keep the default
        result[name] = defaultValue;
        break;

      default:
        // override the default
        result[name] = overrideValue;
        break;
    }
  } // add any new sinks that were not overrides


  for (const name in config) {
    if (!(name in result)) {
      result[name] = config[name];
    }
  }

  return Object.freeze(result);
}

function createDOMAspectGuards(config, defaults) {
  const result = {};

  for (const aspect in defaults) {
    const overrideValue = config[aspect];
    const defaultValue = defaults[aspect];

    switch (overrideValue) {
      case null:
        // remove the default
        break;

      case undefined:
        // keep the default
        result[aspect] = createDomSinkGuards(defaultValue, {});
        break;

      default:
        // override the default
        result[aspect] = createDomSinkGuards(overrideValue, defaultValue);
        break;
    }
  } // add any new aspect guards that were not overrides


  for (const aspect in config) {
    if (!(aspect in result)) {
      result[aspect] = createDomSinkGuards(config[aspect], {});
    }
  }

  return Object.freeze(result);
}

function createElementGuards(config, defaults) {
  const result = {};

  for (const tag in defaults) {
    const overrideValue = config[tag];
    const defaultValue = defaults[tag];

    switch (overrideValue) {
      case null:
        // remove the default
        break;

      case undefined:
        // keep the default
        result[tag] = createDOMAspectGuards(overrideValue, {});
        break;

      default:
        // override the default aspects
        result[tag] = createDOMAspectGuards(overrideValue, defaultValue);
        break;
    }
  } // Add any new element guards that were not overrides


  for (const tag in config) {
    if (!(tag in result)) {
      result[tag] = createDOMAspectGuards(config[tag], {});
    }
  }

  return Object.freeze(result);
}

function createDOMGuards(config, defaults) {
  return Object.freeze({
    elements: config.elements ? createElementGuards(config.elements, defaults.elements) : defaults.elements,
    aspects: config.aspects ? createDOMAspectGuards(config.aspects, defaults.aspects) : defaults.aspects
  });
}

function createTrustedType() {
  const createHTML = html => html;

  return globalThis.trustedTypes ? globalThis.trustedTypes.createPolicy("fast-html", {
    createHTML
  }) : {
    createHTML
  };
}

function tryGuard(aspectGuards, tagName, aspect, aspectName, sink) {
  const sinkGuards = aspectGuards[aspect];

  if (sinkGuards) {
    const guard = sinkGuards[aspectName];

    if (guard) {
      return guard(tagName, aspect, aspectName, sink);
    }
  }
}
/**
 * A helper for creating DOM policies.
 * @public
 */


const DOMPolicy = Object.freeze({
  /**
   * Creates a new DOM Policy object.
   * @param options The options to use in creating the policy.
   * @returns The newly created DOMPolicy.
   */
  create(options = {}) {
    var _a, _b;

    const trustedType = (_a = options.trustedType) !== null && _a !== void 0 ? _a : createTrustedType();
    const guards = createDOMGuards((_b = options.guards) !== null && _b !== void 0 ? _b : {}, defaultDOMGuards);
    return Object.freeze({
      createHTML(value) {
        return trustedType.createHTML(value);
      },

      protect(tagName, aspect, aspectName, sink) {
        var _a; // Check for element-specific guards.


        const key = (tagName !== null && tagName !== void 0 ? tagName : "").toLowerCase();
        const elementGuards = guards.elements[key];

        if (elementGuards) {
          const guard = tryGuard(elementGuards, tagName, aspect, aspectName, sink);

          if (guard) {
            return guard;
          }
        } // Check for guards applicable to all nodes.


        return (_a = tryGuard(guards.aspects, tagName, aspect, aspectName, sink)) !== null && _a !== void 0 ? _a : sink;
      }

    });
  }

});

/**
 * A function to compose template options.
 * @public
 */

function staticallyCompose(item) {
  if (!item) {
    return InlineTemplateDirective.empty;
  }

  if (typeof item === "string") {
    return new InlineTemplateDirective(item);
  }

  if ("inline" in item) {
    return item.inline();
  }

  return item;
}

/**
 * Determines what HTML tag name to use for the dependency.
 * @param dependency - The dependency the template is dependent on.
 * @returns The tag name to use in markup.
 * @beta
 */

function tagFor(dependency) {
  if (typeof dependency === "string") {
    return dependency;
  }

  if (typeof dependency === "function") {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    dependency = FASTElementDefinition.getByType(dependency);

    if (!dependency) {
      throw new Error("Missing FASTElement definition.");
    }
  }

  return dependency.name;
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

/**
 * Some states and properties are applicable to all host language elements regardless of whether a role is applied.
 * The following global states and properties are supported by all roles and by all base markup elements.
 * {@link https://www.w3.org/TR/wai-aria-1.1/#global_states}
 *
 * This is intended to be used as a mixin. Be sure you extend FASTElement.
 *
 * @public
 */

class ARIAGlobalStatesAndProperties {}

__decorate([attr({
  attribute: "aria-atomic"
})], ARIAGlobalStatesAndProperties.prototype, "ariaAtomic", void 0);

__decorate([attr({
  attribute: "aria-busy"
})], ARIAGlobalStatesAndProperties.prototype, "ariaBusy", void 0);

__decorate([attr({
  attribute: "aria-controls"
})], ARIAGlobalStatesAndProperties.prototype, "ariaControls", void 0);

__decorate([attr({
  attribute: "aria-current"
})], ARIAGlobalStatesAndProperties.prototype, "ariaCurrent", void 0);

__decorate([attr({
  attribute: "aria-describedby"
})], ARIAGlobalStatesAndProperties.prototype, "ariaDescribedby", void 0);

__decorate([attr({
  attribute: "aria-details"
})], ARIAGlobalStatesAndProperties.prototype, "ariaDetails", void 0);

__decorate([attr({
  attribute: "aria-disabled"
})], ARIAGlobalStatesAndProperties.prototype, "ariaDisabled", void 0);

__decorate([attr({
  attribute: "aria-errormessage"
})], ARIAGlobalStatesAndProperties.prototype, "ariaErrormessage", void 0);

__decorate([attr({
  attribute: "aria-flowto"
})], ARIAGlobalStatesAndProperties.prototype, "ariaFlowto", void 0);

__decorate([attr({
  attribute: "aria-haspopup"
})], ARIAGlobalStatesAndProperties.prototype, "ariaHaspopup", void 0);

__decorate([attr({
  attribute: "aria-hidden"
})], ARIAGlobalStatesAndProperties.prototype, "ariaHidden", void 0);

__decorate([attr({
  attribute: "aria-invalid"
})], ARIAGlobalStatesAndProperties.prototype, "ariaInvalid", void 0);

__decorate([attr({
  attribute: "aria-keyshortcuts"
})], ARIAGlobalStatesAndProperties.prototype, "ariaKeyshortcuts", void 0);

__decorate([attr({
  attribute: "aria-label"
})], ARIAGlobalStatesAndProperties.prototype, "ariaLabel", void 0);

__decorate([attr({
  attribute: "aria-labelledby"
})], ARIAGlobalStatesAndProperties.prototype, "ariaLabelledby", void 0);

__decorate([attr({
  attribute: "aria-live"
})], ARIAGlobalStatesAndProperties.prototype, "ariaLive", void 0);

__decorate([attr({
  attribute: "aria-owns"
})], ARIAGlobalStatesAndProperties.prototype, "ariaOwns", void 0);

__decorate([attr({
  attribute: "aria-relevant"
})], ARIAGlobalStatesAndProperties.prototype, "ariaRelevant", void 0);

__decorate([attr({
  attribute: "aria-roledescription"
})], ARIAGlobalStatesAndProperties.prototype, "ariaRoledescription", void 0);

/**
 * A mixin class implementing start and end slots.
 * These are generally used to decorate text elements with icons or other visual indicators.
 * @public
 */

class StartEnd {}
/**
 * The template for the end slot.
 * For use with {@link StartEnd}
 *
 * @public
 */

function endSlotTemplate(options) {
  return html`<slot name="end" ${ref("end")}>${staticallyCompose(options.end)}</slot>`.inline();
}
/**
 * The template for the start slots.
 * For use with {@link StartEnd}
 *
 * @public
 */

function startSlotTemplate(options) {
  return html`<slot name="start" ${ref("start")}>${staticallyCompose(options.start)}</slot>`.inline();
}

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTAccordionItem:class)} component.
 * @public
 */

function accordionItemTemplate(options = {}) {
  return html`<div class="heading" part="heading" role="heading" aria-level="${x => x.headinglevel}"><button class="button" part="button" ${ref("expandbutton")} ?disabled="${x => x.disabled ? "true" : void 0}" aria-expanded="${x => x.expanded}" aria-controls="${x => x.id}-panel" id="${x => x.id}" @click="${(x, c) => x.clickHandler(c.event)}"><span class="heading-content" part="heading-content"><slot name="heading"></slot></span></button>${startSlotTemplate(options)} ${endSlotTemplate(options)}<span class="icon" part="icon" aria-hidden="true"><slot name="expanded-icon">${staticallyCompose(options.expandedIcon)}</slot><slot name="collapsed-icon">${staticallyCompose(options.collapsedIcon)}</slot><span></div><div class="region" part="region" id="${x => x.id}-panel" role="region" aria-labelledby="${x => x.id}"><slot></slot></div>`;
}

/**
 * Standard orientation values
 */
const Orientation = {
  horizontal: "horizontal",
  vertical: "vertical"
};

/**
 * Returns the index of the last element in the array where predicate is true, and -1 otherwise.
 *
 * @param array - the array to test
 * @param predicate - find calls predicate once for each element of the array, in descending order, until it finds one where predicate returns true. If such an element is found, findLastIndex immediately returns that element index. Otherwise, findIndex returns -1.
 */
function findLastIndex(array, predicate) {
  let k = array.length;

  while (k--) {
    if (predicate(array[k], k, array)) {
      return k;
    }
  }

  return -1;
}

/**
 * A test that ensures that all arguments are HTML Elements
 */

function isHTMLElement$1(...args) {
  return args.every(arg => arg instanceof HTMLElement);
}
/**
 * Returns all displayed elements inside of a root node that match a provided selector
 */

function getDisplayedNodes(rootNode, selector) {
  if (!rootNode || !selector || !isHTMLElement$1(rootNode)) {
    return;
  }

  const nodes = Array.from(rootNode.querySelectorAll(selector)); // offsetParent will be null if the element isn't currently displayed,
  // so this will allow us to operate only on visible nodes

  return nodes.filter(node => node.offsetParent !== null);
}

/**
 * This set of exported strings reference https://developer.mozilla.org/en-US/docs/Web/Events
 * and should include all non-deprecated and non-experimental Standard events
 */
const eventClick = "click";
const eventFocus = "focus";
const eventFocusIn = "focusin";
const eventFocusOut = "focusout";
const eventKeyDown = "keydown";
const eventResize = "resize";
const eventScroll = "scroll";

/**
 * String values for use with KeyboardEvent.key
 */
const keyArrowDown = "ArrowDown";
const keyArrowLeft = "ArrowLeft";
const keyArrowRight = "ArrowRight";
const keyArrowUp = "ArrowUp";
const keyBackspace = "Backspace";
const keyDelete = "Delete";
const keyEnd = "End";
const keyEnter = "Enter";
const keyEscape = "Escape";
const keyHome = "Home";
const keyFunction2 = "F2";
const keyPageDown = "PageDown";
const keyPageUp = "PageUp";
const keySpace = " ";
const keyTab = "Tab";
const ArrowKeys = {
  ArrowDown: keyArrowDown,
  ArrowLeft: keyArrowLeft,
  ArrowRight: keyArrowRight,
  ArrowUp: keyArrowUp
};

/**
 * Expose ltr and rtl strings
 */
var Direction;

(function (Direction) {
  Direction["ltr"] = "ltr";
  Direction["rtl"] = "rtl";
})(Direction || (Direction = {}));

/**
 * This method keeps a given value within the bounds of a min and max value. If the value
 * is larger than the max, the minimum value will be returned. If the value is smaller than the minimum,
 * the maximum will be returned. Otherwise, the value is returned un-changed.
 */
function wrapInBounds(min, max, value) {
  if (value < min) {
    return max;
  } else if (value > max) {
    return min;
  }

  return value;
}
/**
 * Ensures that a value is between a min and max value. If value is lower than min, min will be returned.
 * If value is greater than max, max will be returned.
 */

function limit(min, max, value) {
  return Math.min(Math.max(value, min), max);
}
/**
 * Determines if a number value is within a specified range.
 *
 * @param value - the value to check
 * @param min - the range start
 * @param max - the range end
 */

function inRange(value, min, max = 0) {
  [min, max] = [min, max].sort((a, b) => a - b);
  return min <= value && value < max;
}

let uniqueIdCounter = 0;
/**
 * Generates a unique ID based on incrementing a counter.
 */

function uniqueId(prefix = "") {
  return `${prefix}${uniqueIdCounter++}`;
}

/**
 * Apply mixins to a constructor.
 * Sourced from {@link https://www.typescriptlang.org/docs/handbook/mixins.html | TypeScript Documentation }.
 * @public
 */

function applyMixins(derivedCtor, ...baseCtors) {
  const derivedAttributes = AttributeConfiguration.locate(derivedCtor);
  baseCtors.forEach(baseCtor => {
    Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
      if (name !== "constructor") {
        Object.defineProperty(derivedCtor.prototype, name,
        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
        Object.getOwnPropertyDescriptor(baseCtor.prototype, name));
      }
    });
    const baseAttributes = AttributeConfiguration.locate(baseCtor);
    baseAttributes.forEach(x => derivedAttributes.push(x));
  });
}

/**
 * An individual item in an {@link @microsoft/fast-foundation#(FASTAccordion:class) }.
 *
 * @slot start - Content which can be provided between the heading and the icon
 * @slot end - Content which can be provided between the start slot and icon
 * @slot heading - Content which serves as the accordion item heading and text of the expand button
 * @slot - The default slot for accordion item content
 * @slot expanded-icon - The expanded icon
 * @slot collapsed-icon - The collapsed icon
 * @fires change - Fires a custom 'change' event when the button is invoked
 * @csspart heading - Wraps the button
 * @csspart button - The button which serves to invoke the item
 * @csspart heading-content - Wraps the slot for the heading content within the button
 * @csspart icon - The icon container
 * @csspart region - The wrapper for the accordion item content
 *
 * @public
 */

class FASTAccordionItem extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * Configures the {@link https://www.w3.org/TR/wai-aria-1.1/#aria-level | level} of the
     * heading element.
     *
     * @defaultValue 2
     * @public
     * @remarks
     * HTML attribute: heading-level
     */

    this.headinglevel = 2;
    /**
     * Expands or collapses the item.
     *
     * @public
     * @remarks
     * HTML attribute: expanded
     */

    this.expanded = false;
    /**
     * Disables an accordion item
     *
     * @public
     * @remarks
     * HTML attribute: disabled
     */

    this.disabled = false;
    /**
     * The item ID
     *
     * @public
     * @remarks
     * HTML Attribute: id
     */

    this.id = uniqueId("accordion-");
    /**
     * @internal
     */

    this.clickHandler = e => {
      if (this.disabled) {
        return;
      }

      this.$emit("click", e);
    };
  }

}

__decorate([attr({
  attribute: "heading-level",
  mode: "fromView",
  converter: nullableNumberConverter
})], FASTAccordionItem.prototype, "headinglevel", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTAccordionItem.prototype, "expanded", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTAccordionItem.prototype, "disabled", void 0);

__decorate([attr], FASTAccordionItem.prototype, "id", void 0);

applyMixins(FASTAccordionItem, StartEnd);

/**
 * Expand mode for {@link FASTAccordion}
 * @public
 */
const AccordionExpandMode = {
  /**
   * Designates only a single {@link @microsoft/fast-foundation#(FASTAccordionItem:class) } can be open a time.
   */
  single: "single",

  /**
   * Designates multiple {@link @microsoft/fast-foundation#(FASTAccordionItem:class) | FASTAccordionItemItems} can be open simultaneously.
   */
  multi: "multi"
};

/**
 * An Accordion Custom HTML Element
 * Implements {@link https://www.w3.org/TR/wai-aria-practices-1.1/#accordion | ARIA Accordion}.
 *
 * @fires change - Fires a custom 'change' event when the active item changes
 * @csspart item - The slot for the accordion items
 * @public
 *
 * @remarks
 * Designed to be used with {@link @microsoft/fast-foundation#accordionTemplate} and {@link @microsoft/fast-foundation#(FASTAccordionItem:class)}.
 */

class FASTAccordion extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * Controls the expand mode of the Accordion, either allowing
     * single or multiple item expansion.
     * @public
     *
     * @remarks
     * HTML attribute: expand-mode
     */

    this.expandmode = AccordionExpandMode.multi;
    this.activeItemIndex = 0;

    this.change = () => {
      this.$emit("change", this.activeid);
    };

    this.setItems = () => {
      if (this.slottedAccordionItems.length === 0) {
        return;
      }

      const children = Array.from(this.children);
      this.removeItemListeners(children);
      children.forEach(child => Observable.getNotifier(child).subscribe(this, "disabled"));
      this.accordionItems = children.filter(child => !child.hasAttribute("disabled"));
      this.accordionIds = this.getItemIds();
      this.accordionItems.forEach((item, index) => {
        if (item instanceof FASTAccordionItem) {
          item.addEventListener("click", this.activeItemChange);
          Observable.getNotifier(item).subscribe(this, "expanded");
        }

        const itemId = this.accordionIds[index];
        item.setAttribute("id", typeof itemId !== "string" ? `accordion-${index + 1}` : itemId);
        this.activeid = this.accordionIds[this.activeItemIndex];
        item.addEventListener("keydown", this.handleItemKeyDown);
        item.addEventListener("focus", this.handleItemFocus);
      });

      if (this.isSingleExpandMode()) {
        const expandedItem = this.findExpandedItem();
        this.setSingleExpandMode(expandedItem);
      }
    };

    this.removeItemListeners = oldValue => {
      oldValue.forEach((item, index) => {
        Observable.getNotifier(item).unsubscribe(this, "disabled");
        Observable.getNotifier(item).unsubscribe(this, "expanded");
        item.removeEventListener("click", this.activeItemChange);
        item.removeEventListener("keydown", this.handleItemKeyDown);
        item.removeEventListener("focus", this.handleItemFocus);
      });
    };

    this.activeItemChange = event => {
      if (event.defaultPrevented || event.target !== event.currentTarget) {
        return;
      }

      event.preventDefault();
      this.handleExpandedChange(event.target);
    };

    this.handleExpandedChange = item => {
      if (item instanceof FASTAccordionItem) {
        this.activeid = item.getAttribute("id");

        if (!this.isSingleExpandMode()) {
          item.expanded = !item.expanded; // setSingleExpandMode sets activeItemIndex on its own

          this.activeItemIndex = this.accordionItems.indexOf(item);
        } else {
          this.setSingleExpandMode(item);
        }

        this.change();
      }
    };

    this.handleItemKeyDown = event => {
      // only handle the keydown if the event target is the accordion item
      // prevents arrow keys from moving focus to accordion headers when focus is on accordion item panel content
      if (event.target !== event.currentTarget) {
        return;
      }

      this.accordionIds = this.getItemIds();

      switch (event.key) {
        case keyArrowUp:
          event.preventDefault();
          this.adjust(-1);
          break;

        case keyArrowDown:
          event.preventDefault();
          this.adjust(1);
          break;

        case keyHome:
          this.activeItemIndex = 0;
          this.focusItem();
          break;

        case keyEnd:
          this.activeItemIndex = this.accordionItems.length - 1;
          this.focusItem();
          break;
      }
    };

    this.handleItemFocus = event => {
      // update the active item index if the focus moves to an accordion item via a different method other than the up and down arrow key actions
      // only do so if the focus is actually on the accordion item and not on any of its children
      if (event.target === event.currentTarget) {
        const focusedItem = event.target;
        const focusedIndex = this.activeItemIndex = Array.from(this.accordionItems).indexOf(focusedItem);

        if (this.activeItemIndex !== focusedIndex && focusedIndex !== -1) {
          this.activeItemIndex = focusedIndex;
          this.activeid = this.accordionIds[this.activeItemIndex];
        }
      }
    };
  }

  expandmodeChanged(prev, next) {
    if (!this.$fastController.isConnected) {
      return;
    }

    const expandedItem = this.findExpandedItem();

    if (!expandedItem) {
      return;
    }

    if (next !== AccordionExpandMode.single) {
      expandedItem === null || expandedItem === void 0 ? void 0 : expandedItem.expandbutton.removeAttribute("aria-disabled");
    } else {
      this.setSingleExpandMode(expandedItem);
    }
  }
  /**
   * @internal
   */


  slottedAccordionItemsChanged(oldValue, newValue) {
    if (this.$fastController.isConnected) {
      this.setItems();
    }
  }
  /**
   * @internal
   */


  handleChange(source, propertyName) {
    if (propertyName === "disabled") {
      this.setItems();
    } else if (propertyName === "expanded") {
      // we only need to manage single expanded instances
      // such as scenarios where a child is programatically expanded
      if (source.expanded && this.isSingleExpandMode()) {
        this.setSingleExpandMode(source);
      }
    }
  }

  findExpandedItem() {
    var _a;

    if (this.accordionItems.length === 0) {
      return null;
    }

    return (_a = this.accordionItems.find(item => item instanceof FASTAccordionItem && item.expanded)) !== null && _a !== void 0 ? _a : this.accordionItems[0];
  }

  setSingleExpandMode(expandedItem) {
    if (this.accordionItems.length === 0) {
      return;
    }

    const currentItems = Array.from(this.accordionItems);
    this.activeItemIndex = currentItems.indexOf(expandedItem);
    currentItems.forEach((item, index) => {
      if (this.activeItemIndex === index) {
        item.expanded = true;
        item.expandbutton.setAttribute("aria-disabled", "true");
      } else {
        item.expanded = false;

        if (!item.hasAttribute("disabled")) {
          item.expandbutton.removeAttribute("aria-disabled");
        }
      }
    });
  }

  getItemIds() {
    return this.slottedAccordionItems.map(accordionItem => {
      return accordionItem.id;
    });
  }

  isSingleExpandMode() {
    return this.expandmode === AccordionExpandMode.single;
  }

  adjust(adjustment) {
    this.activeItemIndex = wrapInBounds(0, this.accordionItems.length - 1, this.activeItemIndex + adjustment);
    this.focusItem();
  }

  focusItem() {
    const element = this.accordionItems[this.activeItemIndex];

    if (element instanceof FASTAccordionItem) {
      element.expandbutton.focus();
    }
  }

}

__decorate([attr({
  attribute: "expand-mode"
})], FASTAccordion.prototype, "expandmode", void 0);

__decorate([observable], FASTAccordion.prototype, "slottedAccordionItems", void 0);

/**
 * Creates a template for the {@link @microsoft/fast-foundation#FASTAccordion} component.
 * @public
 */

function accordionTemplate() {
  return html`<template><slot ${slotted({
    property: "slottedAccordionItems",
    filter: elements()
  })}></slot></template>`;
}

/**
 * An Anchor Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element }.
 *
 * @slot start - Content which can be provided before the anchor content
 * @slot end - Content which can be provided after the anchor content
 * @slot - The default slot for anchor content
 * @csspart control - The anchor element
 * @csspart content - The element wrapping anchor content
 *
 * @public
 */

class FASTAnchor extends FASTElement {}

__decorate([attr], FASTAnchor.prototype, "download", void 0);

__decorate([attr], FASTAnchor.prototype, "href", void 0);

__decorate([attr], FASTAnchor.prototype, "hreflang", void 0);

__decorate([attr], FASTAnchor.prototype, "ping", void 0);

__decorate([attr], FASTAnchor.prototype, "referrerpolicy", void 0);

__decorate([attr], FASTAnchor.prototype, "rel", void 0);

__decorate([attr], FASTAnchor.prototype, "target", void 0);

__decorate([attr], FASTAnchor.prototype, "type", void 0);

__decorate([observable], FASTAnchor.prototype, "defaultSlottedContent", void 0);
/**
 * Includes ARIA states and properties relating to the ARIA link role
 *
 * @public
 */


class DelegatesARIALink {}

__decorate([attr({
  attribute: "aria-expanded"
})], DelegatesARIALink.prototype, "ariaExpanded", void 0);

applyMixins(DelegatesARIALink, ARIAGlobalStatesAndProperties);
applyMixins(FASTAnchor, StartEnd, DelegatesARIALink);

/**
 * Anchor target values.
 *
 * @public
 */
const AnchorTarget = {
  _self: "_self",
  _blank: "_blank",
  _parent: "_parent",
  _top: "_top"
};

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTAnchor:class)} component.
 * @public
 */

function anchorTemplate(options = {}) {
  return html`<a class="control" part="control" download="${x => x.download}" href="${x => x.href}" hreflang="${x => x.hreflang}" ping="${x => x.ping}" referrerpolicy="${x => x.referrerpolicy}" rel="${x => x.rel}" target="${x => x.target}" type="${x => x.type}" aria-atomic="${x => x.ariaAtomic}" aria-busy="${x => x.ariaBusy}" aria-controls="${x => x.ariaControls}" aria-current="${x => x.ariaCurrent}" aria-describedby="${x => x.ariaDescribedby}" aria-details="${x => x.ariaDetails}" aria-disabled="${x => x.ariaDisabled}" aria-errormessage="${x => x.ariaErrormessage}" aria-expanded="${x => x.ariaExpanded}" aria-flowto="${x => x.ariaFlowto}" aria-haspopup="${x => x.ariaHaspopup}" aria-hidden="${x => x.ariaHidden}" aria-invalid="${x => x.ariaInvalid}" aria-keyshortcuts="${x => x.ariaKeyshortcuts}" aria-label="${x => x.ariaLabel}" aria-labelledby="${x => x.ariaLabelledby}" aria-live="${x => x.ariaLive}" aria-owns="${x => x.ariaOwns}" aria-relevant="${x => x.ariaRelevant}" aria-roledescription="${x => x.ariaRoledescription}" ${ref("control")}>${startSlotTemplate(options)}<span class="content" part="content"><slot ${slotted("defaultSlottedContent")}></slot></span>${endSlotTemplate(options)}</a>`;
}

/**
 * Building blocks - partial configs
 */

/**
 * A region that matches the size and position of the anchor horizontally
 */
const horizontalAnchorOverlay = {
  horizontalDefaultPosition: "center",
  horizontalPositioningMode: "locktodefault",
  horizontalInset: false,
  horizontalScaling: "anchor"
};
/**
 * Exported configs
 */

/**
 * A region that always places itself above the anchor, has
 * a width to match the anchor, and is sized vertically by content
 *
 * @public
 */

const FlyoutPosTop = Object.assign(Object.assign({}, horizontalAnchorOverlay), {
  verticalDefaultPosition: "top",
  verticalPositioningMode: "locktodefault",
  verticalInset: false,
  verticalScaling: "content"
});
/**
 * A region that always places itself below the anchor, has
 * a width to match the anchor, and is sized vertically by content
 *
 * @public
 */

const FlyoutPosBottom = Object.assign(Object.assign({}, horizontalAnchorOverlay), {
  verticalDefaultPosition: "bottom",
  verticalPositioningMode: "locktodefault",
  verticalInset: false,
  verticalScaling: "content"
});
/**
 * A region that places itself above or below the anchor
 * based on available space, has a width to match the anchor,
 * and is sized vertically by content
 *
 * @public
 */

const FlyoutPosTallest = Object.assign(Object.assign({}, horizontalAnchorOverlay), {
  verticalPositioningMode: "dynamic",
  verticalInset: false,
  verticalScaling: "content"
});
/**
 * A region that always places itself above the anchor, has
 * a width to match the anchor, and is sized vertically by available space
 *
 * @public
 */

const FlyoutPosTopFill = Object.assign(Object.assign({}, FlyoutPosTop), {
  verticalScaling: "fill"
});
/**
 * A region that always places itself below the anchor, has
 * a width to match the anchor, and is sized vertically by available space
 *
 * @public
 */

const FlyoutPosBottomFill = Object.assign(Object.assign({}, FlyoutPosBottom), {
  verticalScaling: "fill"
});
/**
 * A region that places itself above or below the anchor
 * based on available space, has a width to match the anchor,
 * and is sized vertically by available space
 *
 * @public
 */

const FlyoutPosTallestFill = Object.assign(Object.assign({}, FlyoutPosTallest), {
  verticalScaling: "fill"
});

/**
 * Determines the current localization direction of an element.
 *
 * @param rootNode - the HTMLElement to begin the query from, usually "this" when used in a component controller
 * @returns the localization direction of the element
 *
 * @public
 */

const getDirection = rootNode => {
  var _a;

  return ((_a = rootNode.closest("[dir]")) === null || _a === void 0 ? void 0 : _a.dir) === "rtl" ? Direction.rtl : Direction.ltr;
};

/**
 *  A service to batch intersection event callbacks so multiple elements can share a single observer
 *
 * @public
 */
class IntersectionService {
  constructor() {
    this.intersectionDetector = null;
    this.observedElements = new Map();
    /**
     * Request the position of a target element
     *
     * @internal
     */

    this.requestPosition = (target, callback) => {
      var _a;

      if (this.intersectionDetector === null) {
        return;
      }

      if (this.observedElements.has(target)) {
        (_a = this.observedElements.get(target)) === null || _a === void 0 ? void 0 : _a.push(callback);
        return;
      }

      this.observedElements.set(target, [callback]);
      this.intersectionDetector.observe(target);
    };
    /**
     * Cancel a position request
     *
     * @internal
     */


    this.cancelRequestPosition = (target, callback) => {
      const callbacks = this.observedElements.get(target);

      if (callbacks !== undefined) {
        const callBackIndex = callbacks.indexOf(callback);

        if (callBackIndex !== -1) {
          callbacks.splice(callBackIndex, 1);
        }
      }
    };
    /**
     * initialize intersection detector
     */


    this.initializeIntersectionDetector = () => {
      if (!globalThis.IntersectionObserver) {
        //intersection observer not supported
        return;
      }

      this.intersectionDetector = new IntersectionObserver(this.handleIntersection, {
        root: null,
        rootMargin: "0px",
        threshold: [0, 1]
      });
    };
    /**
     *  Handle intersections
     */


    this.handleIntersection = entries => {
      if (this.intersectionDetector === null) {
        return;
      }

      const pendingCallbacks = [];
      const pendingCallbackParams = []; // go through the entries to build a list of callbacks and params for each

      entries.forEach(entry => {
        var _a; // stop watching this element until we get new update requests for it


        (_a = this.intersectionDetector) === null || _a === void 0 ? void 0 : _a.unobserve(entry.target);
        const thisElementCallbacks = this.observedElements.get(entry.target);

        if (thisElementCallbacks !== undefined) {
          thisElementCallbacks.forEach(callback => {
            let targetCallbackIndex = pendingCallbacks.indexOf(callback);

            if (targetCallbackIndex === -1) {
              targetCallbackIndex = pendingCallbacks.length;
              pendingCallbacks.push(callback);
              pendingCallbackParams.push([]);
            }

            pendingCallbackParams[targetCallbackIndex].push(entry);
          });
          this.observedElements.delete(entry.target);
        }
      }); // execute callbacks

      pendingCallbacks.forEach((callback, index) => {
        callback(pendingCallbackParams[index]);
      });
    };

    this.initializeIntersectionDetector();
  }

}

/**
 * An anchored region Custom HTML Element.
 *
 * @slot - The default slot for the content
 * @fires loaded - Fires a custom 'loaded' event when the region is loaded and visible
 * @fires positionchange - Fires a custom 'positionchange' event when the position has changed
 *
 * @public
 */

class FASTAnchoredRegion extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * The HTML ID of the anchor element this region is positioned relative to
     *
     * @public
     * @remarks
     * HTML Attribute: anchor
     */

    this.anchor = "";
    /**
     * The HTML ID of the viewport element this region is positioned relative to
     *
     * @public
     * @remarks
     * HTML Attribute: anchor
     */

    this.viewport = "";
    /**
     * Sets what logic the component uses to determine horizontal placement.
     * 'locktodefault' forces the default position
     * 'dynamic' decides placement based on available space
     * 'uncontrolled' does not control placement on the horizontal axis
     *
     * @public
     * @remarks
     * HTML Attribute: horizontal-positioning-mode
     */

    this.horizontalPositioningMode = "uncontrolled";
    /**
     * The default horizontal position of the region relative to the anchor element
     *
     * @public
     * @remarks
     * HTML Attribute: horizontal-default-position
     */

    this.horizontalDefaultPosition = "unset";
    /**
     * Whether the region remains in the viewport (ie. detaches from the anchor) on the horizontal axis
     *
     * @public
     * @remarks
     * HTML Attribute: horizontal-viewport-lock
     */

    this.horizontalViewportLock = false;
    /**
     * Whether the region overlaps the anchor on the horizontal axis
     *
     * @public
     * @remarks
     * HTML Attribute: horizontal-inset
     */

    this.horizontalInset = false;
    /**
     * Defines how the width of the region is calculated
     *
     * @public
     * @remarks
     * HTML Attribute: horizontal-scaling
     */

    this.horizontalScaling = "content";
    /**
     * Sets what logic the component uses to determine vertical placement.
     * 'locktodefault' forces the default position
     * 'dynamic' decides placement based on available space
     * 'uncontrolled' does not control placement on the vertical axis
     *
     * @public
     * @remarks
     * HTML Attribute: vertical-positioning-mode
     */

    this.verticalPositioningMode = "uncontrolled";
    /**
     * The default vertical position of the region relative to the anchor element
     *
     * @public
     * @remarks
     * HTML Attribute: vertical-default-position
     */

    this.verticalDefaultPosition = "unset";
    /**
     * Whether the region remains in the viewport (ie. detaches from the anchor) on the vertical axis
     *
     * @public
     * @remarks
     * HTML Attribute: vertical-viewport-lock
     */

    this.verticalViewportLock = false;
    /**
     * Whether the region overlaps the anchor on the vertical axis
     *
     * @public
     * @remarks
     * HTML Attribute: vertical-inset
     */

    this.verticalInset = false;
    /**
     * Defines how the height of the region is calculated
     *
     * @public
     * @remarks
     * HTML Attribute: vertical-scaling
     */

    this.verticalScaling = "content";
    /**
     * Whether the region is positioned using css "position: fixed".
     * Otherwise the region uses "position: absolute".
     * Fixed placement allows the region to break out of parent containers,
     *
     * @public
     * @remarks
     * HTML Attribute: fixed-placement
     */

    this.fixedPlacement = false;
    /**
     * Defines what triggers the anchored region to revaluate positioning
     *
     * @public
     * @remarks
     * HTML Attribute: auto-update-mode
     */

    this.autoUpdateMode = "anchor";
    /**
     * The HTML element being used as the anchor
     *
     * @public
     */

    this.anchorElement = null;
    /**
     * The HTML element being used as the viewport
     *
     * @public
     */

    this.viewportElement = null;
    /**
     * indicates that an initial positioning pass on layout has completed
     *
     * @internal
     */

    this.initialLayoutComplete = false;
    this.resizeDetector = null;
    /**
     * base offsets between the positioner's base position and the anchor's
     */

    this.baseHorizontalOffset = 0;
    this.baseVerticalOffset = 0;
    this.pendingPositioningUpdate = false;
    this.pendingReset = false;
    this.currentDirection = Direction.ltr;
    this.regionVisible = false; // indicates that a layout update should occur even if geometry has not changed
    // used to ensure some attribute changes are applied

    this.forceUpdate = false; // defines how big a difference in pixels there must be between states to
    // justify a layout update that affects the dom (prevents repeated sub-pixel corrections)

    this.updateThreshold = 0.5;
    /**
     * update position
     */

    this.update = () => {
      if (!this.pendingPositioningUpdate) {
        this.requestPositionUpdates();
      }
    };
    /**
     * starts observers
     */


    this.startObservers = () => {
      this.stopObservers();

      if (this.anchorElement === null) {
        return;
      }

      this.requestPositionUpdates();

      if (this.resizeDetector !== null) {
        this.resizeDetector.observe(this.anchorElement);
        this.resizeDetector.observe(this);
      }
    };
    /**
     * get position updates
     */


    this.requestPositionUpdates = () => {
      if (this.anchorElement === null || this.pendingPositioningUpdate) {
        return;
      }

      FASTAnchoredRegion.intersectionService.requestPosition(this, this.handleIntersection);
      FASTAnchoredRegion.intersectionService.requestPosition(this.anchorElement, this.handleIntersection);

      if (this.viewportElement !== null) {
        FASTAnchoredRegion.intersectionService.requestPosition(this.viewportElement, this.handleIntersection);
      }

      this.pendingPositioningUpdate = true;
    };
    /**
     * stops observers
     */


    this.stopObservers = () => {
      if (this.pendingPositioningUpdate) {
        this.pendingPositioningUpdate = false;
        FASTAnchoredRegion.intersectionService.cancelRequestPosition(this, this.handleIntersection);

        if (this.anchorElement !== null) {
          FASTAnchoredRegion.intersectionService.cancelRequestPosition(this.anchorElement, this.handleIntersection);
        }

        if (this.viewportElement !== null) {
          FASTAnchoredRegion.intersectionService.cancelRequestPosition(this.viewportElement, this.handleIntersection);
        }
      }

      if (this.resizeDetector !== null) {
        this.resizeDetector.disconnect();
      }
    };
    /**
     * Gets the viewport element by id, or defaults to document root
     */


    this.getViewport = () => {
      if (typeof this.viewport !== "string" || this.viewport === "") {
        return document.documentElement;
      }

      const rootNode = this.getRootNode();

      if (rootNode instanceof ShadowRoot) {
        return rootNode.getElementById(this.viewport);
      }

      return document.getElementById(this.viewport);
    };
    /**
     *  Gets the anchor element by id
     */


    this.getAnchor = () => {
      const rootNode = this.getRootNode();

      if (rootNode instanceof ShadowRoot) {
        return rootNode.getElementById(this.anchor);
      }

      return document.getElementById(this.anchor);
    };
    /**
     *  Handle intersections
     */


    this.handleIntersection = entries => {
      if (!this.pendingPositioningUpdate) {
        return;
      }

      this.pendingPositioningUpdate = false;

      if (!this.applyIntersectionEntries(entries)) {
        return;
      }

      this.updateLayout();
    };
    /**
     *  iterate through intersection entries and apply data
     */


    this.applyIntersectionEntries = entries => {
      const regionEntry = entries.find(x => x.target === this);
      const anchorEntry = entries.find(x => x.target === this.anchorElement);
      const viewportEntry = entries.find(x => x.target === this.viewportElement);

      if (regionEntry === undefined || viewportEntry === undefined || anchorEntry === undefined) {
        return false;
      } // don't update the dom unless there is a significant difference in rect positions


      if (!this.regionVisible || this.forceUpdate || this.regionRect === undefined || this.anchorRect === undefined || this.viewportRect === undefined || this.isRectDifferent(this.anchorRect, anchorEntry.boundingClientRect) || this.isRectDifferent(this.viewportRect, viewportEntry.boundingClientRect) || this.isRectDifferent(this.regionRect, regionEntry.boundingClientRect)) {
        this.regionRect = regionEntry.boundingClientRect;
        this.anchorRect = anchorEntry.boundingClientRect;

        if (this.viewportElement === document.documentElement) {
          this.viewportRect = new DOMRectReadOnly(viewportEntry.boundingClientRect.x + document.documentElement.scrollLeft, viewportEntry.boundingClientRect.y + document.documentElement.scrollTop, viewportEntry.boundingClientRect.width, viewportEntry.boundingClientRect.height);
        } else {
          this.viewportRect = viewportEntry.boundingClientRect;
        }

        this.updateRegionOffset();
        this.forceUpdate = false;
        return true;
      }

      return false;
    };
    /**
     *  Update the offset values
     */


    this.updateRegionOffset = () => {
      if (this.anchorRect && this.regionRect) {
        this.baseHorizontalOffset = this.baseHorizontalOffset + (this.anchorRect.left - this.regionRect.left) + (this.translateX - this.baseHorizontalOffset);
        this.baseVerticalOffset = this.baseVerticalOffset + (this.anchorRect.top - this.regionRect.top) + (this.translateY - this.baseVerticalOffset);
      }
    };
    /**
     *  compare rects to see if there is enough change to justify a DOM update
     */


    this.isRectDifferent = (rectA, rectB) => {
      if (Math.abs(rectA.top - rectB.top) > this.updateThreshold || Math.abs(rectA.right - rectB.right) > this.updateThreshold || Math.abs(rectA.bottom - rectB.bottom) > this.updateThreshold || Math.abs(rectA.left - rectB.left) > this.updateThreshold) {
        return true;
      }

      return false;
    };
    /**
     *  Handle resize events
     */


    this.handleResize = entries => {
      this.update();
    };
    /**
     * resets the component
     */


    this.reset = () => {
      if (!this.pendingReset) {
        return;
      }

      this.pendingReset = false;

      if (this.anchorElement === null) {
        this.anchorElement = this.getAnchor();
      }

      if (this.viewportElement === null) {
        this.viewportElement = this.getViewport();
      }

      this.currentDirection = getDirection(this);
      this.startObservers();
    };
    /**
     *  Recalculate layout related state values
     */


    this.updateLayout = () => {
      let desiredVerticalPosition = undefined;
      let desiredHorizontalPosition = undefined;

      if (this.horizontalPositioningMode !== "uncontrolled") {
        const horizontalOptions = this.getPositioningOptions(this.horizontalInset);

        if (this.horizontalDefaultPosition === "center") {
          desiredHorizontalPosition = "center";
        } else if (this.horizontalDefaultPosition !== "unset") {
          let dirCorrectedHorizontalDefaultPosition = this.horizontalDefaultPosition;

          if (dirCorrectedHorizontalDefaultPosition === "start" || dirCorrectedHorizontalDefaultPosition === "end") {
            // if direction changes we reset the layout
            const newDirection = getDirection(this);

            if (newDirection !== this.currentDirection) {
              this.currentDirection = newDirection;
              this.initialize();
              return;
            }

            if (this.currentDirection === Direction.ltr) {
              dirCorrectedHorizontalDefaultPosition = dirCorrectedHorizontalDefaultPosition === "start" ? "left" : "right";
            } else {
              dirCorrectedHorizontalDefaultPosition = dirCorrectedHorizontalDefaultPosition === "start" ? "right" : "left";
            }
          }

          switch (dirCorrectedHorizontalDefaultPosition) {
            case "left":
              desiredHorizontalPosition = this.horizontalInset ? "insetStart" : "start";
              break;

            case "right":
              desiredHorizontalPosition = this.horizontalInset ? "insetEnd" : "end";
              break;
          }
        }

        const horizontalThreshold = this.horizontalThreshold !== undefined ? this.horizontalThreshold : this.regionRect !== undefined ? this.regionRect.width : 0;
        const anchorLeft = this.anchorRect !== undefined ? this.anchorRect.left : 0;
        const anchorRight = this.anchorRect !== undefined ? this.anchorRect.right : 0;
        const anchorWidth = this.anchorRect !== undefined ? this.anchorRect.width : 0;
        const viewportLeft = this.viewportRect !== undefined ? this.viewportRect.left : 0;
        const viewportRight = this.viewportRect !== undefined ? this.viewportRect.right : 0;

        if (desiredHorizontalPosition === undefined || !(this.horizontalPositioningMode === "locktodefault") && this.getAvailableSpace(desiredHorizontalPosition, anchorLeft, anchorRight, anchorWidth, viewportLeft, viewportRight) < horizontalThreshold) {
          desiredHorizontalPosition = this.getAvailableSpace(horizontalOptions[0], anchorLeft, anchorRight, anchorWidth, viewportLeft, viewportRight) > this.getAvailableSpace(horizontalOptions[1], anchorLeft, anchorRight, anchorWidth, viewportLeft, viewportRight) ? horizontalOptions[0] : horizontalOptions[1];
        }
      }

      if (this.verticalPositioningMode !== "uncontrolled") {
        const verticalOptions = this.getPositioningOptions(this.verticalInset);

        if (this.verticalDefaultPosition === "center") {
          desiredVerticalPosition = "center";
        } else if (this.verticalDefaultPosition !== "unset") {
          switch (this.verticalDefaultPosition) {
            case "top":
              desiredVerticalPosition = this.verticalInset ? "insetStart" : "start";
              break;

            case "bottom":
              desiredVerticalPosition = this.verticalInset ? "insetEnd" : "end";
              break;
          }
        }

        const verticalThreshold = this.verticalThreshold !== undefined ? this.verticalThreshold : this.regionRect !== undefined ? this.regionRect.height : 0;
        const anchorTop = this.anchorRect !== undefined ? this.anchorRect.top : 0;
        const anchorBottom = this.anchorRect !== undefined ? this.anchorRect.bottom : 0;
        const anchorHeight = this.anchorRect !== undefined ? this.anchorRect.height : 0;
        const viewportTop = this.viewportRect !== undefined ? this.viewportRect.top : 0;
        const viewportBottom = this.viewportRect !== undefined ? this.viewportRect.bottom : 0;

        if (desiredVerticalPosition === undefined || !(this.verticalPositioningMode === "locktodefault") && this.getAvailableSpace(desiredVerticalPosition, anchorTop, anchorBottom, anchorHeight, viewportTop, viewportBottom) < verticalThreshold) {
          desiredVerticalPosition = this.getAvailableSpace(verticalOptions[0], anchorTop, anchorBottom, anchorHeight, viewportTop, viewportBottom) > this.getAvailableSpace(verticalOptions[1], anchorTop, anchorBottom, anchorHeight, viewportTop, viewportBottom) ? verticalOptions[0] : verticalOptions[1];
        }
      }

      const nextPositionerDimension = this.getNextRegionDimension(desiredHorizontalPosition, desiredVerticalPosition);
      const positionChanged = this.horizontalPosition !== desiredHorizontalPosition || this.verticalPosition !== desiredVerticalPosition;
      this.setHorizontalPosition(desiredHorizontalPosition, nextPositionerDimension);
      this.setVerticalPosition(desiredVerticalPosition, nextPositionerDimension);
      this.updateRegionStyle();

      if (!this.initialLayoutComplete) {
        this.initialLayoutComplete = true;
        this.requestPositionUpdates();
        return;
      }

      if (!this.regionVisible) {
        this.regionVisible = true;
        this.style.removeProperty("pointer-events");
        this.style.removeProperty("opacity");
        this.classList.toggle("loaded", true);
        this.$emit("loaded", this, {
          bubbles: false
        });
      }

      this.updatePositionClasses();

      if (positionChanged) {
        // emit change event
        this.$emit("positionchange", this, {
          bubbles: false
        });
      }
    };
    /**
     *  Updates the style string applied to the region element as well as the css classes attached
     *  to the root element
     */


    this.updateRegionStyle = () => {
      this.style.width = this.regionWidth;
      this.style.height = this.regionHeight;
      this.style.transform = `translate(${this.translateX}px, ${this.translateY}px)`;
    };
    /**
     *  Updates the css classes that reflect the current position of the element
     */


    this.updatePositionClasses = () => {
      this.classList.toggle("top", this.verticalPosition === "start");
      this.classList.toggle("bottom", this.verticalPosition === "end");
      this.classList.toggle("inset-top", this.verticalPosition === "insetStart");
      this.classList.toggle("inset-bottom", this.verticalPosition === "insetEnd");
      this.classList.toggle("vertical-center", this.verticalPosition === "center");
      this.classList.toggle("left", this.horizontalPosition === "start");
      this.classList.toggle("right", this.horizontalPosition === "end");
      this.classList.toggle("inset-left", this.horizontalPosition === "insetStart");
      this.classList.toggle("inset-right", this.horizontalPosition === "insetEnd");
      this.classList.toggle("horizontal-center", this.horizontalPosition === "center");
    };
    /**
     * Get horizontal positioning state based on desired position
     */


    this.setHorizontalPosition = (desiredHorizontalPosition, nextPositionerDimension) => {
      if (desiredHorizontalPosition === undefined || this.regionRect === undefined || this.anchorRect === undefined || this.viewportRect === undefined) {
        return;
      }

      let nextRegionWidth = 0;

      switch (this.horizontalScaling) {
        case "anchor":
        case "fill":
          nextRegionWidth = this.horizontalViewportLock ? this.viewportRect.width : nextPositionerDimension.width;
          this.regionWidth = `${nextRegionWidth}px`;
          break;

        case "content":
          nextRegionWidth = this.regionRect.width;
          this.regionWidth = "unset";
          break;
      }

      let sizeDelta = 0;

      switch (desiredHorizontalPosition) {
        case "start":
          this.translateX = this.baseHorizontalOffset - nextRegionWidth;

          if (this.horizontalViewportLock && this.anchorRect.left > this.viewportRect.right) {
            this.translateX = this.translateX - (this.anchorRect.left - this.viewportRect.right);
          }

          break;

        case "insetStart":
          this.translateX = this.baseHorizontalOffset - nextRegionWidth + this.anchorRect.width;

          if (this.horizontalViewportLock && this.anchorRect.right > this.viewportRect.right) {
            this.translateX = this.translateX - (this.anchorRect.right - this.viewportRect.right);
          }

          break;

        case "insetEnd":
          this.translateX = this.baseHorizontalOffset;

          if (this.horizontalViewportLock && this.anchorRect.left < this.viewportRect.left) {
            this.translateX = this.translateX - (this.anchorRect.left - this.viewportRect.left);
          }

          break;

        case "end":
          this.translateX = this.baseHorizontalOffset + this.anchorRect.width;

          if (this.horizontalViewportLock && this.anchorRect.right < this.viewportRect.left) {
            this.translateX = this.translateX - (this.anchorRect.right - this.viewportRect.left);
          }

          break;

        case "center":
          sizeDelta = (this.anchorRect.width - nextRegionWidth) / 2;
          this.translateX = this.baseHorizontalOffset + sizeDelta;

          if (this.horizontalViewportLock) {
            const regionLeft = this.anchorRect.left + sizeDelta;
            const regionRight = this.anchorRect.right - sizeDelta;

            if (regionLeft < this.viewportRect.left && !(regionRight > this.viewportRect.right)) {
              this.translateX = this.translateX - (regionLeft - this.viewportRect.left);
            } else if (regionRight > this.viewportRect.right && !(regionLeft < this.viewportRect.left)) {
              this.translateX = this.translateX - (regionRight - this.viewportRect.right);
            }
          }

          break;
      }

      this.horizontalPosition = desiredHorizontalPosition;
    };
    /**
     * Set vertical positioning state based on desired position
     */


    this.setVerticalPosition = (desiredVerticalPosition, nextPositionerDimension) => {
      if (desiredVerticalPosition === undefined || this.regionRect === undefined || this.anchorRect === undefined || this.viewportRect === undefined) {
        return;
      }

      let nextRegionHeight = 0;

      switch (this.verticalScaling) {
        case "anchor":
        case "fill":
          nextRegionHeight = this.verticalViewportLock ? this.viewportRect.height : nextPositionerDimension.height;
          this.regionHeight = `${nextRegionHeight}px`;
          break;

        case "content":
          nextRegionHeight = this.regionRect.height;
          this.regionHeight = "unset";
          break;
      }

      let sizeDelta = 0;

      switch (desiredVerticalPosition) {
        case "start":
          this.translateY = this.baseVerticalOffset - nextRegionHeight;

          if (this.verticalViewportLock && this.anchorRect.top > this.viewportRect.bottom) {
            this.translateY = this.translateY - (this.anchorRect.top - this.viewportRect.bottom);
          }

          break;

        case "insetStart":
          this.translateY = this.baseVerticalOffset - nextRegionHeight + this.anchorRect.height;

          if (this.verticalViewportLock && this.anchorRect.bottom > this.viewportRect.bottom) {
            this.translateY = this.translateY - (this.anchorRect.bottom - this.viewportRect.bottom);
          }

          break;

        case "insetEnd":
          this.translateY = this.baseVerticalOffset;

          if (this.verticalViewportLock && this.anchorRect.top < this.viewportRect.top) {
            this.translateY = this.translateY - (this.anchorRect.top - this.viewportRect.top);
          }

          break;

        case "end":
          this.translateY = this.baseVerticalOffset + this.anchorRect.height;

          if (this.verticalViewportLock && this.anchorRect.bottom < this.viewportRect.top) {
            this.translateY = this.translateY - (this.anchorRect.bottom - this.viewportRect.top);
          }

          break;

        case "center":
          sizeDelta = (this.anchorRect.height - nextRegionHeight) / 2;
          this.translateY = this.baseVerticalOffset + sizeDelta;

          if (this.verticalViewportLock) {
            const regionTop = this.anchorRect.top + sizeDelta;
            const regionBottom = this.anchorRect.bottom - sizeDelta;

            if (regionTop < this.viewportRect.top && !(regionBottom > this.viewportRect.bottom)) {
              this.translateY = this.translateY - (regionTop - this.viewportRect.top);
            } else if (regionBottom > this.viewportRect.bottom && !(regionTop < this.viewportRect.top)) {
              this.translateY = this.translateY - (regionBottom - this.viewportRect.bottom);
            }
          }

      }

      this.verticalPosition = desiredVerticalPosition;
    };
    /**
     *  Get available positions based on positioning mode
     */


    this.getPositioningOptions = inset => {
      if (inset) {
        return ["insetStart", "insetEnd"];
      }

      return ["start", "end"];
    };
    /**
     *  Get the space available for a particular relative position
     */


    this.getAvailableSpace = (positionOption, anchorStart, anchorEnd, anchorSpan, viewportStart, viewportEnd) => {
      const spaceStart = anchorStart - viewportStart;
      const spaceEnd = viewportEnd - (anchorStart + anchorSpan);

      switch (positionOption) {
        case "start":
          return spaceStart;

        case "insetStart":
          return spaceStart + anchorSpan;

        case "insetEnd":
          return spaceEnd + anchorSpan;

        case "end":
          return spaceEnd;

        case "center":
          return Math.min(spaceStart, spaceEnd) * 2 + anchorSpan;
      }
    };
    /**
     * Get region dimensions
     */


    this.getNextRegionDimension = (desiredHorizontalPosition, desiredVerticalPosition) => {
      const newRegionDimension = {
        height: this.regionRect !== undefined ? this.regionRect.height : 0,
        width: this.regionRect !== undefined ? this.regionRect.width : 0
      };

      if (desiredHorizontalPosition !== undefined && this.horizontalScaling === "fill") {
        newRegionDimension.width = this.getAvailableSpace(desiredHorizontalPosition, this.anchorRect !== undefined ? this.anchorRect.left : 0, this.anchorRect !== undefined ? this.anchorRect.right : 0, this.anchorRect !== undefined ? this.anchorRect.width : 0, this.viewportRect !== undefined ? this.viewportRect.left : 0, this.viewportRect !== undefined ? this.viewportRect.right : 0);
      } else if (this.horizontalScaling === "anchor") {
        newRegionDimension.width = this.anchorRect !== undefined ? this.anchorRect.width : 0;
      }

      if (desiredVerticalPosition !== undefined && this.verticalScaling === "fill") {
        newRegionDimension.height = this.getAvailableSpace(desiredVerticalPosition, this.anchorRect !== undefined ? this.anchorRect.top : 0, this.anchorRect !== undefined ? this.anchorRect.bottom : 0, this.anchorRect !== undefined ? this.anchorRect.height : 0, this.viewportRect !== undefined ? this.viewportRect.top : 0, this.viewportRect !== undefined ? this.viewportRect.bottom : 0);
      } else if (this.verticalScaling === "anchor") {
        newRegionDimension.height = this.anchorRect !== undefined ? this.anchorRect.height : 0;
      }

      return newRegionDimension;
    };
    /**
     * starts event listeners that can trigger auto updating
     */


    this.startAutoUpdateEventListeners = () => {
      window.addEventListener(eventResize, this.update, {
        passive: true
      });
      window.addEventListener(eventScroll, this.update, {
        passive: true,
        capture: true
      });

      if (this.resizeDetector !== null && this.viewportElement !== null) {
        this.resizeDetector.observe(this.viewportElement);
      }
    };
    /**
     * stops event listeners that can trigger auto updating
     */


    this.stopAutoUpdateEventListeners = () => {
      window.removeEventListener(eventResize, this.update);
      window.removeEventListener(eventScroll, this.update);

      if (this.resizeDetector !== null && this.viewportElement !== null) {
        this.resizeDetector.unobserve(this.viewportElement);
      }
    };
  }

  anchorChanged() {
    if (this.initialLayoutComplete) {
      this.anchorElement = this.getAnchor();
    }
  }

  viewportChanged() {
    if (this.initialLayoutComplete) {
      this.viewportElement = this.getViewport();
    }
  }

  horizontalPositioningModeChanged() {
    this.requestReset();
  }

  horizontalDefaultPositionChanged() {
    this.updateForAttributeChange();
  }

  horizontalViewportLockChanged() {
    this.updateForAttributeChange();
  }

  horizontalInsetChanged() {
    this.updateForAttributeChange();
  }

  horizontalThresholdChanged() {
    this.updateForAttributeChange();
  }

  horizontalScalingChanged() {
    this.updateForAttributeChange();
  }

  verticalPositioningModeChanged() {
    this.requestReset();
  }

  verticalDefaultPositionChanged() {
    this.updateForAttributeChange();
  }

  verticalViewportLockChanged() {
    this.updateForAttributeChange();
  }

  verticalInsetChanged() {
    this.updateForAttributeChange();
  }

  verticalThresholdChanged() {
    this.updateForAttributeChange();
  }

  verticalScalingChanged() {
    this.updateForAttributeChange();
  }

  fixedPlacementChanged() {
    if (this.$fastController.isConnected && this.initialLayoutComplete) {
      this.initialize();
    }
  }

  autoUpdateModeChanged(prevMode, newMode) {
    if (this.$fastController.isConnected && this.initialLayoutComplete) {
      if (prevMode === "auto") {
        this.stopAutoUpdateEventListeners();
      }

      if (newMode === "auto") {
        this.startAutoUpdateEventListeners();
      }
    }
  }

  anchorElementChanged() {
    this.requestReset();
  }

  viewportElementChanged() {
    if (this.$fastController.isConnected && this.initialLayoutComplete) {
      this.initialize();
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();

    if (this.autoUpdateMode === "auto") {
      this.startAutoUpdateEventListeners();
    }

    this.initialize();
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    super.disconnectedCallback();

    if (this.autoUpdateMode === "auto") {
      this.stopAutoUpdateEventListeners();
    }

    this.stopObservers();
    this.disconnectResizeDetector();
  }
  /**
   * @internal
   */


  adoptedCallback() {
    this.initialize();
  }
  /**
   * destroys the instance's resize observer
   */


  disconnectResizeDetector() {
    if (this.resizeDetector !== null) {
      this.resizeDetector.disconnect();
      this.resizeDetector = null;
    }
  }
  /**
   * initializes the instance's resize observer
   */


  initializeResizeDetector() {
    this.disconnectResizeDetector();
    this.resizeDetector = new window.ResizeObserver(this.handleResize);
  }
  /**
   * react to attribute changes that don't require a reset
   */


  updateForAttributeChange() {
    if (this.$fastController.isConnected && this.initialLayoutComplete) {
      this.forceUpdate = true;
      this.update();
    }
  }
  /**
   * fully initializes the component
   */


  initialize() {
    this.initializeResizeDetector();

    if (this.anchorElement === null) {
      this.anchorElement = this.getAnchor();
    }

    this.requestReset();
  }
  /**
   * Request a reset if there are currently no open requests
   */


  requestReset() {
    if (this.$fastController.isConnected && this.pendingReset === false) {
      this.setInitialState();
      Updates.enqueue(() => this.reset());
      this.pendingReset = true;
    }
  }
  /**
   * sets the starting configuration for component internal values
   */


  setInitialState() {
    this.initialLayoutComplete = false;
    this.regionVisible = false;
    this.translateX = 0;
    this.translateY = 0;
    this.baseHorizontalOffset = 0;
    this.baseVerticalOffset = 0;
    this.viewportRect = undefined;
    this.regionRect = undefined;
    this.anchorRect = undefined;
    this.verticalPosition = undefined;
    this.horizontalPosition = undefined;
    this.style.opacity = "0";
    this.style.pointerEvents = "none";
    this.forceUpdate = false;
    this.style.position = this.fixedPlacement ? "fixed" : "absolute";
    this.updatePositionClasses();
    this.updateRegionStyle();
  }

}
FASTAnchoredRegion.intersectionService = new IntersectionService();

__decorate([attr], FASTAnchoredRegion.prototype, "anchor", void 0);

__decorate([attr], FASTAnchoredRegion.prototype, "viewport", void 0);

__decorate([attr({
  attribute: "horizontal-positioning-mode"
})], FASTAnchoredRegion.prototype, "horizontalPositioningMode", void 0);

__decorate([attr({
  attribute: "horizontal-default-position"
})], FASTAnchoredRegion.prototype, "horizontalDefaultPosition", void 0);

__decorate([attr({
  attribute: "horizontal-viewport-lock",
  mode: "boolean"
})], FASTAnchoredRegion.prototype, "horizontalViewportLock", void 0);

__decorate([attr({
  attribute: "horizontal-inset",
  mode: "boolean"
})], FASTAnchoredRegion.prototype, "horizontalInset", void 0);

__decorate([attr({
  attribute: "horizontal-threshold"
})], FASTAnchoredRegion.prototype, "horizontalThreshold", void 0);

__decorate([attr({
  attribute: "horizontal-scaling"
})], FASTAnchoredRegion.prototype, "horizontalScaling", void 0);

__decorate([attr({
  attribute: "vertical-positioning-mode"
})], FASTAnchoredRegion.prototype, "verticalPositioningMode", void 0);

__decorate([attr({
  attribute: "vertical-default-position"
})], FASTAnchoredRegion.prototype, "verticalDefaultPosition", void 0);

__decorate([attr({
  attribute: "vertical-viewport-lock",
  mode: "boolean"
})], FASTAnchoredRegion.prototype, "verticalViewportLock", void 0);

__decorate([attr({
  attribute: "vertical-inset",
  mode: "boolean"
})], FASTAnchoredRegion.prototype, "verticalInset", void 0);

__decorate([attr({
  attribute: "vertical-threshold"
})], FASTAnchoredRegion.prototype, "verticalThreshold", void 0);

__decorate([attr({
  attribute: "vertical-scaling"
})], FASTAnchoredRegion.prototype, "verticalScaling", void 0);

__decorate([attr({
  attribute: "fixed-placement",
  mode: "boolean"
})], FASTAnchoredRegion.prototype, "fixedPlacement", void 0);

__decorate([attr({
  attribute: "auto-update-mode"
})], FASTAnchoredRegion.prototype, "autoUpdateMode", void 0);

__decorate([observable], FASTAnchoredRegion.prototype, "anchorElement", void 0);

__decorate([observable], FASTAnchoredRegion.prototype, "viewportElement", void 0);

__decorate([observable], FASTAnchoredRegion.prototype, "initialLayoutComplete", void 0);

/**
 * Values to define the base behavior of an anchored region on a particular axis
 * @public
 */
const AxisPositioningMode = {
  uncontrolled: "uncontrolled",
  locktodefault: "locktodefault",
  dynamic: "dynamic"
};
/**
 * Values to define the scaling behavior of an anchored region on a particular axis
 * @public
 */

const AxisScalingMode = {
  anchor: "anchor",
  content: "content",
  fill: "fill"
};
/**
 * Values for the horizontal positioning options for an anchored region
 * @public
 */

const HorizontalPosition = {
  start: "start",
  end: "end",
  left: "left",
  right: "right",
  center: "center",
  unset: "unset"
};
/**
 * Values for the vertical positioning options for an anchored region
 * @public
 */

const VerticalPosition = {
  top: "top",
  bottom: "bottom",
  center: "center",
  unset: "unset"
};
/**
 * Defines if the component updates its position automatically. Calling update() always provokes an update.
 * anchor - the component only updates its position when the anchor resizes (default)
 * auto - the component updates its position when:
 * - update() is called
 * - the anchor resizes
 * - the window resizes
 * - the viewport resizes
 * - any scroll event in the document
 *
 * @public
 */

const AutoUpdateMode = {
  anchor: "anchor",
  auto: "auto"
};
/**
 * Values to describe the possible positions of the region relative to its anchor.
 * Depending on the axis start = left/top, end = right/bottom
 * @public
 */

const AnchoredRegionPositionLabel = {
  start: "start",
  insetStart: "insetStart",
  insetEnd: "insetEnd",
  end: "end",
  center: "center"
};

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTAnchoredRegion:class)} component.
 * @public
 */

function anchoredRegionTemplate() {
  return html`<template data-loaded="${x => x.initialLayoutComplete ? "loaded" : ""}">${when(x => x.initialLayoutComplete, html`<slot></slot>`)}</template>`;
}

/**
 * The template for {@link @microsoft/fast-foundation#FASTAvatar} component.
 * @public
 */

function avatarTemplate(options = {}) {
  return html`<div class="backplate" part="backplate"><slot name="media">${staticallyCompose(options.media)}</slot><slot></slot></div><slot name="badge"></slot>`;
}

/**
 * An Avatar Custom HTML Element
 *
 * @slot media - Used for media such as an image
 * @slot - The default slot for avatar text, commonly a name or initials
 * @slot badge - Used to provide a badge, such as a status badge
 * @csspart backplate - The wrapping container for the avatar
 * @csspart content - The default slot
 *
 * @public
 */

class FASTAvatar extends FASTElement {}

/**
 * The template for the {@link @microsoft/fast-foundation#FASTBadge} component.
 * @public
 */

function badgeTemplate() {
  return html`<div class="control" part="control"><slot></slot></div>`;
}

/**
 * A Badge Custom HTML Element.
 * @slot - The default slot for the badge
 * @csspart control - The element representing the badge, which wraps the default slot
 *
 * @public
 */

class FASTBadge extends FASTElement {}

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTBreadcrumbItem:class)} component.
 * @public
 */

function breadcrumbItemTemplate(options = {}) {
  return html`<div role="listitem" class="listitem" part="listitem">${anchorTemplate(options).inline()} ${when(x => x.separator, html`<span class="separator" part="separator" aria-hidden="true"><slot name="separator">${staticallyCompose(options.separator)}</slot></span>`)}</div>`;
}

/**
 * A Breadcrumb Item Custom HTML Element.
 *
 * @slot start - Content which can be provided before the breadcrumb content
 * @slot end - Content which can be provided after the breadcrumb content
 * @slot - The default slot for when no href is provided or for providing your own custom elements
 * @slot separator - The slot for providing a custom separator
 * @csspart listitem - The wrapping container for the item, represents a semantic listitem
 * @csspart separator - The wrapping element for the separator
 *
 * @public
 */

class FASTBreadcrumbItem extends FASTAnchor {
  constructor() {
    super(...arguments);
    /**
     * @internal
     */

    this.separator = true;
  }

}

__decorate([observable], FASTBreadcrumbItem.prototype, "separator", void 0);

applyMixins(FASTBreadcrumbItem, StartEnd, DelegatesARIALink);

/**
 * The template for the {@link @microsoft/fast-foundation#FASTBreadcrumb} component.
 * @public
 */

function breadcrumbTemplate() {
  return html`<template role="navigation"><div role="list" class="list" part="list"><slot ${slotted({
    property: "slottedBreadcrumbItems",
    filter: elements()
  })}></slot></div></template>`;
}

/**
 * A Breadcrumb Custom HTML Element.
 * @slot - The default slot for the breadcrumb items
 * @csspart list - The element wrapping the slotted items
 *
 * @public
 */

class FASTBreadcrumb extends FASTElement {
  slottedBreadcrumbItemsChanged() {
    if (this.$fastController.isConnected) {
      if (this.slottedBreadcrumbItems === undefined || this.slottedBreadcrumbItems.length === 0) {
        return;
      }

      const lastNode = this.slottedBreadcrumbItems[this.slottedBreadcrumbItems.length - 1];
      this.slottedBreadcrumbItems.forEach(item => {
        const itemIsLastNode = item === lastNode;
        this.setItemSeparator(item, itemIsLastNode);
        this.setAriaCurrent(item, itemIsLastNode);
      });
    }
  }

  setItemSeparator(item, isLastNode) {
    if (item instanceof FASTBreadcrumbItem) {
      item.separator = !isLastNode;
    }
  }
  /**
   * Finds anchor childnodes in the light DOM or shadow DOM.
   * We look in the shadow DOM because we use an anchor inside the breadcrumb-item template.
   */


  findChildAnchor(node) {
    var _a, _b;

    if (node.childElementCount > 0) {
      return node.querySelector("a");
    } else if ((_a = node.shadowRoot) === null || _a === void 0 ? void 0 : _a.childElementCount) {
      return (_b = node.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector("a");
    } else return node;
  }
  /**
   * Sets ARIA Current for the "current" node
   * `aria-current` is not optional and should be set regardless of the href value of a given anchor
   */


  setAriaCurrent(item, isLastNode) {
    const childNode = this.findChildAnchor(item);

    if (childNode !== null) {
      isLastNode ? childNode.setAttribute("aria-current", "page") : childNode.removeAttribute("aria-current");
    }
  }

}

__decorate([observable], FASTBreadcrumb.prototype, "slottedBreadcrumbItems", void 0);

const proxySlotName = "form-associated-proxy";
const ElementInternalsKey = "ElementInternals";
/**
 * @alpha
 */

const supportsElementInternals = ElementInternalsKey in window && "setFormValue" in window[ElementInternalsKey].prototype;
const InternalsMap = new WeakMap();
/**
 * Base function for providing Custom Element Form Association.
 *
 * @beta
 */

function FormAssociated(BaseCtor) {
  const C = class extends BaseCtor {
    constructor(...args) {
      super(...args);
      /**
       * Track whether the value has been changed from the initial value
       */

      this.dirtyValue = false;
      /**
       * Sets the element's disabled state. A disabled element will not be included during form submission.
       *
       * @remarks
       * HTML Attribute: disabled
       */

      this.disabled = false;
      /**
       * These are events that are still fired by the proxy
       * element based on user / programmatic interaction.
       *
       * The proxy implementation should be transparent to
       * the app author, so block these events from emitting.
       */

      this.proxyEventsToBlock = ["change", "click"];
      this.proxyInitialized = false;
      this.required = false;
      this.initialValue = this.initialValue || "";

      if (!this.elementInternals) {
        // When elementInternals is not supported, formResetCallback is
        // bound to an event listener, so ensure the handler's `this`
        // context is correct.
        this.formResetCallback = this.formResetCallback.bind(this);
      }
    }
    /**
     * Must evaluate to true to enable elementInternals.
     * Feature detects API support and resolve respectively
     *
     * @internal
     */


    static get formAssociated() {
      return supportsElementInternals;
    }
    /**
     * Returns the validity state of the element
     *
     * @beta
     */


    get validity() {
      return this.elementInternals ? this.elementInternals.validity : this.proxy.validity;
    }
    /**
     * Retrieve a reference to the associated form.
     * Returns null if not associated to any form.
     *
     * @beta
     */


    get form() {
      return this.elementInternals ? this.elementInternals.form : this.proxy.form;
    }
    /**
     * Retrieve the localized validation message,
     * or custom validation message if set.
     *
     * @beta
     */


    get validationMessage() {
      return this.elementInternals ? this.elementInternals.validationMessage : this.proxy.validationMessage;
    }
    /**
     * Whether the element will be validated when the
     * form is submitted
     */


    get willValidate() {
      return this.elementInternals ? this.elementInternals.willValidate : this.proxy.willValidate;
    }
    /**
     * A reference to all associated label elements
     */


    get labels() {
      if (this.elementInternals) {
        return Object.freeze(Array.from(this.elementInternals.labels));
      } else if (this.proxy instanceof HTMLElement && this.proxy.ownerDocument && this.id) {
        // Labels associated by wrapping the element: <label><custom-element></custom-element></label>
        const parentLabels = this.proxy.labels; // Labels associated using the `for` attribute

        const forLabels = Array.from(this.proxy.getRootNode().querySelectorAll(`[for='${this.id}']`));
        const labels = parentLabels ? forLabels.concat(Array.from(parentLabels)) : forLabels;
        return Object.freeze(labels);
      } else {
        return emptyArray;
      }
    }
    /**
     * Invoked when the `value` property changes
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `valueChanged` method
     * They must be sure to invoke `super.valueChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */


    valueChanged(previous, next) {
      this.dirtyValue = true;

      if (this.proxy instanceof HTMLElement) {
        this.proxy.value = this.value;
      }

      this.currentValue = this.value;
      this.setFormValue(this.value);
      this.validate();
    }

    currentValueChanged() {
      this.value = this.currentValue;
    }
    /**
     * Invoked when the `initialValue` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `initialValueChanged` method
     * They must be sure to invoke `super.initialValueChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */


    initialValueChanged(previous, next) {
      // If the value is clean and the component is connected to the DOM
      // then set value equal to the attribute value.
      if (!this.dirtyValue) {
        this.value = this.initialValue;
        this.dirtyValue = false;
      }
    }
    /**
     * Invoked when the `disabled` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `disabledChanged` method
     * They must be sure to invoke `super.disabledChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */


    disabledChanged(previous, next) {
      if (this.proxy instanceof HTMLElement) {
        this.proxy.disabled = this.disabled;
      }

      Updates.enqueue(() => this.classList.toggle("disabled", this.disabled));
    }
    /**
     * Invoked when the `name` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `nameChanged` method
     * They must be sure to invoke `super.nameChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */


    nameChanged(previous, next) {
      if (this.proxy instanceof HTMLElement) {
        this.proxy.name = this.name;
      }
    }
    /**
     * Invoked when the `required` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `requiredChanged` method
     * They must be sure to invoke `super.requiredChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */


    requiredChanged(prev, next) {
      if (this.proxy instanceof HTMLElement) {
        this.proxy.required = this.required;
      }

      Updates.enqueue(() => this.classList.toggle("required", this.required));
      this.validate();
    }
    /**
     * The element internals object. Will only exist
     * in browsers supporting the attachInternals API
     */


    get elementInternals() {
      if (!supportsElementInternals) {
        return null;
      }

      let internals = InternalsMap.get(this);

      if (!internals) {
        internals = this.attachInternals();
        InternalsMap.set(this, internals);
      }

      return internals;
    }
    /**
     * @internal
     */


    connectedCallback() {
      super.connectedCallback();
      this.addEventListener("keypress", this._keypressHandler);

      if (!this.value) {
        this.value = this.initialValue;
        this.dirtyValue = false;
      }

      if (!this.elementInternals) {
        this.attachProxy();

        if (this.form) {
          this.form.addEventListener("reset", this.formResetCallback);
        }
      }
    }
    /**
     * @internal
     */


    disconnectedCallback() {
      this.proxyEventsToBlock.forEach(name => this.proxy.removeEventListener(name, this.stopPropagation));

      if (!this.elementInternals && this.form) {
        this.form.removeEventListener("reset", this.formResetCallback);
      }
    }
    /**
     * Return the current validity of the element.
     */


    checkValidity() {
      return this.elementInternals ? this.elementInternals.checkValidity() : this.proxy.checkValidity();
    }
    /**
     * Return the current validity of the element.
     * If false, fires an invalid event at the element.
     */


    reportValidity() {
      return this.elementInternals ? this.elementInternals.reportValidity() : this.proxy.reportValidity();
    }
    /**
     * Set the validity of the control. In cases when the elementInternals object is not
     * available (and the proxy element is used to report validity), this function will
     * do nothing unless a message is provided, at which point the setCustomValidity method
     * of the proxy element will be invoked with the provided message.
     * @param flags - Validity flags
     * @param message - Optional message to supply
     * @param anchor - Optional element used by UA to display an interactive validation UI
     */


    setValidity(flags, message, anchor) {
      if (this.elementInternals) {
        this.elementInternals.setValidity(flags, message, anchor);
      } else if (typeof message === "string") {
        this.proxy.setCustomValidity(message);
      }
    }
    /**
     * Invoked when a connected component's form or fieldset has its disabled
     * state changed.
     * @param disabled - the disabled value of the form / fieldset
     */


    formDisabledCallback(disabled) {
      this.disabled = disabled;
    }

    formResetCallback() {
      this.value = this.initialValue;
      this.dirtyValue = false;
    }
    /**
     * Attach the proxy element to the DOM
     */


    attachProxy() {
      var _a;

      if (!this.proxyInitialized) {
        this.proxyInitialized = true;
        this.proxy.style.display = "none";
        this.proxyEventsToBlock.forEach(name => this.proxy.addEventListener(name, this.stopPropagation)); // These are typically mapped to the proxy during
        // property change callbacks, but during initialization
        // on the initial call of the callback, the proxy is
        // still undefined. We should find a better way to address this.

        this.proxy.disabled = this.disabled;
        this.proxy.required = this.required;

        if (typeof this.name === "string") {
          this.proxy.name = this.name;
        }

        if (typeof this.value === "string") {
          this.proxy.value = this.value;
        }

        this.proxy.setAttribute("slot", proxySlotName);
        this.proxySlot = document.createElement("slot");
        this.proxySlot.setAttribute("name", proxySlotName);
      }

      (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.appendChild(this.proxySlot);
      this.appendChild(this.proxy);
    }
    /**
     * Detach the proxy element from the DOM
     */


    detachProxy() {
      var _a;

      this.removeChild(this.proxy);
      (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.removeChild(this.proxySlot);
    }
    /** {@inheritDoc (FormAssociated:interface).validate} */


    validate(anchor) {
      if (this.proxy instanceof HTMLElement) {
        this.setValidity(this.proxy.validity, this.proxy.validationMessage, anchor);
      }
    }
    /**
     * Associates the provided value (and optional state) with the parent form.
     * @param value - The value to set
     * @param state - The state object provided to during session restores and when autofilling.
     */


    setFormValue(value, state) {
      if (this.elementInternals) {
        this.elementInternals.setFormValue(value, state || value);
      }
    }

    _keypressHandler(e) {
      switch (e.key) {
        case keyEnter:
          if (this.form instanceof HTMLFormElement) {
            // Implicit submission
            const defaultButton = this.form.querySelector("[type=submit]");
            defaultButton === null || defaultButton === void 0 ? void 0 : defaultButton.click();
          }

          break;
      }
    }
    /**
     * Used to stop propagation of proxy element events
     * @param e - Event object
     */


    stopPropagation(e) {
      e.stopPropagation();
    }

  };
  attr({
    mode: "boolean"
  })(C.prototype, "disabled");
  attr({
    mode: "fromView",
    attribute: "value"
  })(C.prototype, "initialValue");
  attr({
    attribute: "current-value"
  })(C.prototype, "currentValue");
  attr(C.prototype, "name");
  attr({
    mode: "boolean"
  })(C.prototype, "required");
  observable(C.prototype, "value");
  return C;
}
/**
 * Creates a checkable form associated component.
 * @beta
 */

function CheckableFormAssociated(BaseCtor) {
  class C extends FormAssociated(BaseCtor) {}

  class D extends C {
    constructor(...args) {
      super(args);
      /**
       * Tracks whether the "checked" property has been changed.
       * This is necessary to provide consistent behavior with
       * normal input checkboxes
       */

      this.dirtyChecked = false;
      /**
       * Provides the default checkedness of the input element
       * Passed down to proxy
       *
       * @public
       * @remarks
       * HTML Attribute: checked
       */

      this.checkedAttribute = false;
      /**
       * The checked state of the control.
       *
       * @public
       */

      this.checked = false; // Re-initialize dirtyChecked because initialization of other values
      // causes it to become true

      this.dirtyChecked = false;
    }

    checkedAttributeChanged() {
      this.defaultChecked = this.checkedAttribute;
    }
    /**
     * @internal
     */


    defaultCheckedChanged() {
      if (!this.dirtyChecked) {
        // Setting this.checked will cause us to enter a dirty state,
        // but if we are clean when defaultChecked is changed, we want to stay
        // in a clean state, so reset this.dirtyChecked
        this.checked = this.defaultChecked;
        this.dirtyChecked = false;
      }
    }

    checkedChanged(prev, next) {
      if (!this.dirtyChecked) {
        this.dirtyChecked = true;
      }

      this.currentChecked = this.checked;
      this.updateForm();

      if (this.proxy instanceof HTMLInputElement) {
        this.proxy.checked = this.checked;
      }

      if (prev !== undefined) {
        this.$emit("change");
      }

      this.validate();
    }

    currentCheckedChanged(prev, next) {
      this.checked = this.currentChecked;
    }

    updateForm() {
      const value = this.checked ? this.value : null;
      this.setFormValue(value, value);
    }

    connectedCallback() {
      super.connectedCallback();
      this.updateForm();
    }

    formResetCallback() {
      super.formResetCallback();
      this.checked = !!this.checkedAttribute;
      this.dirtyChecked = false;
    }

  }

  attr({
    attribute: "checked",
    mode: "boolean"
  })(D.prototype, "checkedAttribute");
  attr({
    attribute: "current-checked",
    converter: booleanConverter
  })(D.prototype, "currentChecked");
  observable(D.prototype, "defaultChecked");
  observable(D.prototype, "checked");
  return D;
}

class _Button extends FASTElement {}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(FASTButton:class)} component.
 *
 * @beta
 */


class FormAssociatedButton extends FormAssociated(_Button) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }

}

/**
 * Button type values.
 *
 * @public
 */
const ButtonType = {
  submit: "submit",
  reset: "reset",
  button: "button"
};

/**
 * A Button Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element }.
 *
 * @slot start - Content which can be provided before the button content
 * @slot end - Content which can be provided after the button content
 * @slot - The default slot for button content
 * @csspart control - The button element
 * @csspart content - The element wrapping button content
 *
 * @public
 */

class FASTButton extends FormAssociatedButton {
  constructor() {
    super(...arguments);
    /**
     * Submits the parent form
     */

    this.handleSubmission = () => {
      if (!this.form) {
        return;
      }

      const attached = this.proxy.isConnected;

      if (!attached) {
        this.attachProxy();
      } // Browser support for requestSubmit is not comprehensive
      // so click the proxy if it isn't supported


      typeof this.form.requestSubmit === "function" ? this.form.requestSubmit(this.proxy) : this.proxy.click();

      if (!attached) {
        this.detachProxy();
      }
    };
    /**
     * Resets the parent form
     */


    this.handleFormReset = () => {
      var _a;

      (_a = this.form) === null || _a === void 0 ? void 0 : _a.reset();
    };
  }

  formactionChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.formAction = this.formaction;
    }
  }

  formenctypeChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.formEnctype = this.formenctype;
    }
  }

  formmethodChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.formMethod = this.formmethod;
    }
  }

  formnovalidateChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.formNoValidate = this.formnovalidate;
    }
  }

  formtargetChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.formTarget = this.formtarget;
    }
  }

  typeChanged(previous, next) {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.type = this.type;
    }

    next === ButtonType.submit && this.addEventListener("click", this.handleSubmission);
    previous === ButtonType.submit && this.removeEventListener("click", this.handleSubmission);
    next === ButtonType.reset && this.addEventListener("click", this.handleFormReset);
    previous === ButtonType.reset && this.removeEventListener("click", this.handleFormReset);
  }
  /** {@inheritDoc (FormAssociated:interface).validate} */


  validate() {
    super.validate(this.control);
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.proxy.setAttribute("type", this.type);
  }

}

__decorate([attr({
  mode: "boolean"
})], FASTButton.prototype, "autofocus", void 0);

__decorate([attr({
  attribute: "form"
})], FASTButton.prototype, "formId", void 0);

__decorate([attr], FASTButton.prototype, "formaction", void 0);

__decorate([attr], FASTButton.prototype, "formenctype", void 0);

__decorate([attr], FASTButton.prototype, "formmethod", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTButton.prototype, "formnovalidate", void 0);

__decorate([attr], FASTButton.prototype, "formtarget", void 0);

__decorate([attr], FASTButton.prototype, "type", void 0);

__decorate([observable], FASTButton.prototype, "defaultSlottedContent", void 0);
/**
 * Includes ARIA states and properties relating to the ARIA button role
 *
 * @public
 */


class DelegatesARIAButton {}

__decorate([attr({
  attribute: "aria-expanded"
})], DelegatesARIAButton.prototype, "ariaExpanded", void 0);

__decorate([attr({
  attribute: "aria-pressed"
})], DelegatesARIAButton.prototype, "ariaPressed", void 0);

applyMixins(DelegatesARIAButton, ARIAGlobalStatesAndProperties);
applyMixins(FASTButton, StartEnd, DelegatesARIAButton);

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTButton:class)} component.
 * @public
 */

function buttonTemplate(options = {}) {
  return html`<button class="control" part="control" ?autofocus="${x => x.autofocus}" ?disabled="${x => x.disabled}" form="${x => x.formId}" formaction="${x => x.formaction}" formenctype="${x => x.formenctype}" formmethod="${x => x.formmethod}" ?formnovalidate="${x => x.formnovalidate}" formtarget="${x => x.formtarget}" name="${x => x.name}" type="${x => x.type}" value="${x => x.value}" aria-atomic="${x => x.ariaAtomic}" aria-busy="${x => x.ariaBusy}" aria-controls="${x => x.ariaControls}" aria-current="${x => x.ariaCurrent}" aria-describedby="${x => x.ariaDescribedby}" aria-details="${x => x.ariaDetails}" aria-disabled="${x => x.ariaDisabled}" aria-errormessage="${x => x.ariaErrormessage}" aria-expanded="${x => x.ariaExpanded}" aria-flowto="${x => x.ariaFlowto}" aria-haspopup="${x => x.ariaHaspopup}" aria-hidden="${x => x.ariaHidden}" aria-invalid="${x => x.ariaInvalid}" aria-keyshortcuts="${x => x.ariaKeyshortcuts}" aria-label="${x => x.ariaLabel}" aria-labelledby="${x => x.ariaLabelledby}" aria-live="${x => x.ariaLive}" aria-owns="${x => x.ariaOwns}" aria-pressed="${x => x.ariaPressed}" aria-relevant="${x => x.ariaRelevant}" aria-roledescription="${x => x.ariaRoledescription}" ${ref("control")}>${startSlotTemplate(options)}<span class="content" part="content"><slot ${slotted("defaultSlottedContent")}></slot></span>${endSlotTemplate(options)}</button>`;
}

/**
 * Day format values for DateFormatter.
 * @public
 */
const DayFormat = {
  "2-digit": "2-digit",
  numeric: "numeric"
};
/**
 * Weekday format values for DateFormatter.
 * @public
 */

const WeekdayFormat = {
  long: "long",
  narrow: "narrow",
  short: "short"
};
/**
 * Month format values for DateFormatter.
 * @public
 */

const MonthFormat = {
  "2-digit": "2-digit",
  numeric: "numeric",
  short: "short",
  long: "long",
  narrow: "narrow"
};
/**
 * Year format values for DateFormatter.
 * @public
 */

const YearFormat = {
  "2-digit": "2-digit",
  numeric: "numeric"
};

/**
 * Date formatting utility
 * @public
 */

class DateFormatter {
  constructor(config) {
    /**
     * Formatting for the day
     * @public
     */
    this.dayFormat = DayFormat.numeric;
    /**
     * Formatting for the weekday labels
     * @public
     */

    this.weekdayFormat = WeekdayFormat.long;
    /**
     * Formatting for the month
     * @public
     */

    this.monthFormat = MonthFormat.long;
    /**
     * Formatting for the year
     * @public
     */

    this.yearFormat = YearFormat.numeric;
    /**
     * Date used for formatting
     */

    this.date = new Date();
    /**
     * Add properties on construction
     */

    if (config) {
      for (const key in config) {
        const value = config[key];

        if (key === "date") {
          this.date = this.getDateObject(value);
        } else {
          this[key] = value;
        }
      }
    }
  }
  /**
   * Helper function to make sure that the DateFormatter is working with an instance of Date
   * @param date - The date as an object, string or Date insance
   * @returns - A Date instance
   * @public
   */


  getDateObject(date) {
    if (typeof date === "string") {
      const dates = date.split(/[/-]/);

      if (dates.length < 3) {
        return new Date();
      }

      return new Date(parseInt(dates[2], 10), parseInt(dates[0], 10) - 1, parseInt(dates[1], 10));
    } else if ("day" in date && "month" in date && "year" in date) {
      const {
        day,
        month,
        year
      } = date;
      return new Date(year, month - 1, day);
    }

    return date;
  }
  /**
   *
   * @param date - a valide date as either a Date, string, objec or a DateFormatter
   * @param format - The formatting for the string
   * @param locale - locale data used for formatting
   * @returns A localized string of the date provided
   * @public
   */


  getDate(date = this.date, format = {
    weekday: this.weekdayFormat,
    month: this.monthFormat,
    day: this.dayFormat,
    year: this.yearFormat
  }, locale = this.locale) {
    const dateObj = this.getDateObject(date);

    if (!dateObj.getTime()) {
      return "";
    }

    const optionsWithTimeZone = Object.assign({
      timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
    }, format);
    return new Intl.DateTimeFormat(locale, optionsWithTimeZone).format(dateObj);
  }
  /**
   *
   * @param day - Day to localize
   * @param format - The formatting for the day
   * @param locale - The locale data used for formatting
   * @returns - A localized number for the day
   * @public
   */


  getDay(day = this.date.getDate(), format = this.dayFormat, locale = this.locale) {
    return this.getDate({
      month: 1,
      day,
      year: 2020
    }, {
      day: format
    }, locale);
  }
  /**
   *
   * @param month - The month to localize
   * @param format - The formatting for the month
   * @param locale - The locale data used for formatting
   * @returns - A localized name of the month
   * @public
   */


  getMonth(month = this.date.getMonth() + 1, format = this.monthFormat, locale = this.locale) {
    return this.getDate({
      month,
      day: 2,
      year: 2020
    }, {
      month: format
    }, locale);
  }
  /**
   *
   * @param year - The year to localize
   * @param format - The formatting for the year
   * @param locale - The locale data used for formatting
   * @returns - A localized string for the year
   * @public
   */


  getYear(year = this.date.getFullYear(), format = this.yearFormat, locale = this.locale) {
    return this.getDate({
      month: 2,
      day: 2,
      year
    }, {
      year: format
    }, locale);
  }
  /**
   *
   * @param weekday - The number of the weekday, defaults to Sunday
   * @param format - The formatting for the weekday label
   * @param locale - The locale data used for formatting
   * @returns - A formatted weekday label
   * @public
   */


  getWeekday(weekday = 0, format = this.weekdayFormat, locale = this.locale) {
    const date = `1-${weekday + 1}-2017`;
    return this.getDate(date, {
      weekday: format
    }, locale);
  }
  /**
   *
   * @param format - The formatting for the weekdays
   * @param locale - The locale data used for formatting
   * @returns - An array of the weekday labels
   * @public
   */


  getWeekdays(format = this.weekdayFormat, locale = this.locale) {
    return Array(7).fill(null).map((_, day) => this.getWeekday(day, format, locale));
  }

}

/**
 * Calendar component
 *
 * @slot start - Content which can be provided before the calendar content
 * @slot end - Content which can be provided after the calendar content
 * @slot - The default slot for calendar content
 * @fires dateselected - Fires a custom 'dateselected' event when Enter is invoked via keyboard on a date
 *
 * @public
 */

class FASTCalendar extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * date formatter utitlity for getting localized strings
     * @public
     */

    this.dateFormatter = new DateFormatter();
    /**
     * Readonly attribute for turning off data-grid
     * @public
     */

    this.readonly = false;
    /**
     * String repesentation of the full locale including market, calendar type and numbering system
     * @public
     */

    this.locale = "en-US";
    /**
     * Weekday that the calendar should start on, defaults to Sunday
     * @public
     */

    this.firstDay = 0;
    /**
     * Month to display
     * @public
     */

    this.month = new Date().getMonth() + 1;
    /**
     * Year of the month to display
     * @public
     */

    this.year = new Date().getFullYear();
    /**
     * Format style for the day
     * @public
     */

    this.dayFormat = DayFormat.numeric;
    /**
     * Format style for the week day labels
     * @public
     */

    this.weekdayFormat = WeekdayFormat.short;
    /**
     * Format style for the month label
     * @public
     */

    this.monthFormat = MonthFormat.long;
    /**
     * Format style for the year used in the title
     * @public
     */

    this.yearFormat = YearFormat.numeric;
    /**
     * Minimum number of weeks to show for the month
     * This can be used to normalize the calendar view
     *  when changing or across multiple calendars
     * @public
     */

    this.minWeeks = 0;
    /**
     * A list of dates that should be shown as disabled
     * @public
     */

    this.disabledDates = "";
    /**
     * A list of dates that should be shown as highlighted
     * @public
     */

    this.selectedDates = "";
    /**
     * The number of miliseconds in a day
     * @internal
     */

    this.oneDayInMs = 86400000;
  }

  localeChanged() {
    this.dateFormatter.locale = this.locale;
  }

  dayFormatChanged() {
    this.dateFormatter.dayFormat = this.dayFormat;
  }

  weekdayFormatChanged() {
    this.dateFormatter.weekdayFormat = this.weekdayFormat;
  }

  monthFormatChanged() {
    this.dateFormatter.monthFormat = this.monthFormat;
  }

  yearFormatChanged() {
    this.dateFormatter.yearFormat = this.yearFormat;
  }
  /**
   * Gets data needed to render about a calendar month as well as the previous and next months
   * @param year - year of the calendar
   * @param month - month of the calendar
   * @returns - an object with data about the current and 2 surrounding months
   * @public
   */


  getMonthInfo(month = this.month, year = this.year) {
    const getFirstDay = date => new Date(date.getFullYear(), date.getMonth(), 1).getDay();

    const getLength = date => {
      const nextMonth = new Date(date.getFullYear(), date.getMonth() + 1, 1);
      return new Date(nextMonth.getTime() - this.oneDayInMs).getDate();
    };

    const thisMonth = new Date(year, month - 1);
    const nextMonth = new Date(year, month);
    const previousMonth = new Date(year, month - 2);
    return {
      length: getLength(thisMonth),
      month,
      start: getFirstDay(thisMonth),
      year,
      previous: {
        length: getLength(previousMonth),
        month: previousMonth.getMonth() + 1,
        start: getFirstDay(previousMonth),
        year: previousMonth.getFullYear()
      },
      next: {
        length: getLength(nextMonth),
        month: nextMonth.getMonth() + 1,
        start: getFirstDay(nextMonth),
        year: nextMonth.getFullYear()
      }
    };
  }
  /**
   * A list of calendar days
   * @param info - an object containing the information needed to render a calendar month
   * @param minWeeks - minimum number of weeks to show
   * @returns a list of days in a calendar month
   * @public
   */


  getDays(info = this.getMonthInfo(), minWeeks = this.minWeeks) {
    minWeeks = minWeeks > 10 ? 10 : minWeeks;
    const {
      length,
      previous,
      next
    } = info;
    let start = info.start - Math.min(Math.max(0, this.firstDay), 6);
    start = start < 0 ? 7 + start : start;
    const days = [];
    let dayCount = 1 - start;

    while (dayCount < length + 1 || days.length < minWeeks || days[days.length - 1].length % 7 !== 0) {
      const {
        month,
        year
      } = dayCount < 1 ? previous : dayCount > length ? next : info;
      const day = dayCount < 1 ? previous.length + dayCount : dayCount > length ? dayCount - length : dayCount;
      const dateString = `${month}-${day}-${year}`;
      const disabled = this.dateInString(dateString, this.disabledDates);
      const selected = this.dateInString(dateString, this.selectedDates);
      const date = {
        day,
        month,
        year,
        disabled,
        selected
      };
      const target = days[days.length - 1];

      if (days.length === 0 || target.length % 7 === 0) {
        days.push([date]);
      } else {
        target.push(date);
      }

      dayCount++;
    }

    return days;
  }
  /**
   * A helper function that checks if a date exists in a list of dates
   * @param date - A date objec that includes the day, month and year
   * @param datesString - a comma separated list of dates
   * @returns - Returns true if it found the date in the list of dates
   * @public
   */


  dateInString(date, datesString) {
    const dates = datesString.split(",").map(str => str.trim());
    date = typeof date === "string" ? date : `${date.getMonth() + 1}-${date.getDate()}-${date.getFullYear()}`;
    return dates.some(d => d === date);
  }
  /**
   * Creates a class string for the day container
   * @param date - date of the calendar cell
   * @returns - string of class names
   * @public
   */


  getDayClassNames(date, todayString) {
    const {
      day,
      month,
      year,
      disabled,
      selected
    } = date;
    const today = todayString === `${month}-${day}-${year}`;
    const inactive = this.month !== month;
    return ["day", today && "today", inactive && "inactive", disabled && "disabled", selected && "selected"].filter(Boolean).join(" ");
  }
  /**
   * Returns a list of weekday labels
   * @returns An array of weekday text and full text if abbreviated
   * @public
   */


  getWeekdayText() {
    const weekdayText = this.dateFormatter.getWeekdays().map(text => ({
      text
    }));

    if (this.weekdayFormat !== "long") {
      const longText = this.dateFormatter.getWeekdays("long");
      weekdayText.forEach((weekday, index) => {
        weekday.abbr = longText[index];
      });
    }

    const firstDay = Math.min(Math.max(0, this.firstDay), 6);
    return [...weekdayText.slice(firstDay), ...weekdayText.slice(0, firstDay)];
  }
  /**
   * Emits the "date-select" event with the day, month and year.
   * @param date - Date cell
   * @public
   */


  handleDateSelect(event, day) {
    event.preventDefault;
    this.$emit("dateselected", day);
  }
  /**
   * Handles keyboard events on a cell
   * @param event - Keyboard event
   * @param date - Date of the cell selected
   */


  handleKeydown(event, date) {
    if (event.key === keyEnter) {
      this.handleDateSelect(event, date);
    }

    return true;
  }

}

__decorate([attr({
  mode: "boolean"
})], FASTCalendar.prototype, "readonly", void 0);

__decorate([attr], FASTCalendar.prototype, "locale", void 0);

__decorate([attr({
  attribute: "first-day",
  converter: nullableNumberConverter
})], FASTCalendar.prototype, "firstDay", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTCalendar.prototype, "month", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTCalendar.prototype, "year", void 0);

__decorate([attr({
  attribute: "day-format",
  mode: "fromView"
})], FASTCalendar.prototype, "dayFormat", void 0);

__decorate([attr({
  attribute: "weekday-format",
  mode: "fromView"
})], FASTCalendar.prototype, "weekdayFormat", void 0);

__decorate([attr({
  attribute: "month-format",
  mode: "fromView"
})], FASTCalendar.prototype, "monthFormat", void 0);

__decorate([attr({
  attribute: "year-format",
  mode: "fromView"
})], FASTCalendar.prototype, "yearFormat", void 0);

__decorate([attr({
  attribute: "min-weeks",
  converter: nullableNumberConverter
})], FASTCalendar.prototype, "minWeeks", void 0);

__decorate([attr({
  attribute: "disabled-dates"
})], FASTCalendar.prototype, "disabledDates", void 0);

__decorate([attr({
  attribute: "selected-dates"
})], FASTCalendar.prototype, "selectedDates", void 0);

applyMixins(FASTCalendar, StartEnd);

/**
 * A basic Calendar title template that includes the month and year
 * @returns - A calendar title template
 * @public
 */

function calendarTitleTemplate() {
  return html`<div class="title" part="title" aria-label="${x => x.dateFormatter.getDate(`${x.month}-2-${x.year}`, {
    month: "long",
    year: "numeric"
  })}"><span part="month">${x => x.dateFormatter.getMonth(x.month)}</span><span part="year">${x => x.dateFormatter.getYear(x.year)}</span></div>`;
}
/**
 * Calendar weekday label template
 * @returns - The weekday labels template
 * @public
 */

function calendarWeekdayTemplate(options) {
  const cellTag = html.partial(tagFor(options.dataGridCell));
  return html`<${cellTag} class="week-day" part="week-day" tabindex="-1" grid-column="${(x, c) => c.index + 1}" abbr="${x => x.abbr}">${x => x.text}</${cellTag}>`;
}
/**
 * A calendar day template
 * @param context - Element definition context for getting the cell tag for calendar-cell
 * @param todayString - A string representation for todays date
 * @returns - A calendar cell template for a given date
 * @public
 */

function calendarCellTemplate(options, todayString) {
  const cellTag = html.partial(tagFor(options.dataGridCell));
  return html`<${cellTag} class="${(x, c) => c.parentContext.parent.getDayClassNames(x, todayString)}" part="day" tabindex="-1" role="gridcell" grid-column="${(x, c) => c.index + 1}" @click="${(x, c) => c.parentContext.parent.handleDateSelect(c.event, x)}" @keydown="${(x, c) => c.parentContext.parent.handleKeydown(c.event, x)}" aria-label="${(x, c) => c.parentContext.parent.dateFormatter.getDate(`${x.month}-${x.day}-${x.year}`, {
    month: "long",
    day: "numeric"
  })}"><div class="date" part="${x => todayString === `${x.month}-${x.day}-${x.year}` ? "today" : "date"}">${(x, c) => c.parentContext.parent.dateFormatter.getDay(x.day)}</div><slot name="${x => x.month}-${x => x.day}-${x => x.year}"></slot></${cellTag}>`;
}
/**
 *
 * @param context - Element definition context for getting the cell tag for calendar-cell
 * @param todayString - A string representation for todays date
 * @returns - A template for a week of days
 * @public
 */

function calendarRowTemplate(options, todayString) {
  const rowTag = html.partial(tagFor(options.dataGridRow));
  return html`<${rowTag} class="week" part="week" role="row" role-type="default" grid-template-columns="1fr 1fr 1fr 1fr 1fr 1fr 1fr">${repeat(x => x, calendarCellTemplate(options, todayString), {
    positioning: true
  })}</${rowTag}>`;
}
/**
 * Interactive template using DataGrid
 * @param context - The templates context
 * @param todayString - string representation of todays date
 * @returns - interactive calendar template
 *
 * @internal
 */

function interactiveCalendarGridTemplate(options, todayString) {
  const gridTag = html.partial(tagFor(options.dataGrid));
  const rowTag = html.partial(tagFor(options.dataGridRow));
  return html`<${gridTag} class="days interact" part="days" generate-header="none"><${rowTag} class="week-days" part="week-days" role="row" row-type="header" grid-template-columns="1fr 1fr 1fr 1fr 1fr 1fr 1fr">${repeat(x => x.getWeekdayText(), calendarWeekdayTemplate(options), {
    positioning: true
  })}</${rowTag}>${repeat(x => x.getDays(), calendarRowTemplate(options, todayString))}</${gridTag}>`;
}
/**
 * Non-interactive calendar template used for a readonly calendar
 * @param todayString - string representation of todays date
 * @returns - non-interactive calendar template
 *
 * @internal
 */

function noninteractiveCalendarTemplate(options, todayString) {
  return html`<div class="days" part="days"><div class="week-days" part="week-days">${repeat(x => x.getWeekdayText(), html`<div class="week-day" part="week-day" abbr="${x => x.abbr}">${x => x.text}</div>`)}</div>${repeat(x => x.getDays(), html`<div class="week">${repeat(x => x, html`<div class="${(x, c) => c.parentContext.parent.getDayClassNames(x, todayString)}" part="day" aria-label="${(x, c) => c.parentContext.parent.dateFormatter.getDate(`${x.month}-${x.day}-${x.year}`, {
    month: "long",
    day: "numeric"
  })}"><div class="date" part="${x => todayString === `${x.month}-${x.day}-${x.year}` ? "today" : "date"}">${(x, c) => c.parentContext.parent.dateFormatter.getDay(x.day)}</div><slot name="${x => x.month}-${x => x.day}-${x => x.year}"></slot></div>`)}</div>`)}</div>`;
}
/**
 * The template for the {@link @microsoft/fast-foundation#(FASTCalendar:class)} component.
 *
 * @param context - Element definition context for getting the cell tag for calendar-cell
 * @param definition - Foundation element definition
 * @returns - a template for a calendar month
 * @public
 */

function calendarTemplate(options) {
  const today = new Date();
  const todayString = `${today.getMonth() + 1}-${today.getDate()}-${today.getFullYear()}`;
  return html`<template>${startSlotTemplate(options)} ${staticallyCompose(options.title)}<slot></slot>${when(x => x.readonly === false, interactiveCalendarGridTemplate(options, todayString))} ${when(x => x.readonly === true, noninteractiveCalendarTemplate(options, todayString))} ${endSlotTemplate(options)}</template>`;
}

/**
 * The template for the {@link @microsoft/fast-foundation#FASTCard} component.
 * @public
 */

function cardTemplate() {
  return html`<slot></slot>`;
}

/**
 * An Card Custom HTML Element.
 *
 * @slot - The default slot for the card content
 *
 * @public
 */

class FASTCard extends FASTElement {}

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTCheckbox:class)} component.
 * @public
 */

function checkboxTemplate(options = {}) {
  return html`<template role="checkbox" aria-checked="${x => x.indeterminate ? "mixed" : x.checked}" aria-required="${x => x.required}" aria-disabled="${x => x.disabled}" tabindex="${x => x.disabled ? null : 0}" @keypress="${(x, c) => x.keypressHandler(c.event)}" @click="${(x, c) => x.clickHandler(c.event)}"><div part="control" class="control"><slot name="checked-indicator">${staticallyCompose(options.checkedIndicator)}</slot><slot name="indeterminate-indicator">${staticallyCompose(options.indeterminateIndicator)}</slot></div><label part="label" class="${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"><slot ${slotted("defaultSlottedNodes")}></slot></label></template>`;
}

class _Checkbox extends FASTElement {}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(Checkbox:class)} component.
 *
 * @beta
 */


class FormAssociatedCheckbox extends CheckableFormAssociated(_Checkbox) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }

}

/**
 * A Checkbox Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#checkbox | ARIA checkbox }.
 *
 * @slot checked-indicator - The checked indicator
 * @slot indeterminate-indicator - The indeterminate indicator
 * @slot - The default slot for the label
 * @csspart control - The element representing the visual checkbox control
 * @csspart label - The label
 * @fires change - Emits a custom change event when the checked state changes
 *
 * @public
 */

class FASTCheckbox extends FormAssociatedCheckbox {
  constructor() {
    super();
    /**
     * The element's value to be included in form submission when checked.
     * Default to "on" to reach parity with input[type="checkbox"]
     *
     * @internal
     */

    this.initialValue = "on";
    /**
     * The indeterminate state of the control
     */

    this.indeterminate = false;
    /**
     * @internal
     */

    this.keypressHandler = e => {
      if (this.disabled) {
        return;
      }

      switch (e.key) {
        case keySpace:
          this.toggleChecked();
          break;
      }
    };
    /**
     * @internal
     */


    this.clickHandler = e => {
      if (!this.disabled) {
        this.toggleChecked();
      }
    };

    this.proxy.setAttribute("type", "checkbox");
  }

  toggleChecked() {
    if (this.indeterminate) {
      this.indeterminate = false;
    }

    this.checked = !this.checked;
  }

}

__decorate([observable], FASTCheckbox.prototype, "defaultSlottedNodes", void 0);

__decorate([observable], FASTCheckbox.prototype, "indeterminate", void 0);

function getSide(placement) {
  return placement.split('-')[0];
}

function getAlignment(placement) {
  return placement.split('-')[1];
}

function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';
}

function getLengthFromAxis(axis) {
  return axis === 'y' ? 'height' : 'width';
}

function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const mainAxis = getMainAxisFromPlacement(placement);
  const length = getLengthFromAxis(mainAxis);
  const commonAlign = reference[length] / 2 - floating[length] / 2;
  const side = getSide(placement);
  const isVertical = mainAxis === 'x';
  let coords;

  switch (side) {
    case 'top':
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;

    case 'bottom':
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case 'right':
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case 'left':
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;

    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }

  switch (getAlignment(placement)) {
    case 'start':
      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;

    case 'end':
      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }

  return coords;
}
/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a reference element when it is given a certain positioning strategy.
 *
 * This export does not have any `platform` interface logic. You will need to
 * write one for the platform you are using Floating UI with.
 */


const computePosition$1 = async (reference, floating, config) => {
  const {
    placement = 'bottom',
    strategy = 'absolute',
    middleware = [],
    platform
  } = config;
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));

  if (process.env.NODE_ENV !== "production") {
    if (platform == null) {
      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));
    }

    if (middleware.filter(_ref => {
      let {
        name
      } = _ref;
      return name === 'autoPlacement' || name === 'flip';
    }).length > 1) {
      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement`', 'middleware detected. This will lead to an infinite loop. Ensure only', 'one of either has been passed to the `middleware` array.'].join(' '));
    }
  }

  let rects = await platform.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;

  for (let i = 0; i < middleware.length; i++) {
    const {
      name,
      fn
    } = middleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = { ...middlewareData,
      [name]: { ...middlewareData[name],
        ...data
      }
    };

    if (process.env.NODE_ENV !== "production") {
      if (resetCount > 50) {
        console.warn(['Floating UI: The middleware lifecycle appears to be running in an', 'infinite loop. This is usually caused by a `reset` continually', 'being returned without a break condition.'].join(' '));
      }
    }

    if (reset && resetCount <= 50) {
      resetCount++;

      if (typeof reset === 'object') {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }

        if (reset.rects) {
          rects = reset.rects === true ? await platform.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }

        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }

      i = -1;
      continue;
    }
  }

  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};

function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}

function getSideObjectFromPadding(padding) {
  return typeof padding !== 'number' ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}

function rectToClientRect(rect) {
  return { ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
/**
 * Resolves with an object of overflow side offsets that determine how much the
 * element is overflowing a given clipping boundary.
 * - positive = overflowing the boundary by that number of pixels
 * - negative = how many pixels left before it will overflow
 * - 0 = lies flush with the boundary
 * @see https://floating-ui.com/docs/detectOverflow
 */


async function detectOverflow(middlewareArguments, options) {
  var _await$platform$isEle;

  if (options === void 0) {
    options = {};
  }

  const {
    x,
    y,
    platform,
    rects,
    elements,
    strategy
  } = middlewareArguments;
  const {
    boundary = 'clippingAncestors',
    rootBoundary = 'viewport',
    elementContext = 'floating',
    altBoundary = false,
    padding = 0
  } = options;
  const paddingObject = getSideObjectFromPadding(padding);
  const altContext = elementContext === 'floating' ? 'reference' : 'floating';
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform.getClippingRect({
    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),
    boundary,
    rootBoundary,
    strategy
  }));
  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect: elementContext === 'floating' ? { ...rects.floating,
      x,
      y
    } : rects.reference,
    offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),
    strategy
  }) : rects[elementContext]);
  return {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
}

const min$1 = Math.min;
const max$1 = Math.max;

function within(min$1$1, value, max$1$1) {
  return max$1(min$1$1, min$1(value, max$1$1));
}

const hash$1 = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};

function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);
}

function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }

  const alignment = getAlignment(placement);
  const mainAxis = getMainAxisFromPlacement(placement);
  const length = getLengthFromAxis(mainAxis);
  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';

  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }

  return {
    main: mainAlignmentSide,
    cross: getOppositePlacement(mainAlignmentSide)
  };
}

const hash = {
  start: 'end',
  end: 'start'
};

function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, matched => hash[matched]);
}

const sides = ['top', 'right', 'bottom', 'left'];

function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
/**
 * Changes the placement of the floating element to one that will fit if the
 * initially specified `placement` does not.
 * @see https://floating-ui.com/docs/flip
 */


const flip = function (options) {
  if (options === void 0) {
    options = {};
  }

  return {
    name: 'flip',
    options,

    async fn(middlewareArguments) {
      var _middlewareData$flip;

      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform,
        elements
      } = middlewareArguments;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = 'bestFit',
        flipAlignment = true,
        ...detectOverflowOptions
      } = options;
      const side = getSide(placement);
      const isBasePlacement = side === initialPlacement;
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];

      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }

      if (checkCrossAxis) {
        const {
          main,
          cross
        } = getAlignmentSides(placement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));
        overflows.push(overflow[main], overflow[cross]);
      }

      overflowsData = [...overflowsData, {
        placement,
        overflows
      }]; // One or more sides is overflowing

      if (!overflows.every(side => side <= 0)) {
        var _middlewareData$flip$, _middlewareData$flip2;

        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;
        const nextPlacement = placements[nextIndex];

        if (nextPlacement) {
          // Try next placement and re-run the lifecycle
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }

        let resetPlacement = 'bottom';

        switch (fallbackStrategy) {
          case 'bestFit':
            {
              var _overflowsData$map$so;

              const placement = (_overflowsData$map$so = overflowsData.map(d => [d, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;

              if (placement) {
                resetPlacement = placement;
              }

              break;
            }

          case 'initialPlacement':
            resetPlacement = initialPlacement;
            break;
        }

        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }

      return {};
    }

  };
};

function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}

function isAnySideFullyClipped(overflow) {
  return sides.some(side => overflow[side] >= 0);
}
/**
 * Provides data to hide the floating element in applicable situations, such as
 * when it is not in the same clipping context as the reference element.
 * @see https://floating-ui.com/docs/hide
 */


const hide = function (_temp) {
  let {
    strategy = 'referenceHidden',
    ...detectOverflowOptions
  } = _temp === void 0 ? {} : _temp;
  return {
    name: 'hide',

    async fn(middlewareArguments) {
      const {
        rects
      } = middlewareArguments;

      switch (strategy) {
        case 'referenceHidden':
          {
            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,
              elementContext: 'reference'
            });
            const offsets = getSideOffsets(overflow, rects.reference);
            return {
              data: {
                referenceHiddenOffsets: offsets,
                referenceHidden: isAnySideFullyClipped(offsets)
              }
            };
          }

        case 'escaped':
          {
            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,
              altBoundary: true
            });
            const offsets = getSideOffsets(overflow, rects.floating);
            return {
              data: {
                escapedOffsets: offsets,
                escaped: isAnySideFullyClipped(offsets)
              }
            };
          }

        default:
          {
            return {};
          }
      }
    }

  };
};

function getCrossAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}
/**
 * Shifts the floating element in order to keep it in view when it will overflow
 * a clipping boundary.
 * @see https://floating-ui.com/docs/shift
 */


const shift = function (options) {
  if (options === void 0) {
    options = {};
  }

  return {
    name: 'shift',
    options,

    async fn(middlewareArguments) {
      const {
        x,
        y,
        placement
      } = middlewareArguments;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: _ref => {
            let {
              x,
              y
            } = _ref;
            return {
              x,
              y
            };
          }
        },
        ...detectOverflowOptions
      } = options;
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);
      const mainAxis = getMainAxisFromPlacement(getSide(placement));
      const crossAxis = getCrossAxis(mainAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];

      if (checkMainAxis) {
        const minSide = mainAxis === 'y' ? 'top' : 'left';
        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';
        const min = mainAxisCoord + overflow[minSide];
        const max = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = within(min, mainAxisCoord, max);
      }

      if (checkCrossAxis) {
        const minSide = crossAxis === 'y' ? 'top' : 'left';
        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';
        const min = crossAxisCoord + overflow[minSide];
        const max = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = within(min, crossAxisCoord, max);
      }

      const limitedCoords = limiter.fn({ ...middlewareArguments,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return { ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y
        }
      };
    }

  };
};
/**
 * Provides data to change the size of the floating element. For instance,
 * prevent it from overflowing its clipping boundary or match the width of the
 * reference element.
 * @see https://floating-ui.com/docs/size
 */


const size = function (options) {
  if (options === void 0) {
    options = {};
  }

  return {
    name: 'size',
    options,

    async fn(middlewareArguments) {
      const {
        placement,
        rects,
        platform,
        elements
      } = middlewareArguments;
      const {
        apply = () => {},
        ...detectOverflowOptions
      } = options;
      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      let heightSide;
      let widthSide;

      if (side === 'top' || side === 'bottom') {
        heightSide = side;
        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';
      } else {
        widthSide = side;
        heightSide = alignment === 'end' ? 'top' : 'bottom';
      }

      const xMin = max$1(overflow.left, 0);
      const xMax = max$1(overflow.right, 0);
      const yMin = max$1(overflow.top, 0);
      const yMax = max$1(overflow.bottom, 0);
      const dimensions = {
        availableHeight: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max$1(overflow.top, overflow.bottom)) : overflow[heightSide]),
        availableWidth: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max$1(overflow.left, overflow.right)) : overflow[widthSide])
      };
      await apply({ ...middlewareArguments,
        ...dimensions
      });
      const nextDimensions = await platform.getDimensions(elements.floating);

      if (rects.floating.width !== nextDimensions.width || rects.floating.height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }

      return {};
    }

  };
};

function isWindow(value) {
  return value && value.document && value.location && value.alert && value.setInterval;
}

function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (!isWindow(node)) {
    const ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}

function getNodeName(node) {
  return isWindow(node) ? '' : node ? (node.nodeName || '').toLowerCase() : '';
}

function getUAString() {
  const uaData = navigator.userAgentData;

  if (uaData != null && uaData.brands) {
    return uaData.brands.map(item => item.brand + "/" + item.version).join(' ');
  }

  return navigator.userAgent;
}

function isHTMLElement(value) {
  return value instanceof getWindow(value).HTMLElement;
}

function isElement(value) {
  return value instanceof getWindow(value).Element;
}

function isNode(value) {
  return value instanceof getWindow(value).Node;
}

function isShadowRoot(node) {
  // Browsers without `ShadowRoot` support
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  const OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

function isOverflowElement(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);
}

function isTableElement(element) {
  return ['table', 'td', 'th'].includes(getNodeName(element));
}

function isContainingBlock(element) {
  // TODO: Try and use feature detection here instead
  const isFirefox = /firefox/i.test(getUAString());
  const css = getComputedStyle$1(element); // This is non-exhaustive but covers the most common CSS properties that
  // create a containing block.
  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

  return css.transform !== 'none' || css.perspective !== 'none' || isFirefox && css.willChange === 'filter' || isFirefox && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective'].some(value => css.willChange.includes(value)) || ['paint', 'layout', 'strict', 'content'].some( // TS 4.1 compat
  value => {
    const contain = css.contain;
    return contain != null ? contain.includes(value) : false;
  });
}

function isLayoutViewport() {
  // Not Safari
  return !/^((?!chrome|android).)*safari/i.test(getUAString()); // Feature detection for this fails in various ways
  // • Always-visible scrollbar or not
  // • Width of <html>, etc.
  // const vV = win.visualViewport;
  // return vV ? Math.abs(win.innerWidth / vV.scale - vV.width) < 0.5 : true;
}

function isLastTraversableNode(node) {
  return ['html', 'body', '#document'].includes(getNodeName(node));
}

const min = Math.min;
const max = Math.max;
const round = Math.round;

function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  var _win$visualViewport$o, _win$visualViewport, _win$visualViewport$o2, _win$visualViewport2;

  if (includeScale === void 0) {
    includeScale = false;
  }

  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }

  const clientRect = element.getBoundingClientRect();
  let scaleX = 1;
  let scaleY = 1;

  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }

  const win = isElement(element) ? getWindow(element) : window;
  const addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  const x = (clientRect.left + (addVisualOffsets ? (_win$visualViewport$o = (_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) != null ? _win$visualViewport$o : 0 : 0)) / scaleX;
  const y = (clientRect.top + (addVisualOffsets ? (_win$visualViewport$o2 = (_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) != null ? _win$visualViewport$o2 : 0 : 0)) / scaleY;
  const width = clientRect.width / scaleX;
  const height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

function getDocumentElement(node) {
  return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
}

function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}

function isScaled(element) {
  const rect = getBoundingClientRect(element);
  return round(rect.width) !== element.offsetWidth || round(rect.height) !== element.offsetHeight;
}

function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const rect = getBoundingClientRect(element, // @ts-ignore - checked above (TS 4.1 compat)
  isOffsetParentAnElement && isScaled(offsetParent), strategy === 'fixed');
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

function getParentNode(node) {
  if (getNodeName(node) === 'html') {
    return node;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // @ts-ignore
    node.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    node.parentNode || ( // DOM Element detected
    isShadowRoot(node) ? node.host : null) || // ShadowRoot detected
    getDocumentElement(node) // fallback

  );
}

function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
}

function getContainingBlock(element) {
  let currentNode = getParentNode(element);

  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }

  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      const parent = currentNode.parentNode;
      currentNode = isShadowRoot(parent) ? parent.host : parent;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  const window = getWindow(element);
  let offsetParent = getTrueOffsetParent(element);

  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

function getDimensions(element) {
  if (isHTMLElement(element)) {
    return {
      width: element.offsetWidth,
      height: element.offsetHeight
    };
  }

  const rect = getBoundingClientRect(element);
  return {
    width: rect.width,
    height: rect.height
  };
}

function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);

  if (offsetParent === documentElement) {
    return rect;
  }

  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } // This doesn't appear to be need to be negated.
    // else if (documentElement) {
    //   offsets.x = getWindowScrollBarX(documentElement);
    // }

  }

  return { ...rect,
    x: rect.x - scroll.scrollLeft + offsets.x,
    y: rect.y - scroll.scrollTop + offsets.y
  };
}

function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const layoutViewport = isLayoutViewport();

    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width,
    height,
    x,
    y
  };
} // of the `<html>` and `<body>` rect bounds if horizontally scrollable


function getDocumentRect(element) {
  var _element$ownerDocumen;

  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  const width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  const height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;

  if (getComputedStyle$1(body || html).direction === 'rtl') {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width,
    height,
    x,
    y
  };
}

function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);

  if (isLastTraversableNode(parentNode)) {
    // @ts-ignore assume body is always available
    return node.ownerDocument.body;
  }

  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }

  return getNearestOverflowAncestor(parentNode);
}

function getOverflowAncestors(node, list) {
  var _node$ownerDocument;

  if (list === void 0) {
    list = [];
  }

  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
  const win = getWindow(scrollableAncestor);
  const target = isBody ? [win].concat(win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []) : scrollableAncestor;
  const updatedList = list.concat(target);
  return isBody ? updatedList : // @ts-ignore: isBody tells us target will be an HTMLElement here
  updatedList.concat(getOverflowAncestors(target));
}

function contains(parent, child) {
  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
    let next = child;

    do {
      // use `===` replace node.isSameNode()
      if (next && parent === next) {
        return true;
      } // @ts-ignore: need a better way to handle this...


      next = next.parentNode || next.host;
    } while (next);
  }

  return false;
}

function getNearestParentCapableOfEscapingClipping(element, clippingAncestors) {
  let currentNode = element;

  while (currentNode && !isLastTraversableNode(currentNode) && // @ts-expect-error
  !clippingAncestors.includes(currentNode)) {
    if (isElement(currentNode) && ['absolute', 'fixed'].includes(getComputedStyle$1(currentNode).position)) {
      break;
    }

    const parentNode = getParentNode(currentNode);
    currentNode = isShadowRoot(parentNode) ? parentNode.host : parentNode;
  }

  return currentNode;
}

function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, false, strategy === 'fixed');
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  return {
    top,
    left,
    x: left,
    y: top,
    right: left + element.clientWidth,
    bottom: top + element.clientHeight,
    width: element.clientWidth,
    height: element.clientHeight
  };
}

function getClientRectFromClippingAncestor(element, clippingParent, strategy) {
  if (clippingParent === 'viewport') {
    return rectToClientRect(getViewportRect(element, strategy));
  }

  if (isElement(clippingParent)) {
    return getInnerBoundingClientRect(clippingParent, strategy);
  }

  return rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping ancestor" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingAncestors(element) {
  const clippingAncestors = getOverflowAncestors(element);
  const nearestEscapableParent = getNearestParentCapableOfEscapingClipping(element, clippingAncestors);
  let clipperElement = null;

  if (nearestEscapableParent && isHTMLElement(nearestEscapableParent)) {
    const offsetParent = getOffsetParent(nearestEscapableParent);

    if (isOverflowElement(nearestEscapableParent)) {
      clipperElement = nearestEscapableParent;
    } else if (isHTMLElement(offsetParent)) {
      clipperElement = offsetParent;
    }
  }

  if (!isElement(clipperElement)) {
    return [];
  } // @ts-ignore isElement check ensures we return Array<Element>


  return clippingAncestors.filter(clippingAncestors => clipperElement && isElement(clippingAncestors) && contains(clippingAncestors, clipperElement) && getNodeName(clippingAncestors) !== 'body');
} // Gets the maximum area that the element is visible in due to any number of
// clipping ancestors


function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const mainClippingAncestors = boundary === 'clippingAncestors' ? getClippingAncestors(element) : [].concat(boundary);
  const clippingAncestors = [...mainClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}

const platform = {
  getClippingRect,
  convertOffsetParentRelativeRectToViewportRelativeRect,
  isElement,
  getDimensions,
  getOffsetParent,
  getDocumentElement,
  getElementRects: _ref => {
    let {
      reference,
      floating,
      strategy
    } = _ref;
    return {
      reference: getRectRelativeToOffsetParent(reference, getOffsetParent(floating), strategy),
      floating: { ...getDimensions(floating),
        x: 0,
        y: 0
      }
    };
  },
  getClientRects: element => Array.from(element.getClientRects()),
  isRTL: element => getComputedStyle$1(element).direction === 'rtl'
};
/**
 * Automatically updates the position of the floating element when necessary.
 * @see https://floating-ui.com/docs/autoUpdate
 */

function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }

  const {
    ancestorScroll: _ancestorScroll = true,
    ancestorResize = true,
    elementResize = true,
    animationFrame = false
  } = options;
  const ancestorScroll = _ancestorScroll && !animationFrame;
  const ancestors = ancestorScroll || ancestorResize ? [...(isElement(reference) ? getOverflowAncestors(reference) : []), ...getOverflowAncestors(floating)] : [];
  ancestors.forEach(ancestor => {
    ancestorScroll && ancestor.addEventListener('scroll', update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener('resize', update);
  });
  let observer = null;

  if (elementResize) {
    let initialUpdate = true;
    observer = new ResizeObserver(() => {
      if (!initialUpdate) {
        update();
      }

      initialUpdate = false;
    });
    isElement(reference) && !animationFrame && observer.observe(reference);
    observer.observe(floating);
  }

  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;

  if (animationFrame) {
    frameLoop();
  }

  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);

    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }

    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }

  update();
  return () => {
    var _observer;

    ancestors.forEach(ancestor => {
      ancestorScroll && ancestor.removeEventListener('scroll', update);
      ancestorResize && ancestor.removeEventListener('resize', update);
    });
    (_observer = observer) == null ? void 0 : _observer.disconnect();
    observer = null;

    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a reference element when it is given a certain CSS positioning
 * strategy.
 */


const computePosition = (reference, floating, options) => computePosition$1(reference, floating, {
  platform,
  ...options
});

/**
 * Determines if the element is a {@link (FASTListboxOption:class)}
 *
 * @param element - the element to test.
 * @public
 */

function isListboxOption(el) {
  return isHTMLElement$1(el) && (el.getAttribute("role") === "option" || el instanceof HTMLOptionElement);
}
/**
 * An Option Custom HTML Element.
 * Implements {@link https://www.w3.org/TR/wai-aria-1.1/#option | ARIA option }.
 *
 * @slot start - Content which can be provided before the listbox option content
 * @slot end - Content which can be provided after the listbox option content
 * @slot - The default slot for listbox option content
 * @csspart content - Wraps the listbox option content
 *
 * @public
 */

class FASTListboxOption extends FASTElement {
  constructor(text, value, defaultSelected, selected) {
    super();
    /**
     * The defaultSelected state of the option.
     * @public
     */

    this.defaultSelected = false;
    /**
     * Tracks whether the "selected" property has been changed.
     * @internal
     */

    this.dirtySelected = false;
    /**
     * The checked state of the control.
     *
     * @public
     */

    this.selected = this.defaultSelected;
    /**
     * Track whether the value has been changed from the initial value
     */

    this.dirtyValue = false;

    if (text) {
      this.textContent = text;
    }

    if (value) {
      this.initialValue = value;
    }

    if (defaultSelected) {
      this.defaultSelected = defaultSelected;
    }

    if (selected) {
      this.selected = selected;
    }

    this.proxy = new Option(`${this.textContent}`, this.initialValue, this.defaultSelected, this.selected);
    this.proxy.disabled = this.disabled;
  }
  /**
   * Updates the ariaChecked property when the checked property changes.
   *
   * @param prev - the previous checked value
   * @param next - the current checked value
   *
   * @public
   */


  checkedChanged(prev, next) {
    if (typeof next === "boolean") {
      this.ariaChecked = next ? "true" : "false";
      return;
    }

    this.ariaChecked = null;
  }
  /**
   * Updates the proxy's text content when the default slot changes.
   * @param prev - the previous content value
   * @param next - the current content value
   *
   * @internal
   */


  contentChanged(prev, next) {
    if (this.proxy instanceof HTMLOptionElement) {
      this.proxy.textContent = this.textContent;
    }

    this.$emit("contentchange", null, {
      bubbles: true
    });
  }

  defaultSelectedChanged() {
    if (!this.dirtySelected) {
      this.selected = this.defaultSelected;

      if (this.proxy instanceof HTMLOptionElement) {
        this.proxy.selected = this.defaultSelected;
      }
    }
  }

  disabledChanged(prev, next) {
    this.ariaDisabled = this.disabled ? "true" : "false";

    if (this.proxy instanceof HTMLOptionElement) {
      this.proxy.disabled = this.disabled;
    }
  }

  selectedAttributeChanged() {
    this.defaultSelected = this.selectedAttribute;

    if (this.proxy instanceof HTMLOptionElement) {
      this.proxy.defaultSelected = this.defaultSelected;
    }
  }

  selectedChanged() {
    this.ariaSelected = this.selected ? "true" : "false";

    if (!this.dirtySelected) {
      this.dirtySelected = true;
    }

    if (this.proxy instanceof HTMLOptionElement) {
      this.proxy.selected = this.selected;
    }
  }

  initialValueChanged(previous, next) {
    // If the value is clean and the component is connected to the DOM
    // then set value equal to the attribute value.
    if (!this.dirtyValue) {
      this.value = this.initialValue;
      this.dirtyValue = false;
    }
  }

  get label() {
    var _a;

    return (_a = this.value) !== null && _a !== void 0 ? _a : this.text;
  }

  get text() {
    var _a, _b;

    return (_b = (_a = this.textContent) === null || _a === void 0 ? void 0 : _a.replace(/\s+/g, " ").trim()) !== null && _b !== void 0 ? _b : "";
  }

  set value(next) {
    const newValue = `${next !== null && next !== void 0 ? next : ""}`;
    this._value = newValue;
    this.dirtyValue = true;

    if (this.proxy instanceof HTMLOptionElement) {
      this.proxy.value = newValue;
    }

    Observable.notify(this, "value");
  }

  get value() {
    var _a;

    Observable.track(this, "value");
    return (_a = this._value) !== null && _a !== void 0 ? _a : this.text;
  }

  get form() {
    return this.proxy ? this.proxy.form : null;
  }

}

__decorate([observable], FASTListboxOption.prototype, "checked", void 0);

__decorate([observable], FASTListboxOption.prototype, "content", void 0);

__decorate([observable], FASTListboxOption.prototype, "defaultSelected", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTListboxOption.prototype, "disabled", void 0);

__decorate([attr({
  attribute: "selected",
  mode: "boolean"
})], FASTListboxOption.prototype, "selectedAttribute", void 0);

__decorate([observable], FASTListboxOption.prototype, "selected", void 0);

__decorate([attr({
  attribute: "value",
  mode: "fromView"
})], FASTListboxOption.prototype, "initialValue", void 0);
/**
 * States and properties relating to the ARIA `option` role.
 *
 * @public
 */


class DelegatesARIAListboxOption {}

__decorate([observable], DelegatesARIAListboxOption.prototype, "ariaChecked", void 0);

__decorate([observable], DelegatesARIAListboxOption.prototype, "ariaPosInSet", void 0);

__decorate([observable], DelegatesARIAListboxOption.prototype, "ariaSelected", void 0);

__decorate([observable], DelegatesARIAListboxOption.prototype, "ariaSetSize", void 0);

applyMixins(DelegatesARIAListboxOption, ARIAGlobalStatesAndProperties);
applyMixins(FASTListboxOption, StartEnd, DelegatesARIAListboxOption);

/**
 * A Listbox Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#listbox | ARIA listbox }.
 *
 * @slot - The default slot for the listbox options
 *
 * @public
 */

class FASTListbox extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * The internal unfiltered list of selectable options.
     *
     * @internal
     */

    this._options = [];
    /**
     * The index of the selected option.
     *
     * @public
     */

    this.selectedIndex = -1;
    /**
     * A collection of the selected options.
     *
     * @public
     */

    this.selectedOptions = [];
    /**
     * A standard `click` event creates a `focus` event before firing, so a
     * `mousedown` event is used to skip that initial focus.
     *
     * @internal
     */

    this.shouldSkipFocus = false;
    /**
     * The current typeahead buffer string.
     *
     * @internal
     */

    this.typeaheadBuffer = "";
    /**
     * Flag for the typeahead timeout expiration.
     *
     * @internal
     */

    this.typeaheadExpired = true;
    /**
     * The timeout ID for the typeahead handler.
     *
     * @internal
     */

    this.typeaheadTimeout = -1;
  }
  /**
   * The first selected option.
   *
   * @internal
   */


  get firstSelectedOption() {
    var _a;

    return (_a = this.selectedOptions[0]) !== null && _a !== void 0 ? _a : null;
  }
  /**
   * Returns true if there is one or more selectable option.
   *
   * @internal
   */


  get hasSelectableOptions() {
    return this.options.length > 0 && !this.options.every(o => o.disabled);
  }
  /**
   * The number of options.
   *
   * @public
   */


  get length() {
    var _a, _b;

    return (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
  }
  /**
   * The list of options.
   *
   * @public
   */


  get options() {
    Observable.track(this, "options");
    return this._options;
  }

  set options(value) {
    this._options = value;
    Observable.notify(this, "options");
  }
  /**
   * Flag for the typeahead timeout expiration.
   *
   * @deprecated use `Listbox.typeaheadExpired`
   * @internal
   */


  get typeAheadExpired() {
    return this.typeaheadExpired;
  }

  set typeAheadExpired(value) {
    this.typeaheadExpired = value;
  }
  /**
   * Handle click events for listbox options.
   *
   * @internal
   */


  clickHandler(e) {
    const captured = e.target.closest(`option,[role=option]`);

    if (captured && !captured.disabled) {
      this.selectedIndex = this.options.indexOf(captured);
      return true;
    }
  }
  /**
   * Ensures that the provided option is focused and scrolled into view.
   *
   * @param optionToFocus - The option to focus
   * @internal
   */


  focusAndScrollOptionIntoView(optionToFocus = this.firstSelectedOption) {
    // To ensure that the browser handles both `focus()` and `scrollIntoView()`, the
    // timing here needs to guarantee that they happen on different frames. Since this
    // function is typically called from the `openChanged` observer, `DOM.queueUpdate`
    // causes the calls to be grouped into the same frame. To prevent this,
    // `requestAnimationFrame` is used instead of `DOM.queueUpdate`.
    if (this.contains(document.activeElement) && optionToFocus !== null) {
      optionToFocus.focus();
      requestAnimationFrame(() => {
        optionToFocus.scrollIntoView({
          block: "nearest"
        });
      });
    }
  }
  /**
   * Handles `focusin` actions for the component. When the component receives focus,
   * the list of selected options is refreshed and the first selected option is scrolled
   * into view.
   *
   * @internal
   */


  focusinHandler(e) {
    if (!this.shouldSkipFocus && e.target === e.currentTarget) {
      this.setSelectedOptions();
      this.focusAndScrollOptionIntoView();
    }

    this.shouldSkipFocus = false;
  }
  /**
   * Returns the options which match the current typeahead buffer.
   *
   * @internal
   */


  getTypeaheadMatches() {
    const pattern = this.typeaheadBuffer.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
    const re = new RegExp(`^${pattern}`, "gi");
    return this.options.filter(o => o.text.trim().match(re));
  }
  /**
   * Determines the index of the next option which is selectable, if any.
   *
   * @param prev - the previous selected index
   * @param next - the next index to select
   *
   * @internal
   */


  getSelectableIndex(prev = this.selectedIndex, next) {
    const direction = prev > next ? -1 : prev < next ? 1 : 0;
    const potentialDirection = prev + direction;
    let nextSelectableOption = null;

    switch (direction) {
      case -1:
        {
          nextSelectableOption = this.options.reduceRight((nextSelectableOption, thisOption, index) => !nextSelectableOption && !thisOption.disabled && index < potentialDirection ? thisOption : nextSelectableOption, nextSelectableOption);
          break;
        }

      case 1:
        {
          nextSelectableOption = this.options.reduce((nextSelectableOption, thisOption, index) => !nextSelectableOption && !thisOption.disabled && index > potentialDirection ? thisOption : nextSelectableOption, nextSelectableOption);
          break;
        }
    }

    return this.options.indexOf(nextSelectableOption);
  }
  /**
   * Handles external changes to child options.
   *
   * @param source - the source object
   * @param propertyName - the property
   *
   * @internal
   */


  handleChange(source, propertyName) {
    switch (propertyName) {
      case "selected":
        {
          if (FASTListbox.slottedOptionFilter(source)) {
            this.selectedIndex = this.options.indexOf(source);
          }

          this.setSelectedOptions();
          break;
        }
    }
  }
  /**
   * Moves focus to an option whose label matches characters typed by the user.
   * Consecutive keystrokes are batched into a buffer of search text used
   * to match against the set of options.  If `TYPE_AHEAD_TIMEOUT_MS` passes
   * between consecutive keystrokes, the search restarts.
   *
   * @param key - the key to be evaluated
   *
   * @internal
   */


  handleTypeAhead(key) {
    if (this.typeaheadTimeout) {
      window.clearTimeout(this.typeaheadTimeout);
    }

    this.typeaheadTimeout = window.setTimeout(() => this.typeaheadExpired = true, FASTListbox.TYPE_AHEAD_TIMEOUT_MS);

    if (key.length > 1) {
      return;
    }

    this.typeaheadBuffer = `${this.typeaheadExpired ? "" : this.typeaheadBuffer}${key}`;
  }
  /**
   * Handles `keydown` actions for listbox navigation and typeahead.
   *
   * @internal
   */


  keydownHandler(e) {
    if (this.disabled) {
      return true;
    }

    this.shouldSkipFocus = false;
    const key = e.key;

    switch (key) {
      // Select the first available option
      case keyHome:
        {
          if (!e.shiftKey) {
            e.preventDefault();
            this.selectFirstOption();
          }

          break;
        }
      // Select the next selectable option

      case keyArrowDown:
        {
          if (!e.shiftKey) {
            e.preventDefault();
            this.selectNextOption();
          }

          break;
        }
      // Select the previous selectable option

      case keyArrowUp:
        {
          if (!e.shiftKey) {
            e.preventDefault();
            this.selectPreviousOption();
          }

          break;
        }
      // Select the last available option

      case keyEnd:
        {
          e.preventDefault();
          this.selectLastOption();
          break;
        }

      case keyTab:
        {
          this.focusAndScrollOptionIntoView();
          return true;
        }

      case keyEnter:
      case keyEscape:
        {
          return true;
        }

      case keySpace:
        {
          if (this.typeaheadExpired) {
            return true;
          }
        }
      // Send key to Typeahead handler

      default:
        {
          if (key.length === 1) {
            this.handleTypeAhead(`${key}`);
          }

          return true;
        }
    }
  }
  /**
   * Prevents `focusin` events from firing before `click` events when the
   * element is unfocused.
   *
   * @internal
   */


  mousedownHandler(e) {
    this.shouldSkipFocus = !this.contains(document.activeElement);
    return true;
  }
  /**
   * Switches between single-selection and multi-selection mode.
   *
   * @param prev - the previous value of the `multiple` attribute
   * @param next - the next value of the `multiple` attribute
   *
   * @internal
   */


  multipleChanged(prev, next) {
    this.ariaMultiSelectable = next ? "true" : null;
  }
  /**
   * Updates the list of selected options when the `selectedIndex` changes.
   *
   * @param prev - the previous selected index value
   * @param next - the current selected index value
   *
   * @internal
   */


  selectedIndexChanged(prev, next) {
    var _a;

    if (!this.hasSelectableOptions) {
      this.selectedIndex = -1;
      return;
    }

    if (((_a = this.options[this.selectedIndex]) === null || _a === void 0 ? void 0 : _a.disabled) && typeof prev === "number") {
      const selectableIndex = this.getSelectableIndex(prev, next);
      const newNext = selectableIndex > -1 ? selectableIndex : prev;
      this.selectedIndex = newNext;

      if (next === newNext) {
        this.selectedIndexChanged(next, newNext);
      }

      return;
    }

    this.setSelectedOptions();
  }
  /**
   * Updates the selectedness of each option when the list of selected options changes.
   *
   * @param prev - the previous list of selected options
   * @param next - the current list of selected options
   *
   * @internal
   */


  selectedOptionsChanged(prev, next) {
    var _a;

    const filteredNext = next.filter(FASTListbox.slottedOptionFilter);
    (_a = this.options) === null || _a === void 0 ? void 0 : _a.forEach(o => {
      const notifier = Observable.getNotifier(o);
      notifier.unsubscribe(this, "selected");
      o.selected = filteredNext.includes(o);
      notifier.subscribe(this, "selected");
    });
  }
  /**
   * Moves focus to the first selectable option.
   *
   * @public
   */


  selectFirstOption() {
    var _a, _b;

    if (!this.disabled) {
      this.selectedIndex = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.findIndex(o => !o.disabled)) !== null && _b !== void 0 ? _b : -1;
    }
  }
  /**
   * Moves focus to the last selectable option.
   *
   * @internal
   */


  selectLastOption() {
    if (!this.disabled) {
      this.selectedIndex = findLastIndex(this.options, o => !o.disabled);
    }
  }
  /**
   * Moves focus to the next selectable option.
   *
   * @internal
   */


  selectNextOption() {
    if (!this.disabled && this.selectedIndex < this.options.length - 1) {
      this.selectedIndex += 1;
    }
  }
  /**
   * Moves focus to the previous selectable option.
   *
   * @internal
   */


  selectPreviousOption() {
    if (!this.disabled && this.selectedIndex > 0) {
      this.selectedIndex = this.selectedIndex - 1;
    }
  }
  /**
   * Updates the selected index to match the first selected option.
   *
   * @internal
   */


  setDefaultSelectedOption() {
    var _a, _b;

    this.selectedIndex = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.findIndex(el => el.defaultSelected)) !== null && _b !== void 0 ? _b : -1;
  }
  /**
   * Sets an option as selected and gives it focus.
   *
   * @public
   */


  setSelectedOptions() {
    var _a, _b, _c;

    if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) {
      this.selectedOptions = [this.options[this.selectedIndex]];
      this.ariaActiveDescendant = (_c = (_b = this.firstSelectedOption) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : "";
      this.focusAndScrollOptionIntoView();
    }
  }
  /**
   * Updates the list of options and resets the selected option when the slotted option content changes.
   *
   * @param prev - the previous list of slotted options
   * @param next - the current list of slotted options
   *
   * @internal
   */


  slottedOptionsChanged(prev, next) {
    this.options = next.reduce((options, item) => {
      if (isListboxOption(item)) {
        options.push(item);
      }

      return options;
    }, []);
    const setSize = `${this.options.length}`;
    this.options.forEach((option, index) => {
      if (!option.id) {
        option.id = uniqueId("option-");
      }

      option.ariaPosInSet = `${index + 1}`;
      option.ariaSetSize = setSize;
    });

    if (this.$fastController.isConnected) {
      this.setSelectedOptions();
      this.setDefaultSelectedOption();
    }
  }
  /**
   * Updates the filtered list of options when the typeahead buffer changes.
   *
   * @param prev - the previous typeahead buffer value
   * @param next - the current typeahead buffer value
   *
   * @internal
   */


  typeaheadBufferChanged(prev, next) {
    if (this.$fastController.isConnected) {
      const typeaheadMatches = this.getTypeaheadMatches();

      if (typeaheadMatches.length) {
        const selectedIndex = this.options.indexOf(typeaheadMatches[0]);

        if (selectedIndex > -1) {
          this.selectedIndex = selectedIndex;
        }
      }

      this.typeaheadExpired = false;
    }
  }

}
/**
 * A static filter to include only selectable options.
 *
 * @param n - element to filter
 * @public
 */

FASTListbox.slottedOptionFilter = n => isListboxOption(n) && !n.hidden;
/**
 * Typeahead timeout in milliseconds.
 *
 * @internal
 */


FASTListbox.TYPE_AHEAD_TIMEOUT_MS = 1000;

__decorate([attr({
  mode: "boolean"
})], FASTListbox.prototype, "disabled", void 0);

__decorate([observable], FASTListbox.prototype, "selectedIndex", void 0);

__decorate([observable], FASTListbox.prototype, "selectedOptions", void 0);

__decorate([observable], FASTListbox.prototype, "slottedOptions", void 0);

__decorate([observable], FASTListbox.prototype, "typeaheadBuffer", void 0);
/**
 * Includes ARIA states and properties relating to the ARIA listbox role
 *
 * @public
 */


class DelegatesARIAListbox {}

__decorate([observable], DelegatesARIAListbox.prototype, "ariaActiveDescendant", void 0);

__decorate([observable], DelegatesARIAListbox.prototype, "ariaDisabled", void 0);

__decorate([observable], DelegatesARIAListbox.prototype, "ariaExpanded", void 0);

__decorate([observable], DelegatesARIAListbox.prototype, "ariaMultiSelectable", void 0);

applyMixins(DelegatesARIAListbox, ARIAGlobalStatesAndProperties);
applyMixins(FASTListbox, DelegatesARIAListbox);

class _Combobox extends FASTListbox {}
/**
 * A form-associated base class for the {@link (Combobox:class)} component.
 *
 * @beta
 */


class FormAssociatedCombobox extends FormAssociated(_Combobox) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }

}

/**
 * Autocomplete values for combobox.
 * @public
 */
const ComboboxAutocomplete = {
  inline: "inline",
  list: "list",
  both: "both",
  none: "none"
};

/**
 * A Combobox Custom HTML Element.
 * Implements the {@link https://w3c.github.io/aria-practices/#combobox | ARIA combobox }.
 *
 * @slot start - Content which can be provided before the input
 * @slot end - Content which can be provided after the input
 * @slot control - Used to replace the input element representing the combobox
 * @slot indicator - The visual indicator representing the expanded state
 * @slot - The default slot for the options
 * @csspart control - The wrapper element containing the input area, including start and end
 * @csspart selected-value - The input element representing the selected value
 * @csspart indicator - The element wrapping the indicator slot
 * @csspart listbox - The wrapper for the listbox slotted options
 * @fires change - Fires a custom 'change' event when the value updates
 *
 * @public
 */

class FASTCombobox extends FormAssociatedCombobox {
  constructor() {
    super(...arguments);
    /**
     * The internal value property.
     *
     * @internal
     */

    this._value = "";
    /**
     * The collection of currently filtered options.
     *
     * @public
     */

    this.filteredOptions = [];
    /**
     * The current filter value.
     *
     * @internal
     */

    this.filter = "";
    /**
     * The unique id for the internal listbox element.
     *
     * @internal
     */

    this.listboxId = uniqueId("listbox-");
    /**
     * The open attribute.
     *
     * @public
     * @remarks
     * HTML Attribute: open
     */

    this.open = false;
  }
  /**
   * Reset the element to its first selectable option when its parent form is reset.
   *
   * @internal
   */


  formResetCallback() {
    var _a;

    super.formResetCallback();
    this.setDefaultSelectedOption();

    if (!this.firstSelectedOption) {
      this.value = (_a = this.initialValue) !== null && _a !== void 0 ? _a : "";
      return;
    }

    this.updateValue();
  }
  /** {@inheritDoc (FormAssociated:interface).validate} */


  validate() {
    super.validate(this.control);
  }

  get isAutocompleteInline() {
    return this.autocomplete === ComboboxAutocomplete.inline || this.isAutocompleteBoth;
  }

  get isAutocompleteList() {
    return this.autocomplete === ComboboxAutocomplete.list || this.isAutocompleteBoth;
  }

  get isAutocompleteBoth() {
    return this.autocomplete === ComboboxAutocomplete.both;
  }
  /**
   * Sets focus and synchronize ARIA attributes when the open property changes.
   *
   * @param prev - the previous open value
   * @param next - the current open value
   *
   * @internal
   */


  openChanged() {
    if (this.open) {
      this.ariaControls = this.listboxId;
      this.ariaExpanded = "true";
      Updates.enqueue(() => this.setPositioning());
      this.focusAndScrollOptionIntoView(); // focus is directed to the element when `open` is changed programmatically

      Updates.enqueue(() => this.focus());
      return;
    }

    this.ariaControls = "";
    this.ariaExpanded = "false";
  }
  /**
   * The list of options.
   *
   * @public
   * @remarks
   * Overrides `Listbox.options`.
   */


  get options() {
    Observable.track(this, "options");
    return this.filteredOptions.length ? this.filteredOptions : this._options;
  }

  set options(value) {
    this._options = value;
    Observable.notify(this, "options");
  }
  /**
   * Updates the placeholder on the proxy element.
   * @internal
   */


  placeholderChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.placeholder = this.placeholder;
    }
  }
  /**
   * The value property.
   *
   * @public
   */


  get value() {
    Observable.track(this, "value");
    return this._value;
  }

  set value(next) {
    var _a, _b, _c;

    const prev = `${this._value}`;

    if (this.$fastController.isConnected && this.options) {
      const selectedIndex = this.options.findIndex(el => el.text.toLowerCase() === next.toLowerCase());
      const prevSelectedValue = (_a = this.options[this.selectedIndex]) === null || _a === void 0 ? void 0 : _a.text;
      const nextSelectedValue = (_b = this.options[selectedIndex]) === null || _b === void 0 ? void 0 : _b.text;
      this.selectedIndex = prevSelectedValue !== nextSelectedValue ? selectedIndex : this.selectedIndex;
      next = ((_c = this.firstSelectedOption) === null || _c === void 0 ? void 0 : _c.text) || next;
    }

    if (prev !== next) {
      this._value = next;
      super.valueChanged(prev, next);
      Observable.notify(this, "value");
    }
  }
  /**
   * Handle opening and closing the listbox when the combobox is clicked.
   *
   * @param e - the mouse event
   * @internal
   */


  clickHandler(e) {
    if (this.disabled) {
      return;
    }

    if (this.open) {
      const captured = e.target.closest(`option,[role=option]`);

      if (!captured || captured.disabled) {
        return;
      }

      this.selectedOptions = [captured];
      this.control.value = captured.text;
      this.clearSelectionRange();
      this.updateValue(true);
    }

    this.open = !this.open;

    if (this.open) {
      this.control.focus();
    }

    return true;
  }

  connectedCallback() {
    super.connectedCallback();

    if (this.value) {
      this.initialValue = this.value;
    }
  }
  /**
   * Synchronize the `aria-disabled` property when the `disabled` property changes.
   *
   * @param prev - The previous disabled value
   * @param next - The next disabled value
   *
   * @internal
   */


  disabledChanged(prev, next) {
    if (super.disabledChanged) {
      super.disabledChanged(prev, next);
    }

    this.ariaDisabled = this.disabled ? "true" : "false";
  }

  disconnectedCallback() {
    var _a;

    (_a = this.cleanup) === null || _a === void 0 ? void 0 : _a.call(this);
    super.disconnectedCallback();
  }
  /**
   * Filter available options by text value.
   *
   * @public
   */


  filterOptions() {
    if (!this.autocomplete || this.autocomplete === ComboboxAutocomplete.none) {
      this.filter = "";
    }

    const filter = this.filter.toLowerCase();
    this.filteredOptions = this._options.filter(o => o.text.toLowerCase().startsWith(this.filter.toLowerCase()));

    if (this.isAutocompleteList) {
      if (!this.filteredOptions.length && !filter) {
        this.filteredOptions = this._options;
      }

      this._options.forEach(o => {
        o.hidden = !this.filteredOptions.includes(o);
      });
    }
  }
  /**
   * Focus the control and scroll the first selected option into view.
   *
   * @internal
   * @remarks
   * Overrides: `Listbox.focusAndScrollOptionIntoView`
   */


  focusAndScrollOptionIntoView() {
    if (this.contains(document.activeElement)) {
      this.control.focus();

      if (this.firstSelectedOption) {
        requestAnimationFrame(() => {
          var _a;

          (_a = this.firstSelectedOption) === null || _a === void 0 ? void 0 : _a.scrollIntoView({
            block: "nearest"
          });
        });
      }
    }
  }
  /**
   * Handle focus state when the element or its children lose focus.
   *
   * @param e - The focus event
   * @internal
   */


  focusoutHandler(e) {
    this.updateValue();

    if (!this.open) {
      return true;
    }

    const focusTarget = e.relatedTarget;

    if (this.isSameNode(focusTarget)) {
      this.focus();
      return;
    }

    if (!this.options || !this.options.includes(focusTarget)) {
      this.open = false;
    }
  }
  /**
   * Handle content changes on the control input.
   *
   * @param e - the input event
   * @internal
   */


  inputHandler(e) {
    this.filter = this.control.value;
    this.filterOptions();

    if (e.inputType === "deleteContentBackward" || !this.filter.length) {
      return true;
    }

    if (this.isAutocompleteList && !this.open) {
      this.open = true;
    }

    if (this.isAutocompleteInline && this.filteredOptions.length) {
      this.selectedOptions = [this.filteredOptions[0]];
      this.selectedIndex = this.options.indexOf(this.firstSelectedOption);
      this.setInlineSelection();
    }

    return;
  }
  /**
   * Handle keydown actions for listbox navigation.
   *
   * @param e - the keyboard event
   * @internal
   */


  keydownHandler(e) {
    const key = e.key;

    if (e.ctrlKey || e.shiftKey) {
      return true;
    }

    switch (key) {
      case "Enter":
        {
          this.updateValue(true);

          if (this.isAutocompleteInline) {
            this.filter = this.value;
          }

          this.open = false;
          this.clearSelectionRange();
          break;
        }

      case "Escape":
        {
          if (!this.isAutocompleteInline) {
            this.selectedIndex = -1;
          }

          if (this.open) {
            this.open = false;
            break;
          }

          this.value = "";
          this.control.value = "";
          this.filter = "";
          this.filterOptions();
          break;
        }

      case "Tab":
        {
          this.updateValue();

          if (!this.open) {
            return true;
          }

          e.preventDefault();
          this.open = false;
          break;
        }

      case "ArrowUp":
      case "ArrowDown":
        {
          this.filterOptions();

          if (!this.open) {
            this.open = true;
            break;
          }

          if (this.filteredOptions.length > 0) {
            super.keydownHandler(e);
          }

          if (this.isAutocompleteInline) {
            this.updateValue();
            this.setInlineSelection();
          }

          break;
        }

      default:
        {
          return true;
        }
    }
  }
  /**
   * Handle keyup actions for value input and text field manipulations.
   *
   * @param e - the keyboard event
   * @internal
   */


  keyupHandler(e) {
    const key = e.key;

    switch (key) {
      case "ArrowLeft":
      case "ArrowRight":
      case "Backspace":
      case "Delete":
      case "Home":
      case "End":
        {
          this.filter = this.control.value;
          this.selectedIndex = -1;
          this.filterOptions();
          break;
        }
    }
  }
  /**
   * Ensure that the selectedIndex is within the current allowable filtered range.
   *
   * @param prev - the previous selected index value
   * @param next - the current selected index value
   *
   * @internal
   */


  selectedIndexChanged(prev, next) {
    if (this.$fastController.isConnected) {
      next = limit(-1, this.options.length - 1, next); // we only want to call the super method when the selectedIndex is in range

      if (next !== this.selectedIndex) {
        this.selectedIndex = next;
        return;
      }

      super.selectedIndexChanged(prev, next);
    }
  }
  /**
   * Move focus to the previous selectable option.
   *
   * @internal
   * @remarks
   * Overrides `Listbox.selectPreviousOption`
   */


  selectPreviousOption() {
    if (!this.disabled && this.selectedIndex >= 0) {
      this.selectedIndex = this.selectedIndex - 1;
    }
  }
  /**
   * Set the default selected options at initialization or reset.
   *
   * @internal
   * @remarks
   * Overrides `Listbox.setDefaultSelectedOption`
   */


  setDefaultSelectedOption() {
    if (this.$fastController.isConnected && this.options) {
      const selectedIndex = this.options.findIndex(el => el.getAttribute("selected") !== null || el.selected);
      this.selectedIndex = selectedIndex;

      if (!this.dirtyValue && this.firstSelectedOption) {
        this.value = this.firstSelectedOption.text;
      } else {
        this.value = "";
      }

      this.setSelectedOptions();
    }
  }
  /**
   * Focus and select the content of the control based on the first selected option.
   *
   * @param start - The index for the starting range
   * @internal
   */


  setInlineSelection() {
    if (this.firstSelectedOption) {
      this.control.value = this.firstSelectedOption.text;
      this.control.focus();
      this.control.setSelectionRange(this.filter.length, this.control.value.length, "backward");
    }
  }
  /**
   * Calculate and apply listbox positioning based on available viewport space.
   *
   * @public
   */


  setPositioning() {
    if (this.$fastController.isConnected) {
      this.cleanup = autoUpdate(this, this.listbox, () => __awaiter(this, void 0, void 0, function* () {
        var _a;

        const {
          middlewareData,
          x,
          y
        } = yield computePosition(this, this.listbox, {
          placement: "bottom",
          strategy: "fixed",
          middleware: [flip(), size({
            apply: ({
              availableHeight,
              rects
            }) => {
              Object.assign(this.listbox.style, {
                maxHeight: `${availableHeight}px`,
                width: `${rects.reference.width}px`
              });
            }
          }), hide()]
        });

        if ((_a = middlewareData.hide) === null || _a === void 0 ? void 0 : _a.referenceHidden) {
          this.open = false;
          this.cleanup();
          return;
        }

        Object.assign(this.listbox.style, {
          position: "fixed",
          top: "0",
          left: "0",
          transform: `translate(${x}px, ${y}px)`
        });
      }));
    }
  }
  /**
   * Ensure that the entire list of options is used when setting the selected property.
   *
   * @param prev - the previous list of selected options
   * @param next - the current list of selected options
   *
   * @internal
   * @remarks
   * Overrides: `Listbox.selectedOptionsChanged`
   */


  selectedOptionsChanged(prev, next) {
    if (this.$fastController.isConnected) {
      this._options.forEach(o => {
        o.selected = next.includes(o);
      });
    }
  }
  /**
   * Synchronize the form-associated proxy and update the value property of the element.
   *
   * @param prev - the previous collection of slotted option elements
   * @param next - the next collection of slotted option elements
   *
   * @internal
   */


  slottedOptionsChanged(prev, next) {
    super.slottedOptionsChanged(prev, next);
    this.updateValue();
  }
  /**
   * Sets the value and to match the first selected option.
   *
   * @param shouldEmit - if true, the change event will be emitted
   *
   * @internal
   */


  updateValue(shouldEmit) {
    var _a;

    if (this.$fastController.isConnected) {
      this.value = ((_a = this.firstSelectedOption) === null || _a === void 0 ? void 0 : _a.text) || this.control.value;
    }

    if (shouldEmit) {
      this.$emit("change");
    }
  }
  /**
   * @internal
   */


  clearSelectionRange() {
    const controlValueLength = this.control.value.length;
    this.control.setSelectionRange(controlValueLength, controlValueLength);
  }

}

__decorate([attr({
  attribute: "autocomplete",
  mode: "fromView"
})], FASTCombobox.prototype, "autocomplete", void 0);

__decorate([attr({
  attribute: "open",
  mode: "boolean"
})], FASTCombobox.prototype, "open", void 0);

__decorate([attr], FASTCombobox.prototype, "placeholder", void 0);
/**
 * Includes ARIA states and properties relating to the ARIA combobox role.
 *
 * @public
 */


class DelegatesARIACombobox {}

__decorate([observable], DelegatesARIACombobox.prototype, "ariaAutoComplete", void 0);

__decorate([observable], DelegatesARIACombobox.prototype, "ariaControls", void 0);

applyMixins(DelegatesARIACombobox, DelegatesARIAListbox);
applyMixins(FASTCombobox, StartEnd, DelegatesARIACombobox);

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTCombobox:class)} component.
 * @public
 */

function comboboxTemplate(options = {}) {
  return html`<template aria-disabled="${x => x.ariaDisabled}" autocomplete="${x => x.autocomplete}" ?open="${x => x.open}" tabindex="${x => !x.disabled ? "0" : null}" @click="${(x, c) => x.clickHandler(c.event)}" @focusout="${(x, c) => x.focusoutHandler(c.event)}" @keydown="${(x, c) => x.keydownHandler(c.event)}"><div class="control" part="control">${startSlotTemplate(options)}<slot name="control"><input aria-activedescendant="${x => x.open ? x.ariaActiveDescendant : null}" aria-autocomplete="${x => x.ariaAutoComplete}" aria-controls="${x => x.ariaControls}" aria-disabled="${x => x.ariaDisabled}" aria-expanded="${x => x.ariaExpanded}" aria-haspopup="listbox" class="selected-value" part="selected-value" placeholder="${x => x.placeholder}" role="combobox" type="text" ?disabled="${x => x.disabled}" :value="${x => x.value}" @input="${(x, c) => x.inputHandler(c.event)}" @keyup="${(x, c) => x.keyupHandler(c.event)}" ${ref("control")} /><div class="indicator" part="indicator" aria-hidden="true"><slot name="indicator">${staticallyCompose(options.indicator)}</slot></div></slot>${endSlotTemplate(options)}</div><div class="listbox" id="${x => x.listboxId}" part="listbox" role="listbox" ?disabled="${x => x.disabled}" ?hidden="${x => !x.open}" ${ref("listbox")}><slot ${slotted({
    filter: FASTListbox.slottedOptionFilter,
    flatten: true,
    property: "slottedOptions"
  })}></slot></div></template>`;
}

function rowItemTemplate(options) {
  const rowTag = html.partial(tagFor(options.dataGridRow));
  return html`<${rowTag} :rowData="${x => x}" :cellItemTemplate="${(x, c) => c.parent.cellItemTemplate}" :headerCellItemTemplate="${(x, c) => c.parent.headerCellItemTemplate}"></${rowTag}>`;
}
/**
 * Generates a template for the {@link @microsoft/fast-foundation#FASTDataGrid} component using
 * the provided prefix.
 *
 * @public
 */


function dataGridTemplate(options) {
  const rowTag = tagFor(options.dataGridRow);
  return html`<template role="grid" tabindex="0" :rowElementTag="${rowTag}" :defaultRowItemTemplate="${rowItemTemplate(options)}" ${children({
    property: "rowElements",
    filter: elements("[role=row]")
  })}><slot></slot></template>`;
}

/**
 * Retrieves the "composed parent" element of a node, ignoring DOM tree boundaries.
 * When the parent of a node is a shadow-root, it will return the host
 * element of the shadow root. Otherwise it will return the parent node or null if
 * no parent node exists.
 * @param element - The element for which to retrieve the composed parent
 *
 * @public
 */

function composedParent(element) {
  const parentNode = element.parentElement;

  if (parentNode) {
    return parentNode;
  } else {
    const rootNode = element.getRootNode();

    if (rootNode.host instanceof HTMLElement) {
      // this is shadow-root
      return rootNode.host;
    }
  }

  return null;
}
/**
 * Determines if the reference element contains the test element in a "composed" DOM tree that
 * ignores shadow DOM boundaries.
 *
 * Returns true of the test element is a descendent of the reference, or exists in
 * a shadow DOM that is a logical descendent of the reference. Otherwise returns false.
 * @param reference - The element to test for containment against.
 * @param test - The element being tested for containment.
 *
 * @public
 */

function composedContains(reference, test) {
  let current = test;

  while (current !== null) {
    if (current === reference) {
      return true;
    }

    current = composedParent(current);
  }

  return false;
}
/**
 * Bridges between ViewBehaviors and HostBehaviors, enabling a host to
 * control ViewBehaviors.
 * @public
 */

const ViewBehaviorOrchestrator = Object.freeze({
  /**
   * Creates a ViewBehaviorOrchestrator.
   * @param source - The source to to associate behaviors with.
   * @returns A ViewBehaviorOrchestrator.
   */
  create(source) {
    const behaviors = [];
    const targets = {};
    let unbindables = null;
    let isConnected = false;
    return {
      source,
      context: ExecutionContext.default,
      targets,

      get isBound() {
        return isConnected;
      },

      addBehaviorFactory(factory, target) {
        var _a, _b, _c, _d;

        const compiled = factory;
        compiled.id = (_a = compiled.id) !== null && _a !== void 0 ? _a : nextId();
        compiled.targetNodeId = (_b = compiled.targetNodeId) !== null && _b !== void 0 ? _b : nextId();
        compiled.targetTagName = (_c = target.tagName) !== null && _c !== void 0 ? _c : null;
        compiled.policy = (_d = compiled.policy) !== null && _d !== void 0 ? _d : DOM.policy;
        this.addTarget(compiled.targetNodeId, target);
        this.addBehavior(compiled.createBehavior());
      },

      addTarget(nodeId, target) {
        targets[nodeId] = target;
      },

      addBehavior(behavior) {
        behaviors.push(behavior);

        if (isConnected) {
          behavior.bind(this);
        }
      },

      onUnbind(unbindable) {
        if (unbindables === null) {
          unbindables = [];
        }

        unbindables.push(unbindable);
      },

      connectedCallback(controller) {
        if (!isConnected) {
          isConnected = true;
          behaviors.forEach(x => x.bind(this));
        }
      },

      disconnectedCallback(controller) {
        if (isConnected) {
          isConnected = false;

          if (unbindables !== null) {
            unbindables.forEach(x => x.unbind(this));
          }
        }
      }

    };
  }

});

/**
 * Enumerates the data grid auto generated header options
 * default option generates a non-sticky header row
 *
 * @public
 */
const GenerateHeaderOptions = {
  none: "none",
  default: "default",
  sticky: "sticky"
};
/**
 * Enumerates possible data grid cell types.
 *
 * @public
 */

const DataGridCellTypes = {
  default: "default",
  columnHeader: "columnheader",
  rowHeader: "rowheader"
};
/**
 * Enumerates possible data grid row types
 *
 * @public
 */

const DataGridRowTypes = {
  default: "default",
  header: "header",
  stickyHeader: "sticky-header"
};
/**
 * Roles for the data grid cell
 *
 * @public
 */

const DataGridCellRole = {
  columnheader: "columnheader",
  rowheader: "rowheader",
  default: "gridcell"
};
/**
 * Enumerates the data grid selection mode options
 *
 * @public
 */

const DataGridSelectionMode = {
  none: "none",
  singleRow: "single-row",
  multiRow: "multi-row"
};
/**
 * Enumerates the data grid selection behavior options
 *
 * @public
 */

const DataGridSelectionBehavior = {
  programmatic: "programmatic",
  keyboardOnly: "keyboard-only",
  auto: "auto"
};

/**
 * A Data Grid Custom HTML Element.
 *
 * @slot - The default slot for custom row elements
 * @public
 */

class FASTDataGrid extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * When true the component will not add itself to the tab queue.
     * Default is false.
     *
     * @public
     * @remarks
     * HTML Attribute: no-tabbing
     */

    this.noTabbing = false;
    /**
     *  Whether the grid should automatically generate a header row and its type
     *
     * @public
     * @remarks
     * HTML Attribute: generate-header
     */

    this.generateHeader = GenerateHeaderOptions.default;
    /**
     * Defines how the grid handles row or cell selection.
     *
     * @public
     * @remarks
     * HTML Attribute: selection-mode
     */

    this.selectionMode = DataGridSelectionMode.none;
    /**
     * Controls selection behavior
     *
     * @public
     * @remarks
     * HTML Attribute: selection-behavior
     */

    this.selectionBehavior = DataGridSelectionBehavior.auto;
    /**
     * Callback that determines whether a particular row is selectable or not (depends on selectionMode also)
     * By default all rows except header rows are selectable.
     *
     * @public
     */

    this.rowSelectableCallback = FASTDataGrid.defaultRowSelectableCallback;
    /**
     * The data being displayed in the grid
     *
     * @public
     */

    this.rowsData = [];
    /**
     * The column definitions of the grid
     *
     * @public
     */

    this.columnDefinitions = null;
    /**
     * The index of the row that will receive focus the next time the
     * grid is focused. This value changes as focus moves to different
     * rows within the grid.  Changing this value when focus is already
     * within the grid moves focus to the specified row.
     *
     * @public
     */

    this.focusRowIndex = 0;
    /**
     * The index of the column that will receive focus the next time the
     * grid is focused. This value changes as focus moves to different rows
     * within the grid.  Changing this value when focus is already within
     * the grid moves focus to the specified column.
     *
     * @public
     */

    this.focusColumnIndex = 0;
    /**
     * Selected row indexes
     *
     */

    this._selectedRowIndexes = [];
    this.rowsPlaceholder = null;
    this.behaviorOrchestrator = null;
    this.generatedHeader = null; // flag to indicate whether the grid is actively updating focus
    // (so we don't self-trigger changes)

    this.isUpdatingFocus = false;
    this.pendingFocusUpdate = false;
    this.rowindexUpdateQueued = false;
    this.columnDefinitionsStale = true;
    this.generatedGridTemplateColumns = "";
    this.lastNotShiftSelectedRowIndex = -1;
    this.preShiftRowSelection = null;
    this.selectionUpdated = false;

    this.focusOnCell = (rowIndex, columnIndex, alignment) => {
      if (this.rowElements.length === 0) {
        this.focusRowIndex = 0;
        this.focusColumnIndex = 0;
        return;
      }

      const focusRowIndex = Math.max(0, Math.min(this.rowElements.length - 1, rowIndex));
      const focusRow = this.rowElements[focusRowIndex];
      const cells = focusRow.querySelectorAll('[role="cell"], [role="gridcell"], [role="columnheader"], [role="rowheader"]');
      const focusColumnIndex = Math.max(0, Math.min(cells.length - 1, columnIndex));
      const focusTarget = cells[focusColumnIndex];

      if (focusTarget) {
        focusTarget.scrollIntoView({
          block: alignment
        });
        focusTarget.focus();
      }
    };

    this.onChildListChange = (mutations,
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    observer) => {
      this.deselectAllRows();

      if (mutations && mutations.length) {
        mutations.forEach(mutation => {
          mutation.addedNodes.forEach(newNode => {
            if (newNode.nodeType === 1 && newNode.getAttribute("role") === "row") {
              newNode.columnDefinitions = this.columnDefinitions;
            }
          });
        });
        this.queueRowIndexUpdate();
      }
    };

    this.queueRowIndexUpdate = () => {
      if (!this.rowindexUpdateQueued) {
        this.rowindexUpdateQueued = true;
        Updates.enqueue(this.updateRowIndexes);
      }
    };

    this.updateRowIndexes = () => {
      let newGridTemplateColumns = this.gridTemplateColumns;

      if (newGridTemplateColumns === undefined) {
        // try to generate columns based on manual rows
        if (this.generatedGridTemplateColumns === "" && this.rowElements.length > 0) {
          const firstRow = this.rowElements[0];
          this.generatedGridTemplateColumns = new Array(firstRow.cellElements.length).fill("1fr").join(" ");
        }

        newGridTemplateColumns = this.generatedGridTemplateColumns;
      }

      this.rowElements.forEach((element, index) => {
        const thisRow = element;
        thisRow.rowIndex = index;
        thisRow.gridTemplateColumns = newGridTemplateColumns;
        thisRow.selectionBehavior = this.selectionBehavior;

        if (this.selectionMode === DataGridSelectionMode.singleRow || this.selectionMode === DataGridSelectionMode.multiRow) {
          thisRow.selected = this._selectedRowIndexes.includes(index) ? true : false;
        }

        if (this.columnDefinitionsStale) {
          thisRow.columnDefinitions = this.columnDefinitions;
        }
      });
      this.rowindexUpdateQueued = false;
      this.columnDefinitionsStale = false;

      if (this.selectionUpdated) {
        this.selectionUpdated = false;
        this.$emit("selectionchange");
      }
    };
  }
  /**
   *  generates a gridTemplateColumns based on columndefinitions
   */


  static generateTemplateColumns(columnDefinitions) {
    let templateColumns = "";
    columnDefinitions.forEach(column => {
      templateColumns = `${templateColumns}${templateColumns === "" ? "" : " "}${"1fr"}`;
    });
    return templateColumns;
  }
  /**
   * Default callback to determine if a row is selectable (also depends on selectionMode)
   * By default all rows except for header rows are selectable
   */


  static defaultRowSelectableCallback(rowIndex, grid) {
    if (grid.rowElements.length < rowIndex || grid.rowElements[rowIndex].rowType !== DataGridRowTypes.default) {
      return false;
    }

    return true;
  }

  noTabbingChanged() {
    if (this.$fastController.isConnected) {
      if (this.noTabbing) {
        this.setAttribute("tabIndex", "-1");
      } else {
        this.setAttribute("tabIndex", this.contains(document.activeElement) || this === document.activeElement ? "-1" : "0");
      }
    }
  }

  generateHeaderChanged() {
    if (this.$fastController.isConnected) {
      this.toggleGeneratedHeader();
    }
  }

  gridTemplateColumnsChanged() {
    if (this.$fastController.isConnected) {
      this.updateRowIndexes();
    }
  }

  selectionModeChanged(prev, next) {
    if (this.$fastController.isConnected) {
      if (prev === "single-row" || prev === "multi-row") {
        this.removeEventListener("rowselectionchange", this.handleRowSelectedChange);
      }

      if (next === "single-row" || next === "multi-row") {
        this.addEventListener("rowselectionchange", this.handleRowSelectedChange);
      }

      this.deselectAllRows();
    }
  }

  rowsDataChanged() {
    if (this.columnDefinitions === null && this.rowsData.length > 0) {
      this.columnDefinitions = FASTDataGrid.generateColumns(this.rowsData[0]);
    }

    if (this.$fastController.isConnected) {
      this.toggleGeneratedHeader();
      this.deselectAllRows();
    }
  }

  columnDefinitionsChanged() {
    if (!this.columnDefinitions) {
      return;
    }

    this.generatedGridTemplateColumns = FASTDataGrid.generateTemplateColumns(this.columnDefinitions);

    if (this.$fastController.isConnected) {
      this.columnDefinitionsStale = true;
      this.queueRowIndexUpdate();
    }
  }

  headerCellItemTemplateChanged() {
    if (this.$fastController.isConnected) {
      if (this.generatedHeader !== null) {
        this.generatedHeader.headerCellItemTemplate = this.headerCellItemTemplate;
      }
    }
  }

  focusRowIndexChanged() {
    if (this.$fastController.isConnected) {
      this.queueFocusUpdate();
    }
  }

  focusColumnIndexChanged() {
    if (this.$fastController.isConnected) {
      this.queueFocusUpdate();
    }
  }
  /**
   * The selectedRowIndexes property.
   *
   * @public
   */


  get selectedRowIndexes() {
    return this._selectedRowIndexes.slice();
  }

  set selectedRowIndexes(next) {
    if (this.selectionMode !== DataGridSelectionMode.multiRow && this.selectionMode !== DataGridSelectionMode.singleRow) {
      return;
    } // cull unselectable rows


    next = next.filter(rowIndex => this.rowSelectableCallback(rowIndex, this));

    if (this.selectionMode === DataGridSelectionMode.singleRow && next.length > 1) {
      this._selectedRowIndexes.splice(0, this.selectedRowIndexes.length, next[0]);
    } else {
      this._selectedRowIndexes.splice(0, this.selectedRowIndexes.length, ...next);
    }

    this.selectionUpdated = true;
    this.queueRowIndexUpdate();
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();

    if (this.rowItemTemplate === undefined) {
      this.rowItemTemplate = this.defaultRowItemTemplate;
    }

    if (this.behaviorOrchestrator === null) {
      this.behaviorOrchestrator = ViewBehaviorOrchestrator.create(this);
      this.$fastController.addBehavior(this.behaviorOrchestrator);
      this.behaviorOrchestrator.addBehaviorFactory(new RepeatDirective(oneWay(x => x.rowsData), oneWay(x => x.rowItemTemplate), {
        positioning: true
      }), this.appendChild(this.rowsPlaceholder = document.createComment("")));
    }

    this.toggleGeneratedHeader();
    this.addEventListener("row-focused", this.handleRowFocus);
    this.addEventListener(eventFocus, this.handleFocus);
    this.addEventListener(eventKeyDown, this.handleKeydown);
    this.addEventListener(eventFocusOut, this.handleFocusOut);

    if (this.selectionMode === DataGridSelectionMode.singleRow || this.selectionMode === DataGridSelectionMode.multiRow) {
      this.addEventListener("rowselectionchange", this.handleRowSelectedChange);
    }

    this.observer = new MutationObserver(this.onChildListChange); // only observe if nodes are added or removed

    this.observer.observe(this, {
      childList: true
    });

    if (this.noTabbing) {
      this.setAttribute("tabindex", "-1");
    } // apply initial selection after the grid is populated


    Updates.enqueue(() => {
      if (this.selectionMode !== DataGridSelectionMode.none && this.initialRowSelection) {
        const selectionAsArray = this.initialRowSelection.split(",");
        const initialSelection = [];
        selectionAsArray.forEach(element => {
          initialSelection.push(parseInt(element.trim()));
        });
        this.updateSelectedRows(initialSelection);
      }
    });
    this.queueRowIndexUpdate();
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("row-focused", this.handleRowFocus);
    this.removeEventListener(eventFocus, this.handleFocus);
    this.removeEventListener(eventKeyDown, this.handleKeydown);
    this.removeEventListener(eventFocusOut, this.handleFocusOut);

    if (this.selectionMode === DataGridSelectionMode.singleRow || this.selectionMode === DataGridSelectionMode.multiRow) {
      this.removeEventListener("rowselectionchange", this.handleRowSelectedChange);
    }

    this.observer.disconnect();

    if (this.generatedHeader !== null) {
      this.removeChild(this.generatedHeader);
      this.generatedHeader = null;
    }
  }
  /**
   * @internal
   */


  handleRowFocus(e) {
    this.isUpdatingFocus = true;
    const focusRow = e.target;
    this.focusRowIndex = this.rowElements.indexOf(focusRow);
    this.focusColumnIndex = focusRow.focusColumnIndex;
    this.setAttribute("tabIndex", "-1");
    this.isUpdatingFocus = false;
  }
  /**
   * @internal
   */


  handleFocus(e) {
    this.focusOnCell(this.focusRowIndex, this.focusColumnIndex, "nearest");
  }
  /**
   * @internal
   */


  handleFocusOut(e) {
    if (e.relatedTarget === null || !this.contains(e.relatedTarget)) {
      this.setAttribute("tabIndex", this.noTabbing ? "-1" : "0");
    }
  }
  /**
   * @internal
   */


  handleKeydown(e) {
    if (e.defaultPrevented) {
      return;
    }

    let newFocusRowIndex;

    switch (e.key) {
      case keyArrowUp:
        e.preventDefault(); // focus up one row

        this.focusOnCell(this.focusRowIndex - 1, this.focusColumnIndex, "nearest");
        break;

      case keyArrowDown:
        e.preventDefault(); // focus down one row

        this.focusOnCell(this.focusRowIndex + 1, this.focusColumnIndex, "nearest");
        break;

      case keyPageUp:
        e.preventDefault();

        if (this.rowElements.length === 0) {
          this.focusOnCell(0, 0, "nearest");
          break;
        }

        newFocusRowIndex = Math.max(0, this.focusRowIndex - this.getPageSize());
        this.focusOnCell(newFocusRowIndex, this.focusColumnIndex, "start");
        break;

      case keyPageDown:
        e.preventDefault();

        if (this.rowElements.length === 0) {
          this.focusOnCell(0, 0, "nearest");
          break;
        }

        newFocusRowIndex = Math.min(this.rowElements.length - 1, this.focusRowIndex + this.getPageSize());
        this.focusOnCell(newFocusRowIndex, this.focusColumnIndex, "end");
        break;

      case keyHome:
        if (e.ctrlKey) {
          e.preventDefault(); // focus first cell of first row

          this.focusOnCell(0, 0, "nearest");
        }

        break;

      case keyEnd:
        if (e.ctrlKey && this.columnDefinitions !== null) {
          e.preventDefault(); // focus last cell of last row

          this.focusOnCell(this.rowElements.length - 1, this.columnDefinitions.length - 1, "nearest");
        }

        break;

      case "a":
        if (!e.ctrlKey) {
          return;
        }

        switch (this.selectionMode) {
          case "multi-row":
            this.selectAllRows();
            e.preventDefault();
            return;
        }

        break;
    }
  }

  handleRowSelectedChange(e) {
    if (e.defaultPrevented || this.selectionMode === DataGridSelectionMode.none) {
      return;
    }

    const path = e.composedPath();
    const rowMatch = path.find(target => {
      return this.rowElements.indexOf(target) !== -1;
    });

    if (rowMatch) {
      e.preventDefault();
      const changedRow = rowMatch;
      const changeEventDetail = e.detail;

      switch (this.selectionMode) {
        case DataGridSelectionMode.singleRow:
          this.handleSingleRowSelection(changedRow, changeEventDetail);
          break;

        case DataGridSelectionMode.multiRow:
          if (changeEventDetail.isKeyboardEvent) {
            this.handleMultiRowKeyboardSelection(changedRow, changeEventDetail);
          } else {
            this.handleMultiRowPointerSelection(changedRow, changeEventDetail);
          }

          break;
      }
    }
  }

  handleMultiRowPointerSelection(changedRow, changeEventDetail) {
    let newSelection = this.selectedRowIndexes.slice();

    if (changeEventDetail.shiftKey) {
      if (this.lastNotShiftSelectedRowIndex === -1) {
        this.handleSingleRowSelection(changedRow, changeEventDetail);
      } else {
        if (this.preShiftRowSelection !== null) {
          // undo the last thing
          newSelection = this.preShiftRowSelection.slice();
        } else {
          this.preShiftRowSelection = newSelection.slice();
        }

        const dirMod = changedRow.rowIndex > this.lastNotShiftSelectedRowIndex ? 1 : -1;
        let i = this.lastNotShiftSelectedRowIndex + dirMod;

        for (i; i !== changedRow.rowIndex + dirMod; i = i + dirMod) {
          const selectedRowIndex = newSelection.indexOf(i);

          if (!newSelection.includes(changedRow.rowIndex) && selectedRowIndex === -1) {
            newSelection.push(i);
          }
        }
      }

      this.updateSelectedRows(newSelection);
    } else if (changeEventDetail.ctrlKey) {
      if (changeEventDetail.newValue && !newSelection.includes(changedRow.rowIndex)) {
        newSelection.push(changedRow.rowIndex);
        this.lastNotShiftSelectedRowIndex = changedRow.rowIndex;
      }

      if (!changeEventDetail.newValue && newSelection.includes(changedRow.rowIndex)) {
        newSelection.splice(newSelection.indexOf(changedRow.rowIndex), 1);
        this.lastNotShiftSelectedRowIndex = -1;
      }

      this.preShiftRowSelection = null;
      this.updateSelectedRows(newSelection);
    } else {
      this.handleSingleRowSelection(changedRow, changeEventDetail);
      this.preShiftRowSelection = null;
    }
  }

  handleMultiRowKeyboardSelection(changedRow, changeEventDetail) {
    if (changeEventDetail.isKeyboardEvent && !changeEventDetail.shiftKey) {
      return;
    }

    this.preShiftRowSelection = null;
    this.lastNotShiftSelectedRowIndex = -1;
    const newSelection = this.selectedRowIndexes.slice();

    if (newSelection.includes(changedRow.rowIndex)) {
      newSelection.splice(newSelection.indexOf(changedRow.rowIndex), 1);
    } else {
      newSelection.push(changedRow.rowIndex);
    }

    this.updateSelectedRows(newSelection);
  }

  handleSingleRowSelection(changedRow, changeEventDetail) {
    if (changeEventDetail.isKeyboardEvent && !changeEventDetail.shiftKey) {
      return;
    }

    if (changeEventDetail.newValue) {
      this.updateSelectedRows([changedRow.rowIndex]);
      this.lastNotShiftSelectedRowIndex = changedRow.rowIndex;
    } else {
      this.updateSelectedRows([]);
      this.lastNotShiftSelectedRowIndex = -1;
    }
  }

  getPageSize() {
    if (this.pageSize) {
      return this.pageSize;
    }

    let rowHeight = 50;
    this.rowElements.forEach(element => {
      var _a;

      if (!element.hasAttribute("rowType") || !((_a = element.getAttribute("rowType")) === null || _a === void 0 ? void 0 : _a.includes("header"))) {
        rowHeight = element.clientHeight;
      }
    });
    let pageSize = 1;

    if (rowHeight === 0) {
      return pageSize;
    }

    if (this.clientHeight < this.scrollHeight) {
      pageSize = this.clientHeight / rowHeight;
    } else {
      pageSize = document.body.clientHeight / rowHeight;
    }

    pageSize = Math.max(Math.round(pageSize), 1);
    return pageSize;
  }
  /**
   * Validates that new selected rows are selectable and updates the selectedRowIndexes prop
   */


  updateSelectedRows(newSelection) {
    this.selectedRowIndexes = newSelection;
  }

  selectAllRows() {
    if (this.selectionMode !== DataGridSelectionMode.multiRow || this.rowElements.length === 0) {
      return;
    }

    const unselectableRowIndexes = [];

    for (let index = 0, maxIndex = this.rowElements.length; index < maxIndex; index++) {
      if (!this.rowSelectableCallback(index, this)) {
        unselectableRowIndexes.push(index);
      }
    }

    const selectableRowCount = Math.max(this.rowElements.length - unselectableRowIndexes.length, 0);

    if (this._selectedRowIndexes.length === selectableRowCount) {
      // deselect all if all are already selected
      this.updateSelectedRows([]);
      return;
    }

    const newSelection = [];
    this.rowElements.forEach(element => {
      newSelection.push(element.rowIndex);
    });
    this.lastNotShiftSelectedRowIndex = -1;
    this.updateSelectedRows(newSelection);
  }

  deselectAllRows() {
    this.updateSelectedRows([]);
    this.lastNotShiftSelectedRowIndex = -1;
  }

  queueFocusUpdate() {
    if (this.isUpdatingFocus && (this.contains(document.activeElement) || this === document.activeElement)) {
      return;
    }

    if (this.pendingFocusUpdate === false) {
      this.pendingFocusUpdate = true;
      Updates.enqueue(() => this.updateFocus());
    }
  }

  updateFocus() {
    this.pendingFocusUpdate = false;
    this.focusOnCell(this.focusRowIndex, this.focusColumnIndex, "nearest");
  }

  toggleGeneratedHeader() {
    if (this.generatedHeader !== null) {
      this.removeChild(this.generatedHeader);
      this.generatedHeader = null;
    }

    if (this.generateHeader !== GenerateHeaderOptions.none && this.columnDefinitions && this.columnDefinitions.length) {
      const generatedHeaderElement = document.createElement(this.rowElementTag);
      this.generatedHeader = generatedHeaderElement;
      this.generatedHeader.columnDefinitions = this.columnDefinitions;
      this.generatedHeader.gridTemplateColumns = this.gridTemplateColumns;
      this.generatedHeader.rowType = this.generateHeader === GenerateHeaderOptions.sticky ? DataGridRowTypes.stickyHeader : DataGridRowTypes.header;

      if (this.firstChild !== null || this.rowsPlaceholder !== null) {
        this.insertBefore(generatedHeaderElement, this.firstChild !== null ? this.firstChild : this.rowsPlaceholder);
      }

      return;
    }
  }

}
/**
 *  generates a basic column definition by examining sample row data
 */

FASTDataGrid.generateColumns = row => {
  return Object.getOwnPropertyNames(row).map((property, index) => {
    return {
      columnDataKey: property,
      gridColumn: `${index}`
    };
  });
};

__decorate([attr({
  attribute: "no-tabbing",
  mode: "boolean"
})], FASTDataGrid.prototype, "noTabbing", void 0);

__decorate([attr({
  attribute: "generate-header"
})], FASTDataGrid.prototype, "generateHeader", void 0);

__decorate([attr({
  attribute: "grid-template-columns"
})], FASTDataGrid.prototype, "gridTemplateColumns", void 0);

__decorate([attr({
  attribute: "page-size",
  converter: nullableNumberConverter
})], FASTDataGrid.prototype, "pageSize", void 0);

__decorate([attr({
  attribute: "selection-mode"
})], FASTDataGrid.prototype, "selectionMode", void 0);

__decorate([attr({
  attribute: "selection-behavior"
})], FASTDataGrid.prototype, "selectionBehavior", void 0);

__decorate([attr({
  attribute: "initial-row-selection"
})], FASTDataGrid.prototype, "initialRowSelection", void 0);

__decorate([observable], FASTDataGrid.prototype, "rowSelectableCallback", void 0);

__decorate([observable], FASTDataGrid.prototype, "rowsData", void 0);

__decorate([observable], FASTDataGrid.prototype, "columnDefinitions", void 0);

__decorate([observable], FASTDataGrid.prototype, "rowItemTemplate", void 0);

__decorate([observable], FASTDataGrid.prototype, "cellItemTemplate", void 0);

__decorate([observable], FASTDataGrid.prototype, "headerCellItemTemplate", void 0);

__decorate([observable], FASTDataGrid.prototype, "focusRowIndex", void 0);

__decorate([observable], FASTDataGrid.prototype, "focusColumnIndex", void 0);

__decorate([observable], FASTDataGrid.prototype, "defaultRowItemTemplate", void 0);

__decorate([observable], FASTDataGrid.prototype, "rowElementTag", void 0);

__decorate([observable], FASTDataGrid.prototype, "rowElements", void 0);

function cellItemTemplate(options) {
  const cellTag = html.partial(tagFor(options.dataGridCell));
  return html`<${cellTag} cell-type="${x => x.isRowHeader ? "rowheader" : undefined}" grid-column="${(x, c) => c.index + 1}" :rowData="${(x, c) => c.parent.rowData}" :columnDefinition="${x => x}"></${cellTag}>`;
}

function headerCellItemTemplate(options) {
  const cellTag = html.partial(tagFor(options.dataGridCell));
  return html`<${cellTag} cell-type="columnheader" grid-column="${(x, c) => c.index + 1}" :columnDefinition="${x => x}"></${cellTag}>`;
}
/**
 * Generates a template for the {@link @microsoft/fast-foundation#FASTDataGridRow} component using
 * the provided prefix.
 *
 * @public
 */


function dataGridRowTemplate(options) {
  return html`<template role="row" :defaultCellItemTemplate="${cellItemTemplate(options)}" :defaultHeaderCellItemTemplate="${headerCellItemTemplate(options)}" aria-selected="${x => x.selected !== undefined ? x.selected : void 0}" ${children({
    property: "cellElements",
    filter: elements('[role="cell"],[role="gridcell"],[role="columnheader"],[role="rowheader"]')
  })}><slot ${slotted("slottedCellElements")}></slot></template>`;
}

/**
 * A Data Grid Row Custom HTML Element.
 *
 * @fires row-focused - Fires a custom 'row-focused' event when focus is on an element (usually a cell or its contents) in the row
 * @slot - The default slot for custom cell elements
 * @public
 */

class FASTDataGridRow extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * The type of row
     *
     * @public
     * @remarks
     * HTML Attribute: row-type
     */

    this.rowType = DataGridRowTypes.default;
    /**
     * The base data for this row
     *
     * @public
     */

    this.rowData = null;
    /**
     * The column definitions of the row
     *
     * @public
     */

    this.columnDefinitions = null;
    /**
     * Whether focus is on/in a cell within this row.
     *
     * @internal
     */

    this.isActiveRow = false;
    this.behaviorOrchestrator = null;
    /**
     * Selection behavior
     *
     * @internal
     */

    this.selectionBehavior = DataGridSelectionBehavior.auto;
    /**
     * @internal
     */

    this.focusColumnIndex = 0;
    this.refocusOnLoad = false;

    this.updateRowStyle = () => {
      this.style.gridTemplateColumns = this.gridTemplateColumns;
    };
  }

  gridTemplateColumnsChanged() {
    if (this.$fastController.isConnected) {
      this.updateRowStyle();
    }
  }

  rowTypeChanged() {
    if (this.$fastController.isConnected) {
      this.updateItemTemplate();
    }
  }

  rowDataChanged() {
    if (this.rowData !== null && this.isActiveRow) {
      this.refocusOnLoad = true;
      return;
    }
  }

  cellItemTemplateChanged() {
    this.updateItemTemplate();
  }

  headerCellItemTemplateChanged() {
    this.updateItemTemplate();
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback(); // note that row elements can be reused with a different data object
    // as the parent grid's repeat behavior reacts to changes in the data set.

    if (this.behaviorOrchestrator === null) {
      this.updateItemTemplate();
      this.behaviorOrchestrator = ViewBehaviorOrchestrator.create(this);
      this.$fastController.addBehavior(this.behaviorOrchestrator);
      this.behaviorOrchestrator.addBehaviorFactory(new RepeatDirective(oneWay(x => x.columnDefinitions), oneWay(x => x.activeCellItemTemplate), {
        positioning: true
      }), this.appendChild(document.createComment("")));
    }

    this.addEventListener("cell-focused", this.handleCellFocus);
    this.addEventListener(eventFocusOut, this.handleFocusout);
    this.addEventListener(eventKeyDown, this.handleKeydown);
    this.addEventListener(eventClick, this.handleClick);
    this.updateRowStyle();

    if (this.refocusOnLoad) {
      // if focus was on the row when data changed try to refocus on same cell
      this.refocusOnLoad = false;

      if (this.cellElements.length > this.focusColumnIndex) {
        this.cellElements[this.focusColumnIndex].focus();
      }
    }
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("cell-focused", this.handleCellFocus);
    this.removeEventListener(eventFocusOut, this.handleFocusout);
    this.removeEventListener(eventKeyDown, this.handleKeydown);
    this.removeEventListener(eventClick, this.handleClick);
  }
  /**
   * Attempts to set the selected state of the row
   *
   * @public
   */


  toggleSelected(detail) {
    this.$emit("rowselectionchange", detail);
  }

  handleFocusout(e) {
    if (!this.contains(e.target)) {
      this.isActiveRow = false;
      this.focusColumnIndex = 0;
    }
  }
  /**
   * @internal
   */


  handleCellFocus(e) {
    this.isActiveRow = true;
    this.focusColumnIndex = this.cellElements.indexOf(e.target);
    this.$emit("row-focused", this);
  }
  /**
   * @internal
   */


  handleKeydown(e) {
    if (e.defaultPrevented) {
      return;
    }

    let newFocusColumnIndex = 0;

    switch (e.key) {
      case keyArrowLeft:
        // focus left one cell
        newFocusColumnIndex = Math.max(0, this.focusColumnIndex - 1);
        this.cellElements[newFocusColumnIndex].focus();
        e.preventDefault();
        break;

      case keyArrowRight:
        // focus right one cell
        newFocusColumnIndex = Math.min(this.cellElements.length - 1, this.focusColumnIndex + 1);
        this.cellElements[newFocusColumnIndex].focus();
        e.preventDefault();
        break;

      case keyHome:
        if (!e.ctrlKey) {
          this.cellElements[0].focus();
          e.preventDefault();
        }

        break;

      case keyEnd:
        if (!e.ctrlKey) {
          // focus last cell of the row
          this.cellElements[this.cellElements.length - 1].focus();
          e.preventDefault();
        }

        break;

      case keySpace:
        if (this.selected !== undefined && this.selectionBehavior !== DataGridSelectionBehavior.programmatic) {
          e.preventDefault();
          this.toggleSelected({
            newValue: !this.isSelected(),
            shiftKey: e.shiftKey,
            ctrlKey: e.ctrlKey,
            isKeyboardEvent: true
          });
        }

        break;
    }
  }

  isSelected() {
    return this.selected;
  }
  /**
   * @internal
   */


  handleClick(e) {
    if (e.defaultPrevented || this.selectionBehavior !== DataGridSelectionBehavior.auto || this.selected === undefined) {
      return;
    }

    e.preventDefault();
    this.toggleSelected({
      newValue: !this.isSelected(),
      shiftKey: e.shiftKey,
      ctrlKey: e.ctrlKey,
      isKeyboardEvent: false
    });
  }

  updateItemTemplate() {
    this.activeCellItemTemplate = this.rowType === DataGridRowTypes.default && this.cellItemTemplate !== undefined ? this.cellItemTemplate : this.rowType === DataGridRowTypes.default && this.cellItemTemplate === undefined ? this.defaultCellItemTemplate : this.headerCellItemTemplate !== undefined ? this.headerCellItemTemplate : this.defaultHeaderCellItemTemplate;
  }

}

__decorate([attr({
  attribute: "grid-template-columns"
})], FASTDataGridRow.prototype, "gridTemplateColumns", void 0);

__decorate([attr({
  attribute: "row-type"
})], FASTDataGridRow.prototype, "rowType", void 0);

__decorate([observable], FASTDataGridRow.prototype, "rowData", void 0);

__decorate([observable], FASTDataGridRow.prototype, "columnDefinitions", void 0);

__decorate([observable], FASTDataGridRow.prototype, "cellItemTemplate", void 0);

__decorate([observable], FASTDataGridRow.prototype, "headerCellItemTemplate", void 0);

__decorate([observable], FASTDataGridRow.prototype, "rowIndex", void 0);

__decorate([observable], FASTDataGridRow.prototype, "isActiveRow", void 0);

__decorate([observable], FASTDataGridRow.prototype, "activeCellItemTemplate", void 0);

__decorate([observable], FASTDataGridRow.prototype, "defaultCellItemTemplate", void 0);

__decorate([observable], FASTDataGridRow.prototype, "defaultHeaderCellItemTemplate", void 0);

__decorate([observable], FASTDataGridRow.prototype, "cellElements", void 0);

__decorate([observable], FASTDataGridRow.prototype, "selected", void 0);

/**
 * Generates a template for the {@link @microsoft/fast-foundation#FASTDataGridCell} component using
 * the provided prefix.
 * @public
 */

function dataGridCellTemplate() {
  return html`<template tabindex="-1" role="${x => {
    var _a;

    return (_a = DataGridCellRole[x.cellType]) !== null && _a !== void 0 ? _a : DataGridCellRole.default;
  }}"><slot></slot></template>`;
}

const defaultCellContentsTemplate = html`<template>${x => x.rowData === null || x.columnDefinition === null || x.columnDefinition.columnDataKey === null ? null : x.rowData[x.columnDefinition.columnDataKey]}</template>`;
const defaultHeaderCellContentsTemplate = html`<template>${x => x.columnDefinition === null ? null : x.columnDefinition.title === undefined ? x.columnDefinition.columnDataKey : x.columnDefinition.title}</template>`;
/**
 * A Data Grid Cell Custom HTML Element.
 *
 * @fires cell-focused - Fires a custom 'cell-focused' event when focus is on the cell or its contents
 * @slot - The default slot for cell contents.  The "cell contents template" renders here.
 * @public
 */

class FASTDataGridCell extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * The type of cell
     *
     * @public
     * @remarks
     * HTML Attribute: cell-type
     */

    this.cellType = DataGridCellTypes.default;
    /**
     * The base data for the parent row
     *
     * @public
     */

    this.rowData = null;
    /**
     * The base data for the column
     *
     * @public
     */

    this.columnDefinition = null;
    this.isActiveCell = false;
    this.customCellView = null;

    this.updateCellStyle = () => {
      this.style.gridColumn = this.gridColumn;
    };
  }

  cellTypeChanged() {
    if (this.$fastController.isConnected) {
      this.updateCellView();
    }
  }

  gridColumnChanged() {
    if (this.$fastController.isConnected) {
      this.updateCellStyle();
    }
  }

  columnDefinitionChanged(oldValue, newValue) {
    if (this.$fastController.isConnected) {
      this.updateCellView();
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    var _a;

    super.connectedCallback();
    this.addEventListener(eventFocusIn, this.handleFocusin);
    this.addEventListener(eventFocusOut, this.handleFocusout);
    this.addEventListener(eventKeyDown, this.handleKeydown);
    this.style.gridColumn = `${((_a = this.columnDefinition) === null || _a === void 0 ? void 0 : _a.gridColumn) === undefined ? 0 : this.columnDefinition.gridColumn}`;
    this.updateCellView();
    this.updateCellStyle();
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener(eventFocusIn, this.handleFocusin);
    this.removeEventListener(eventFocusOut, this.handleFocusout);
    this.removeEventListener(eventKeyDown, this.handleKeydown);
    this.disconnectCellView();
  }

  handleFocusin(e) {
    if (this.isActiveCell) {
      return;
    }

    this.isActiveCell = true;

    switch (this.cellType) {
      case DataGridCellTypes.columnHeader:
        if (this.columnDefinition !== null && this.columnDefinition.headerCellInternalFocusQueue !== true && typeof this.columnDefinition.headerCellFocusTargetCallback === "function") {
          // move focus to the focus target
          const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);

          if (focusTarget !== null) {
            focusTarget.focus();
          }
        }

        break;

      default:
        if (this.columnDefinition !== null && this.columnDefinition.cellInternalFocusQueue !== true && typeof this.columnDefinition.cellFocusTargetCallback === "function") {
          // move focus to the focus target
          const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);

          if (focusTarget !== null) {
            focusTarget.focus();
          }
        }

        break;
    }

    this.$emit("cell-focused", this);
  }

  handleFocusout(e) {
    if (this !== document.activeElement && !this.contains(document.activeElement)) {
      this.isActiveCell = false;
    }
  }

  handleKeydown(e) {
    if (e.defaultPrevented || this.columnDefinition === null || this.cellType === DataGridCellTypes.default && this.columnDefinition.cellInternalFocusQueue !== true || this.cellType === DataGridCellTypes.columnHeader && this.columnDefinition.headerCellInternalFocusQueue !== true) {
      return;
    }

    switch (e.key) {
      case keyEnter:
      case keyFunction2:
        if (this.contains(document.activeElement) && document.activeElement !== this) {
          return;
        }

        switch (this.cellType) {
          case DataGridCellTypes.columnHeader:
            if (this.columnDefinition.headerCellFocusTargetCallback !== undefined) {
              const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);

              if (focusTarget !== null) {
                focusTarget.focus();
              }

              e.preventDefault();
            }

            break;

          default:
            if (this.columnDefinition.cellFocusTargetCallback !== undefined) {
              const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);

              if (focusTarget !== null) {
                focusTarget.focus();
              }

              e.preventDefault();
            }

            break;
        }

        break;

      case keyEscape:
        if (this.contains(document.activeElement) && document.activeElement !== this) {
          this.focus();
          e.preventDefault();
        }

        break;
    }
  }

  updateCellView() {
    var _a, _b;

    this.disconnectCellView();

    if (this.columnDefinition === null) {
      return;
    }

    switch (this.cellType) {
      case DataGridCellTypes.columnHeader:
        this.customCellView = html` ${(_a = this.columnDefinition.headerCellTemplate) !== null && _a !== void 0 ? _a : defaultHeaderCellContentsTemplate} `.render(this, this);
        break;

      case undefined:
      case DataGridCellTypes.rowHeader:
      case DataGridCellTypes.default:
        this.customCellView = html` ${(_b = this.columnDefinition.cellTemplate) !== null && _b !== void 0 ? _b : defaultCellContentsTemplate} `.render(this, this);
        break;
    }
  }

  disconnectCellView() {
    if (this.customCellView !== null) {
      this.customCellView.dispose();
      this.customCellView = null;
    }
  }

}

__decorate([attr({
  attribute: "cell-type"
})], FASTDataGridCell.prototype, "cellType", void 0);

__decorate([attr({
  attribute: "grid-column"
})], FASTDataGridCell.prototype, "gridColumn", void 0);

__decorate([observable], FASTDataGridCell.prototype, "rowData", void 0);

__decorate([observable], FASTDataGridCell.prototype, "columnDefinition", void 0);

/**
 * A constructable style target that can be registered
 * for DesignToken default style emission.
 *
 * Useful for controlling where CSS is emitted to, or when needing
 * to collect styles for SSR processes.
 *
 * @public
 */
class DesignTokenStyleTarget {
  constructor() {
    this.properties = new Map();
  }

  setProperty(name, value) {
    this.properties.set(name, value);
  }

  removeProperty(name) {
    this.properties.delete(name);
  }
  /**
   * The CSS text for the style target.
   * The text does *not* contain [CSS selector text](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors).
   */


  get cssText() {
    let css = "";

    for (const [key, value] of this.properties) {
      css += `${key}: ${value};`;
    }

    return css;
  }
  /**
   * The values set for the target as an array of key/value pairs.
   */


  get values() {
    return Array.from(this.properties);
  }

}

const parentLocatorEventName = "$$designToken__locate__parent$$";
const containsEventName = "$$designToken__contains$$";

function parentLocatorHandler(event) {
  if (event.target !== this) {
    event.detail.parent = this;
    event.stopImmediatePropagation();
  }
}

function containsHandler(event) {
  if (event.detail !== this) {
    event.detail.contains = true;
    event.stopImmediatePropagation();
  }
}
/**
 * A DesignToken resolution strategy that uses custom events to resolve
 * node hierarchies.
 *
 * @public
 */


const DesignTokenEventResolutionStrategy = {
  addedCallback(controller) {
    controller.source.addEventListener(parentLocatorEventName, parentLocatorHandler);
  },

  removedCallback(controller) {
    controller.source.removeEventListener(parentLocatorEventName, parentLocatorHandler);
  },

  contains(parent, child) {
    parent.addEventListener(containsEventName, containsHandler);
    const event = new CustomEvent(containsEventName, {
      bubbles: true,
      cancelable: true,
      composed: true,
      detail: {
        contains: false
      }
    });
    child.dispatchEvent(event);
    parent.removeEventListener(containsEventName, containsHandler);
    return event.detail.contains;
  },

  parent(element) {
    const event = new CustomEvent(parentLocatorEventName, {
      bubbles: true,
      cancelable: true,
      composed: true,
      detail: {
        parent: null
      }
    });
    element.dispatchEvent(event);
    return event.detail.parent;
  }

};

class DerivedValueEvaluator {
  constructor(value) {
    this.value = value;
    this.notifier = Observable.getNotifier(this);
    this.dependencies = new Set();
    this.binding = Observable.binding(value, this);
    this.binding.setMode(false);
  }

  static getOrCreate(value) {
    let v = DerivedValueEvaluator.cache.get(value);

    if (v) {
      return v;
    }

    v = new DerivedValueEvaluator(value);
    DerivedValueEvaluator.cache.set(value, v);
    return v;
  }

  evaluate(node, tokenContext) {
    const resolve = token => {
      this.dependencies.add(token);

      if (tokenContext === token) {
        if (node.parent) {
          return node.parent.getTokenValue(token);
        }

        throw new Error("DesignTokenNode has encountered a circular token reference. Avoid this by setting the token value for an ancestor node.");
      } else {
        return node.getTokenValue(token);
      }
    };

    return this.binding.observe(resolve);
  }

  handleChange() {
    this.notifier.notify(undefined);
  }

}

DerivedValueEvaluator.cache = new WeakMap();

class DerivedValue {
  constructor(token, evaluator, node, subscriber) {
    this.token = token;
    this.evaluator = evaluator;
    this.node = node;
    this.subscriber = subscriber;
    this.value = evaluator.evaluate(node, token);

    if (this.subscriber) {
      Observable.getNotifier(this.evaluator).subscribe(this.subscriber);
    }
  }

  dispose() {
    if (this.subscriber) {
      Observable.getNotifier(this.evaluator).unsubscribe(this.subscriber);
    }
  }

  update() {
    this.value = this.evaluator.evaluate(this.node, this.token);
    return this;
  }

}
/**
 * @internal
 */


class DesignTokenChangeRecordImpl {
  constructor(target, type, token, value) {
    this.target = target;
    this.type = type;
    this.token = token;
    this.value = value;
  }

  notify() {
    Observable.getNotifier(this.token).notify(this);
  }

}
/**
 * @public
 */

class DesignTokenNode {
  constructor() {
    this._parent = null;
    this._children = new Set();
    this._values = new Map();
    this._derived = new Map();
    this.dependencyGraph = new Map();
  }
  /**
   * Determines if a value is a {@link DerivedDesignTokenValue}
   * @param value - The value to test
   */


  static isDerivedTokenValue(value) {
    return typeof value === "function";
  }
  /**
   * Determines if a token has a derived value for a node.
   */


  static isDerivedFor(node, token) {
    return node._derived.has(token);
  }
  /**
   * Collects token/value pairs for all derived token / values set on upstream nodes.
   */


  static collectDerivedContext(node) {
    const collected = new Map(); // Exit early if  there is no parent

    if (node.parent === null) {
      return collected;
    }

    let ignored = DesignTokenNode.getAssignedTokensForNode(node);
    let current = node.parent;

    do {
      const assigned = DesignTokenNode.getAssignedTokensForNode(current);

      for (let i = 0, l = assigned.length; i < l; i++) {
        const token = assigned[i];

        if (!ignored.includes(token) && DesignTokenNode.isDerivedFor(current, token)) {
          collected.set(token, current._derived.get(token));
        }
      }

      ignored = Array.from(new Set(ignored.concat(assigned)));
      current = current.parent;
    } while (current !== null);

    return collected;
  }
  /**
   * Resolves the local value for a token if it is assigned, otherwise returns undefined.
   */


  static getLocalTokenValue(node, token) {
    return !DesignTokenNode.isAssigned(node, token) ? undefined : DesignTokenNode.isDerivedFor(node, token) ? node._derived.get(token).value : node._values.get(token);
  }

  static getOrCreateDependencyGraph(node, token) {
    let dependents = node.dependencyGraph.get(token);

    if (dependents) {
      return dependents;
    }

    dependents = new Set();
    node.dependencyGraph.set(token, dependents);
    return dependents;
  }
  /**
   * Emit all queued notifications
   */


  static notify() {
    const notifications = this._notifications;
    this._notifications = [];

    for (const record of notifications) {
      record.notify();
    }
  }

  static queueNotification(...records) {
    this._notifications.push(...records);
  }
  /**
   * Retrieves all tokens assigned directly to a node.
   * @param node - the node to retrieve assigned tokens for
   * @returns
   */


  static getAssignedTokensForNode(node) {
    return Array.from(node._values.keys());
  }
  /**
   * Retrieves all tokens assigned to the node and ancestor nodes.
   * @param node - the node to compose assigned tokens for
   */


  static composeAssignedTokensForNode(node) {
    const tokens = new Set(DesignTokenNode.getAssignedTokensForNode(node));
    let current = node.parent;

    while (current !== null) {
      const assignedTokens = DesignTokenNode.getAssignedTokensForNode(current);

      for (const token of assignedTokens) {
        tokens.add(token);
      }

      current = current.parent;
    }

    return Array.from(tokens);
  }
  /**
   * Tests if a token is assigned directly to a node
   * @param node - The node to test
   * @param token  - The token to test
   * @returns
   */


  static isAssigned(node, token) {
    return node._values.has(token);
  }
  /**
   * The parent node
   */


  get parent() {
    return this._parent;
  }

  get children() {
    return Array.from(this._children);
  }
  /**
   * Appends a child to the node, notifying for any tokens set for the node's context.
   */


  appendChild(child) {
    var _a, _b;

    let prevContext = null; // If this node is already attached, get it's context so change record
    // types can be determined

    if (child.parent !== null) {
      prevContext = DesignTokenNode.composeAssignedTokensForNode(child.parent);

      child.parent._children.delete(child);
    }

    const context = DesignTokenNode.composeAssignedTokensForNode(this);
    const derivedContext = DesignTokenNode.collectDerivedContext(this);
    child._parent = this;

    this._children.add(child);

    for (const token of context) {
      let type = 0
      /* DesignTokenMutationType.add */
      ;

      if (prevContext !== null) {
        const prevContextIndex = prevContext.indexOf(token);

        if (prevContextIndex !== -1) {
          type = 1
          /* DesignTokenMutationType.change */
          ;
          prevContext.splice(prevContextIndex, 1);
        }
      }

      child.dispatch(new DesignTokenChangeRecordImpl(this, type, token, (_a = derivedContext.get(token)) === null || _a === void 0 ? void 0 : _a.evaluator.value));
    }

    if (prevContext !== null && prevContext.length > 0) {
      for (const token of prevContext) {
        child.dispatch(new DesignTokenChangeRecordImpl(this, 2
        /* DesignTokenMutationType.delete */
        , token, (_b = derivedContext.get(token)) === null || _b === void 0 ? void 0 : _b.evaluator.value));
      }
    }

    DesignTokenNode.notify();
  }
  /**
   * Appends a child to the node, notifying for any tokens set for the node's context.
   */


  removeChild(child) {
    if (child.parent === this) {
      const context = DesignTokenNode.composeAssignedTokensForNode(this);
      child._parent = null;

      this._children.delete(child);

      for (const token of context) {
        child.dispatch(new DesignTokenChangeRecordImpl(this, 2
        /* DesignTokenMutationType.delete */
        , token));
      }

      DesignTokenNode.notify();
    }
  }
  /**
   * Dispose of the node, removing parent/child relationships and
   * unsubscribing all observable binding subscribers. Does not emit
   * notifications.
   */


  dispose() {
    if (this.parent) {
      this.parent._children.delete(this);

      this._parent = null;
    }

    for (const [, derived] of this._derived) {
      derived.dispose();
    }
  }
  /**
   * Sets a token to a value
   */


  setTokenValue(token, value) {
    const changeType = DesignTokenNode.isAssigned(this, token) || DesignTokenNode.isDerivedFor(this, token) ? 1
    /* DesignTokenMutationType.change */
    : 0
    /* DesignTokenMutationType.add */
    ;
    const prev = DesignTokenNode.getLocalTokenValue(this, token);

    this._values.set(token, value);

    if (DesignTokenNode.isDerivedFor(this, token)) {
      this.tearDownDerivedTokenValue(token);
    }

    const isDerived = DesignTokenNode.isDerivedTokenValue(value);
    const derivedContext = DesignTokenNode.collectDerivedContext(this);
    let result;

    if (isDerived) {
      const evaluator = this.setupDerivedTokenValue(token, value, true);
      result = evaluator.value;
    } else {
      result = value;
    }

    if (prev !== result) {
      DesignTokenNode.queueNotification(new DesignTokenChangeRecordImpl(this, changeType, token, value));
    }

    this.dispatch(new DesignTokenChangeRecordImpl(this, changeType, token, value));
    derivedContext.forEach((derivedValue, token) => {
      // Skip over any derived values already established locally, because
      // those will get updated via this.notifyDerived and this.notifyStatic
      if (!DesignTokenNode.isDerivedFor(this, token)) {
        const prev = DesignTokenNode.getLocalTokenValue(this, token);
        derivedValue = this.setupDerivedTokenValue(token, derivedValue.evaluator.value);
        const result = derivedValue.value;

        if (prev !== result) {
          DesignTokenNode.queueNotification(new DesignTokenChangeRecordImpl(this, 1
          /* DesignTokenMutationType.change */
          , token, derivedValue.evaluator.value));
        }

        this.dispatch(new DesignTokenChangeRecordImpl(this, 0
        /* DesignTokenMutationType.add */
        , token, derivedValue.evaluator.value));
      }
    });
    DesignTokenNode.notify();
  }
  /**
   * Returns the resolve value for a token
   */


  getTokenValue(token) {
    /* eslint-disable-next-line */
    let node = this;
    let value;

    while (node !== null) {
      if (DesignTokenNode.isDerivedFor(node, token)) {
        value = node._derived.get(token).value;
        break;
      }

      if (DesignTokenNode.isAssigned(node, token)) {
        value = node._values.get(token);
        break;
      }

      node = node._parent;
    }

    if (value !== undefined) {
      return value;
    } else {
      throw new Error(`No value set for token ${token} in node tree.`);
    }
  }
  /**
   * Deletes the token value for a node
   */


  deleteTokenValue(token) {
    if (DesignTokenNode.isAssigned(this, token)) {
      const prev = DesignTokenNode.getLocalTokenValue(this, token);

      this._values.delete(token);

      this.tearDownDerivedTokenValue(token);
      let newValue;

      try {
        newValue = this.getTokenValue(token);
      } catch (e) {
        newValue = undefined;
      }

      DesignTokenNode.queueNotification(new DesignTokenChangeRecordImpl(this, 2
      /* DesignTokenMutationType.delete */
      , token));

      if (prev !== newValue) {
        this.dispatch(new DesignTokenChangeRecordImpl(this, 2
        /* DesignTokenMutationType.delete */
        , token));
      }

      DesignTokenNode.notify();
    }
  }
  /**
   * Notifies that a token has been mutated
   */


  dispatch(record) {
    var _a, _b, _c;

    if (this !== record.target) {
      const {
        token
      } = record; // If the node is assigned the token being dispatched and the assigned value does not depend on the token
      // (circular token reference) then terminate the dispatch.

      const isAssigned = DesignTokenNode.isAssigned(this, token);
      const containsCircularForToken = isAssigned && ((_a = this._derived.get(token)) === null || _a === void 0 ? void 0 : _a.evaluator.dependencies.has(token));

      if (isAssigned && !containsCircularForToken) {
        return;
      } // Delete token evaluations if the token is not assigned explicitly but is derived for the node and
      // the record is a delete type.


      if (record.type === 2
      /* DesignTokenMutationType.delete */
      && !isAssigned && DesignTokenNode.isDerivedFor(this, token)) {
        this.tearDownDerivedTokenValue(token);
        DesignTokenNode.queueNotification(new DesignTokenChangeRecordImpl(this, 2
        /* DesignTokenMutationType.delete */
        , token));
      }

      if (containsCircularForToken) {
        record = new DesignTokenChangeRecordImpl(this, 1
        /* DesignTokenMutationType.change */
        , token, (_b = this._derived.get(token)) === null || _b === void 0 ? void 0 : _b.evaluator.value);
      }

      const {
        value
      } = record;

      if (value && DesignTokenNode.isDerivedTokenValue(value)) {
        const dependencies = DerivedValueEvaluator.getOrCreate(value).dependencies; // If this is not the originator, check to see if this node
        // has any dependencies of the token value. If so, we need to evaluate for this node

        let evaluate = false;

        for (const dependency of dependencies) {
          if (DesignTokenNode.isAssigned(this, dependency)) {
            evaluate = true;
            break;
          }
        }

        if (evaluate) {
          const prev = (_c = this._derived.get(token)) === null || _c === void 0 ? void 0 : _c.value;
          const derivedValue = this.setupDerivedTokenValue(token, value);

          if (prev !== derivedValue.value) {
            const type = prev === undefined ? 0
            /* DesignTokenMutationType.add */
            : 1
            /* DesignTokenMutationType.change */
            ;
            const notification = new DesignTokenChangeRecordImpl(this, type, token, derivedValue.evaluator.value);
            DesignTokenNode.queueNotification(notification);
            record = notification;
          }
        }
      }
    }

    this.collectLocalChangeRecords(record).forEach(_record => {
      DesignTokenNode.queueNotification(_record);
      this.dispatch(_record);
    });
    this.notifyChildren(record);
  }
  /**
   * Generate change-records for local dependencies of a change record
   */


  collectLocalChangeRecords(record) {
    const collected = new Map();

    for (const dependent of DesignTokenNode.getOrCreateDependencyGraph(this, record.token)) {
      if (dependent.value !== dependent.update().value) {
        collected.set(dependent.token, new DesignTokenChangeRecordImpl(this, 1
        /* DesignTokenMutationType.change */
        , dependent.token, dependent.evaluator.value));
      }
    }

    return collected;
  }
  /**
   *
   * Notify children of changes to the node
   */


  notifyChildren(...records) {
    if (this.children.length) {
      for (let i = 0, l = this.children.length; i < l; i++) {
        for (let j = 0; j < records.length; j++) {
          this.children[i].dispatch(records[j]);
        }
      }
    }
  }

  tearDownDerivedTokenValue(token) {
    if (DesignTokenNode.isDerivedFor(this, token)) {
      const value = this._derived.get(token);

      value.dispose();

      this._derived.delete(token);

      value.evaluator.dependencies.forEach(dependency => {
        DesignTokenNode.getOrCreateDependencyGraph(this, dependency).delete(value);
      });
    }
  }

  setupDerivedTokenValue(token, value, subscribeNode = false) {
    const deriver = new DerivedValue(token, DerivedValueEvaluator.getOrCreate(value), this, subscribeNode ? {
      handleChange: () => {
        if (deriver.value !== deriver.update().value) {
          const record = new DesignTokenChangeRecordImpl(this, 1
          /* DesignTokenMutationType.change */
          , deriver.token, deriver.evaluator.value);
          DesignTokenNode.queueNotification(record);
          this.dispatch(record);
          DesignTokenNode.notify();
        }
      }
    } : undefined);

    this._derived.set(token, deriver);

    deriver.evaluator.dependencies.forEach(dependency => {
      if (dependency !== token) {
        DesignTokenNode.getOrCreateDependencyGraph(this, dependency).add(deriver);
      }
    });
    return deriver;
  }

}
DesignTokenNode._notifications = [];

class QueuedStyleSheetTarget {
  setProperty(name, value) {
    Updates.enqueue(() => this.target.setProperty(name, value));
  }

  removeProperty(name) {
    Updates.enqueue(() => this.target.removeProperty(name));
  }

}
/**
 * Handles setting properties for a FASTElement using Constructable Stylesheets
 */


class ConstructableStyleSheetTarget extends QueuedStyleSheetTarget {
  constructor(source) {
    super();
    const sheet = new CSSStyleSheet();
    this.target = sheet.cssRules[sheet.insertRule(":host{}")].style;
    source.$fastController.addStyles(new ElementStyles([sheet]));
  }

}

class DocumentStyleSheetTarget extends QueuedStyleSheetTarget {
  constructor() {
    super();
    const sheet = new CSSStyleSheet();
    this.target = sheet.cssRules[sheet.insertRule(":root{}")].style;
    document.adoptedStyleSheets = [...document.adoptedStyleSheets, sheet];
  }

}

class HeadStyleElementStyleSheetTarget extends QueuedStyleSheetTarget {
  constructor() {
    super();
    this.style = document.createElement("style");
    document.head.appendChild(this.style);
    const {
      sheet
    } = this.style; // Because the HTMLStyleElement has been appended,
    // there shouldn't exist a case where `sheet` is null,
    // but if-check it just in case.

    if (sheet) {
      // https://github.com/jsdom/jsdom uses https://github.com/NV/CSSOM for it's CSSOM implementation,
      // which implements the DOM Level 2 spec for CSSStyleSheet where insertRule() requires an index argument.
      const index = sheet.insertRule(":root{}", sheet.cssRules.length);
      this.target = sheet.cssRules[index].style;
    }
  }

}
/**
 * Handles setting properties for a FASTElement using an HTMLStyleElement
 */


class StyleElementStyleSheetTarget {
  constructor(target) {
    this.store = new Map();
    this.target = null;
    const controller = target.$fastController;
    this.style = document.createElement("style");
    controller.addStyles(this.style);
    Observable.getNotifier(controller).subscribe(this, "isConnected");
    this.handleChange(controller, "isConnected");
  }

  targetChanged() {
    if (this.target !== null) {
      for (const [key, value] of this.store.entries()) {
        this.target.setProperty(key, value);
      }
    }
  }

  setProperty(name, value) {
    this.store.set(name, value);
    Updates.enqueue(() => {
      if (this.target !== null) {
        this.target.setProperty(name, value);
      }
    });
  }

  removeProperty(name) {
    this.store.delete(name);
    Updates.enqueue(() => {
      if (this.target !== null) {
        this.target.removeProperty(name);
      }
    });
  }

  handleChange(source, key) {
    // HTMLStyleElement.sheet is null if the element isn't connected to the DOM,
    // so this method reacts to changes in DOM connection for the element hosting
    // the HTMLStyleElement.
    //
    // All rules applied via the CSSOM also get cleared when the element disconnects,
    // so we need to add a new rule each time and populate it with the stored properties
    const {
      sheet
    } = this.style;

    if (sheet) {
      // Safari will throw if we try to use the return result of insertRule()
      // to index the rule inline, so store as a const prior to indexing.
      // https://github.com/jsdom/jsdom uses https://github.com/NV/CSSOM for it's CSSOM implementation,
      // which implements the DOM Level 2 spec for CSSStyleSheet where insertRule() requires an index argument.
      const index = sheet.insertRule(":host{}", sheet.cssRules.length);
      this.target = sheet.cssRules[index].style;
    } else {
      this.target = null;
    }
  }

}

__decorate([observable], StyleElementStyleSheetTarget.prototype, "target", void 0);
/**
 * Controls emission for default values. This control is capable
 * of emitting to multiple {@link PropertyTarget | PropertyTargets},
 * and only emits if it has at least one root.
 *
 * @internal
 */


class RootStyleSheetTarget {
  setProperty(name, value) {
    RootStyleSheetTarget.properties[name] = value;

    for (const target of RootStyleSheetTarget.roots.values()) {
      target.setProperty(name, value);
    }
  }

  removeProperty(name) {
    delete RootStyleSheetTarget.properties[name];

    for (const target of RootStyleSheetTarget.roots.values()) {
      target.removeProperty(name);
    }
  }

  static registerRoot(root) {
    const {
      roots
    } = RootStyleSheetTarget;

    if (!roots.has(root)) {
      roots.add(root);

      for (const key in RootStyleSheetTarget.properties) {
        root.setProperty(key, RootStyleSheetTarget.properties[key]);
      }
    }
  }

  static unregisterRoot(root) {
    const {
      roots
    } = RootStyleSheetTarget;

    if (roots.has(root)) {
      roots.delete(root);

      for (const key in RootStyleSheetTarget.properties) {
        root.removeProperty(key);
      }
    }
  }

}
RootStyleSheetTarget.roots = new Set();
RootStyleSheetTarget.properties = {}; // Caches PropertyTarget instances

const propertyTargetCache = new WeakMap(); // Use Constructable StyleSheets for FAST elements when supported, otherwise use
// HTMLStyleElement instances

const propertyTargetCtor = ElementStyles.supportsAdoptedStyleSheets ? ConstructableStyleSheetTarget : StyleElementStyleSheetTarget;
/**
 * Manages creation and caching of PropertyTarget instances.
 *
 * @internal
 */

const PropertyTargetManager = Object.freeze({
  getOrCreate(source) {
    if (propertyTargetCache.has(source)) {
      /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
      return propertyTargetCache.get(source);
    }

    let target;

    if (source instanceof Document) {
      target = ElementStyles.supportsAdoptedStyleSheets ? new DocumentStyleSheetTarget() : new HeadStyleElementStyleSheetTarget();
    } else {
      target = new propertyTargetCtor(source);
    }

    propertyTargetCache.set(source, target);
    return target;
  }

});

/**
 * @public
 */

class DesignToken {
  constructor(configuration) {
    this.subscriberNotifier = {
      handleChange: (source, change) => {
        const record = {
          target: change.target === FASTDesignTokenNode.defaultNode ? "default" : change.target.target,
          token: this
        };
        this.subscribers.notify(record);
      }
    };
    this.name = configuration.name;
    Observable.getNotifier(this).subscribe(this.subscriberNotifier);
  }
  /**
   * The default value of the token (alias of {@link DesignToken.default})
   */


  get $value() {
    return this.default;
  }
  /**
   * The default value of the token, or undefined if it has not been set.
   */


  get default() {
    return FASTDesignTokenNode.defaultNode.getTokenValue(this);
  }

  get subscribers() {
    if (this._subscribers) {
      return this._subscribers;
    }

    this._subscribers = new SubscriberSet(this);
    return this._subscribers;
  }

  static isCSSDesignTokenConfiguration(config) {
    return typeof config.cssCustomPropertyName === "string";
  }

  static create(config) {
    if (typeof config === "string") {
      return new CSSDesignToken({
        name: config,
        cssCustomPropertyName: config
      });
    } else {
      return DesignToken.isCSSDesignTokenConfiguration(config) ? new CSSDesignToken(config) : new DesignToken(config);
    }
  }
  /**
   * Configures the strategy for resolving hierarchical relationships between FASTElement targets.
   */


  static withStrategy(strategy) {
    FASTDesignTokenNode.withStrategy(strategy);
  }
  /**
   * Registers a target for emitting default style values.
   * {@link CSSDesignToken | CSSDesignTokens} with default values assigned via
   * {@link DesignToken.withDefault} will emit CSS custom properties to all
   * registered targets.
   * @param target - The target to register, defaults to the document
   */


  static registerDefaultStyleTarget(target = document) {
    if (target instanceof FASTElement || target instanceof Document) {
      target = PropertyTargetManager.getOrCreate(target);
    }

    RootStyleSheetTarget.registerRoot(target);
  }
  /**
   * Unregister a target for default style emission.
   * @param target - The root to deregister, defaults to the document
   */


  static unregisterDefaultStyleTarget(target = document) {
    if (target instanceof FASTElement || target instanceof Document) {
      target = PropertyTargetManager.getOrCreate(target);
    }

    RootStyleSheetTarget.unregisterRoot(target);
  }
  /**
   * Retrieves the value of the token for a target element.
   */


  getValueFor(target) {
    return FASTDesignTokenNode.getOrCreate(target).getTokenValue(this);
  }
  /**
   * Sets the value of the token for a target element.
   */


  setValueFor(target, value) {
    FASTDesignTokenNode.getOrCreate(target).setTokenValue(this, this.normalizeValue(value));
  }
  /**
   * Deletes the value of the token for a target element.
   */


  deleteValueFor(target) {
    FASTDesignTokenNode.getOrCreate(target).deleteTokenValue(this);
    return this;
  }
  /**
   * Sets the default value of the token.
   */


  withDefault(value) {
    FASTDesignTokenNode.defaultNode.setTokenValue(this, this.normalizeValue(value));
    return this;
  }
  /**
   * Subscribes a subscriber to notifications for the token.
   */


  subscribe(subscriber) {
    this.subscribers.subscribe(subscriber);
  }
  /**
   * Unsubscribes a subscriber to notifications for the token.
   */


  unsubscribe(subscriber) {
    this.subscribers.unsubscribe(subscriber);
  }
  /**
   * Alias the token to the provided token.
   * @param token - the token to alias to
   */


  alias(token) {
    return resolve => resolve(token);
  }

  normalizeValue(value) {
    if (value instanceof DesignToken) {
      value = this.alias(value);
    }

    return value;
  }

}
/**
 * @public
 */

let CSSDesignToken = class CSSDesignToken extends DesignToken {
  constructor(configuration) {
    super(configuration);
    this.cssReflector = {
      handleChange: (source, record) => {
        const target = record.target === FASTDesignTokenNode.defaultNode ? FASTDesignTokenNode.rootStyleSheetTarget : record.target instanceof FASTDesignTokenNode ? PropertyTargetManager.getOrCreate(record.target.target) : null;

        if (target) {
          if (record.type === 2
          /* DesignTokenMutationType.delete */
          ) {
            target.removeProperty(this.cssCustomProperty);
          } else {
            target.setProperty(this.cssCustomProperty, this.resolveCSSValue(record.target.getTokenValue(this)));
          }
        }
      }
    };
    this.cssCustomProperty = `--${configuration.cssCustomPropertyName}`;
    this.cssVar = `var(${this.cssCustomProperty})`;
    Observable.getNotifier(this).subscribe(this.cssReflector);
  }
  /**
   * The DesignToken represented as a string that can be used in CSS.
   */


  createCSS() {
    return this.cssVar;
  }
  /**
   * Creates HTML to be used within a template.
   */


  createHTML() {
    return this.cssVar;
  }

  resolveCSSValue(value) {
    return value && typeof value.createCSS === "function" ? value.createCSS() : value;
  }

};
CSSDesignToken = __decorate([cssDirective(), htmlDirective()], CSSDesignToken);
const defaultDesignTokenResolutionStrategy = {
  contains: composedContains,

  parent(element) {
    let parent = composedParent(element);

    while (parent !== null) {
      if (parent instanceof FASTElement) {
        return parent;
      }

      parent = composedParent(parent);
    }

    return null;
  }

};

class FASTDesignTokenNode extends DesignTokenNode {
  constructor(target) {
    super();
    this.target = target; // By default, nodes are not attached to the defaultNode for performance
    // reasons. However, that behavior can throw if retrieval for a node
    // happens before the bind() method is called. To guard against that,
    //  lazily attach to the defaultNode when get/set/delete methods are called.

    this.setTokenValue = this.lazyAttachToDefault(super.setTokenValue);
    this.getTokenValue = this.lazyAttachToDefault(super.getTokenValue);
    this.deleteTokenValue = this.lazyAttachToDefault(super.deleteTokenValue);
  }

  static get strategy() {
    if (this._strategy === undefined) {
      FASTDesignTokenNode.withStrategy(defaultDesignTokenResolutionStrategy);
    }

    return this._strategy;
  }

  connectedCallback(controller) {
    let parent = FASTDesignTokenNode.findParent(controller.source);

    if (parent === null) {
      parent = FASTDesignTokenNode.defaultNode;
    }

    if (parent !== this.parent) {
      const reparent = [];

      for (const child of parent.children) {
        if (child instanceof FASTDesignTokenNode && FASTDesignTokenNode.strategy.contains(controller.source, child.target)) {
          reparent.push(child);
        }
      }

      parent.appendChild(this);

      for (const child of reparent) {
        this.appendChild(child);
      }
    }
  }

  disconnectedCallback(controller) {
    FASTDesignTokenNode.cache.delete(this.target);
    this.dispose();
  }

  static getOrCreate(target) {
    let found = FASTDesignTokenNode.cache.get(target);

    if (found) {
      return found;
    }

    found = new FASTDesignTokenNode(target);
    FASTDesignTokenNode.cache.set(target, found);
    target.$fastController.addBehavior(FASTDesignTokenNode.strategy);
    target.$fastController.addBehavior(found);
    return found;
  }

  static withStrategy(strategy) {
    this._strategy = strategy;
  }

  static findParent(target) {
    let current = FASTDesignTokenNode.strategy.parent(target);

    while (current !== null) {
      const node = FASTDesignTokenNode.cache.get(current);

      if (node) {
        return node;
      }

      current = FASTDesignTokenNode.strategy.parent(current);
    }

    return null;
  }
  /**
   * Creates a function from a function that lazily attaches the node to the default node.
   */


  lazyAttachToDefault(fn) {
    const cb = (...args) => {
      if (this.parent === null) {
        FASTDesignTokenNode.defaultNode.appendChild(this);
      }

      return fn.apply(this, args);
    };

    return cb;
  }

}

FASTDesignTokenNode.defaultNode = new DesignTokenNode();
FASTDesignTokenNode.rootStyleSheetTarget = new RootStyleSheetTarget();
FASTDesignTokenNode.cache = new WeakMap();

/**
 * The template for the {@link @microsoft/fast-foundation#FASTDialog} component.
 * @public
 */

function dialogTemplate() {
  return html`<div class="positioning-region" part="positioning-region">${when(x => x.modal, html`<div class="overlay" part="overlay" role="presentation" @click="${x => x.dismiss()}"></div>`)}<div role="dialog" tabindex="-1" class="control" part="control" aria-modal="${x => x.modal ? x.modal : void 0}" aria-describedby="${x => x.ariaDescribedby}" aria-labelledby="${x => x.ariaLabelledby}" aria-label="${x => x.ariaLabel}" ${ref("dialog")}><slot></slot></div></div>`;
}

/*!
* tabbable 5.3.1
* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
*/
var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])', 'details>summary:first-of-type', 'details'];
var candidateSelector = /* #__PURE__ */candidateSelectors.join(',');
var NoElement = typeof Element === 'undefined';
var matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {
  return element.getRootNode();
} : function (element) {
  return element.ownerDocument;
};

var getTabindex = function getTabindex(node, isScope) {
  if (node.tabIndex < 0) {
    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
    // yet they are still part of the regular tab order; in FF, they get a default
    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab
    // order, consider their tab index to be 0.
    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;
    // so if they don't have a tabindex attribute specifically set, assume it's 0.
    //
    // isScope is positive for custom element with shadow root or slot that by default
    // have tabIndex -1, but need to be sorted by document order in order for their
    // content to be inserted in the correct position
    if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || node.isContentEditable) && isNaN(parseInt(node.getAttribute('tabindex'), 10))) {
      return 0;
    }
  }

  return node.tabIndex;
};

var isInput = function isInput(node) {
  return node.tagName === 'INPUT';
};

var isHiddenInput = function isHiddenInput(node) {
  return isInput(node) && node.type === 'hidden';
};

var isDetailsWithSummary = function isDetailsWithSummary(node) {
  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
    return child.tagName === 'SUMMARY';
  });
  return r;
};

var getCheckedRadio = function getCheckedRadio(nodes, form) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked && nodes[i].form === form) {
      return nodes[i];
    }
  }
};

var isTabbableRadio = function isTabbableRadio(node) {
  if (!node.name) {
    return true;
  }

  var radioScope = node.form || getRootNode(node);

  var queryRadios = function queryRadios(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };

  var radioSet;

  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);
      return false;
    }
  }

  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};

var isRadio = function isRadio(node) {
  return isInput(node) && node.type === 'radio';
};

var isNonTabbableRadio = function isNonTabbableRadio(node) {
  return isRadio(node) && !isTabbableRadio(node);
};

var isZeroArea = function isZeroArea(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(),
      width = _node$getBoundingClie.width,
      height = _node$getBoundingClie.height;

  return width === 0 && height === 0;
};

var isHidden = function isHidden(node, _ref) {
  var displayCheck = _ref.displayCheck,
      getShadowRoot = _ref.getShadowRoot;

  if (getComputedStyle(node).visibility === 'hidden') {
    return true;
  }

  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;

  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
    return true;
  }

  if (!displayCheck || displayCheck === 'full') {
    if (typeof getShadowRoot === 'function') {
      // figure out if we should consider the node to be in an undisclosed shadow and use the
      //  'non-zero-area' fallback
      var originalNode = node;

      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);

        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow
        ) {
          // node has an undisclosed shadow which means we can only treat it as a black box, so we
          //  fall back to a non-zero-area test
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          // iterate up slot
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          // cross shadow boundary
          node = rootNode.host;
        } else {
          // iterate up normal dom
          node = parentElement;
        }
      }

      node = originalNode;
    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
    //  it might be a falsy value, which means shadow DOM support is disabled
    // didn't find it sitting in an undisclosed shadow (or shadows are disabled) so now we
    //  can just test to see if it would normally be visible or not
    // this works wherever the node is: if there's at least one client rect, it's
    //  somehow displayed; it also covers the CSS 'display: contents' case where the
    //  node itself is hidden in place of its contents; and there's no need to search
    //  up the hierarchy either


    return !node.getClientRects().length;
  } else if (displayCheck === 'non-zero-area') {
    return isZeroArea(node);
  }

  return false;
}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable
//  unless they are in the _first_ <legend> element of the top-most disabled
//  fieldset


var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>

    while (parentNode) {
      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
        // look for the first <legend> among the children of the disabled <fieldset>
        for (var i = 0; i < parentNode.children.length; i++) {
          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found

          if (child.tagName === 'LEGEND') {
            // if its parent <fieldset> is not nested in another disabled <fieldset>,
            // return whether `node` is a descendant of its first <legend>
            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);
          }
        } // the disabled <fieldset> containing `node` has no <legend>


        return true;
      }

      parentNode = parentNode.parentElement;
    }
  } // else, node's tabbable/focusable state should not be affected by a fieldset's
  //  enabled/disabled state


  return false;
};

var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
  if (node.disabled || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }

  return true;
};

var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {
  if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }

  return true;
};

var isTabbable = function isTabbable(node, options) {
  options = options || {};

  if (!node) {
    throw new Error('No node provided');
  }

  if (matches.call(node, candidateSelector) === false) {
    return false;
  }

  return isNodeMatchingSelectorTabbable(options, node);
};

var focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');

var isFocusable = function isFocusable(node, options) {
  options = options || {};

  if (!node) {
    throw new Error('No node provided');
  }

  if (matches.call(node, focusableCandidateSelector) === false) {
    return false;
  }

  return isNodeMatchingSelectorFocusable(options, node);
};

/**
 * A Switch Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#dialog | ARIA dialog }.
 *
 * @slot - The default slot for the dialog content
 * @csspart positioning-region - A wrapping element used to center the dialog and position the modal overlay
 * @csspart overlay - The modal dialog overlay
 * @csspart control - The dialog element
 * @fires cancel - Fires a custom 'cancel' event when the modal overlay is clicked
 * @fires close - Fires a custom 'close' event when the dialog is hidden
 *
 * @public
 */

class FASTDialog extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * Indicates the element is modal. When modal, user mouse interaction will be limited to the contents of the element by a modal
     * overlay.  Clicks on the overlay will cause the dialog to emit a "dismiss" event.
     * @public
     * @defaultValue - false
     * @remarks
     * HTML Attribute: modal
     */

    this.modal = false;
    /**
     * The hidden state of the element.
     *
     * @public
     * @defaultValue - false
     * @remarks
     * HTML Attribute: hidden
     */

    this.hidden = false;
    /**
     * Indicates that the dialog should not trap focus.
     *
     * @public
     * @defaultValue - true
     * @remarks
     * HTML Attribute: no-focus-trap
     */

    this.noFocusTrap = false;

    this.noFocusTrapChanged = () => {
      if (this.$fastController.isConnected) {
        this.updateTrapFocus();
      }
    };
    /**
     * @internal
     */


    this.isTrappingFocus = false;

    this.handleDocumentKeydown = e => {
      if (!e.defaultPrevented && !this.hidden) {
        switch (e.key) {
          case keyEscape:
            this.dismiss();
            e.preventDefault();
            break;

          case keyTab:
            this.handleTabKeyDown(e);
            break;
        }
      }
    };

    this.handleDocumentFocus = e => {
      if (!e.defaultPrevented && this.shouldForceFocus(e.target)) {
        this.focusFirstElement();
        e.preventDefault();
      }
    };

    this.handleTabKeyDown = e => {
      if (this.noFocusTrap || this.hidden) {
        return;
      }

      const bounds = this.getTabQueueBounds();

      if (bounds.length === 0) {
        return;
      }

      if (bounds.length === 1) {
        // keep focus on single element
        bounds[0].focus();
        e.preventDefault();
        return;
      }

      if (e.shiftKey && e.target === bounds[0]) {
        bounds[bounds.length - 1].focus();
        e.preventDefault();
      } else if (!e.shiftKey && e.target === bounds[bounds.length - 1]) {
        bounds[0].focus();
        e.preventDefault();
      }

      return;
    };

    this.getTabQueueBounds = () => {
      const bounds = [];
      return FASTDialog.reduceTabbableItems(bounds, this);
    };
    /**
     * focus on first element of tab queue
     */


    this.focusFirstElement = () => {
      const bounds = this.getTabQueueBounds();

      if (bounds.length > 0) {
        bounds[0].focus();
      } else {
        if (this.dialog instanceof HTMLElement) {
          this.dialog.focus();
        }
      }
    };
    /**
     * we should only focus if focus has not already been brought to the dialog
     */


    this.shouldForceFocus = currentFocusElement => {
      return this.isTrappingFocus && !this.contains(currentFocusElement);
    };
    /**
     * we should we be active trapping focus
     */


    this.shouldTrapFocus = () => {
      return !this.noFocusTrap && !this.hidden;
    };
    /**
     *
     *
     * @internal
     */


    this.updateTrapFocus = shouldTrapFocusOverride => {
      const shouldTrapFocus = shouldTrapFocusOverride === undefined ? this.shouldTrapFocus() : shouldTrapFocusOverride;

      if (shouldTrapFocus && !this.isTrappingFocus) {
        this.isTrappingFocus = true; // Add an event listener for focusin events if we are trapping focus

        document.addEventListener("focusin", this.handleDocumentFocus);
        Updates.enqueue(() => {
          if (this.shouldForceFocus(document.activeElement)) {
            this.focusFirstElement();
          }
        });
      } else if (!shouldTrapFocus && this.isTrappingFocus) {
        this.isTrappingFocus = false; // remove event listener if we are not trapping focus

        document.removeEventListener("focusin", this.handleDocumentFocus);
      }
    };
  }
  /**
   * @internal
   */


  dismiss() {
    this.$emit("dismiss"); // implement `<dialog>` interface

    this.$emit("cancel");
  }
  /**
   * The method to show the dialog.
   *
   * @public
   */


  show() {
    this.hidden = false;
  }
  /**
   * The method to hide the dialog.
   *
   * @public
   */


  hide() {
    this.hidden = true; // implement `<dialog>` interface

    this.$emit("close");
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    document.addEventListener("keydown", this.handleDocumentKeydown);
    this.notifier = Observable.getNotifier(this);
    this.notifier.subscribe(this, "hidden");
    this.updateTrapFocus();
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    super.disconnectedCallback(); // remove keydown event listener

    document.removeEventListener("keydown", this.handleDocumentKeydown); // if we are trapping focus remove the focusin listener

    this.updateTrapFocus(false);
    this.notifier.unsubscribe(this, "hidden");
  }
  /**
   * @internal
   */


  handleChange(source, propertyName) {
    switch (propertyName) {
      case "hidden":
        this.updateTrapFocus();
        break;
    }
  }
  /**
   * Reduce a collection to only its focusable elements.
   *
   * @param elements - Collection of elements to reduce
   * @param element - The current element
   *
   * @internal
   */


  static reduceTabbableItems(elements, element) {
    if (element.getAttribute("tabindex") === "-1") {
      return elements;
    }

    if (isTabbable(element) || FASTDialog.isFocusableFastElement(element) && FASTDialog.hasTabbableShadow(element)) {
      elements.push(element);
      return elements;
    }

    if (element.childElementCount) {
      return elements.concat(Array.from(element.children).reduce(FASTDialog.reduceTabbableItems, []));
    }

    return elements;
  }
  /**
   * Test if element is focusable fast element
   *
   * @param element - The element to check
   *
   * @internal
   */


  static isFocusableFastElement(element) {
    var _a, _b;

    return !!((_b = (_a = element.$fastController) === null || _a === void 0 ? void 0 : _a.definition.shadowOptions) === null || _b === void 0 ? void 0 : _b.delegatesFocus);
  }
  /**
   * Test if the element has a focusable shadow
   *
   * @param element - The element to check
   *
   * @internal
   */


  static hasTabbableShadow(element) {
    var _a, _b;

    return Array.from((_b = (_a = element.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelectorAll("*")) !== null && _b !== void 0 ? _b : []).some(x => {
      return isTabbable(x);
    });
  }

}

__decorate([attr({
  mode: "boolean"
})], FASTDialog.prototype, "modal", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTDialog.prototype, "hidden", void 0);

__decorate([attr({
  attribute: "no-focus-trap",
  mode: "boolean"
})], FASTDialog.prototype, "noFocusTrap", void 0);

__decorate([attr({
  attribute: "aria-describedby"
})], FASTDialog.prototype, "ariaDescribedby", void 0);

__decorate([attr({
  attribute: "aria-labelledby"
})], FASTDialog.prototype, "ariaLabelledby", void 0);

__decorate([attr({
  attribute: "aria-label"
})], FASTDialog.prototype, "ariaLabel", void 0);

const observer = new MutationObserver(mutations => {
  for (const mutation of mutations) {
    AttributeReflectionSubscriptionSet.getOrCreateFor(mutation.target).notify(mutation.attributeName);
  }
});

class AttributeReflectionSubscriptionSet {
  constructor(element) {
    this.element = element;
    this.watchedAttributes = new Set();
    this.subscribers = new SubscriberSet(this);
    AttributeReflectionSubscriptionSet.subscriberCache.set(element, this);
  }

  notify(attr) {
    this.subscribers.notify(attr);
  }

  subscribe(subscriber) {
    this.subscribers.subscribe(subscriber);

    if (!this.watchedAttributes.has(subscriber.attributes)) {
      this.watchedAttributes.add(subscriber.attributes);
      this.observe();
    }
  }

  unsubscribe(subscriber) {
    this.subscribers.unsubscribe(subscriber);

    if (this.watchedAttributes.has(subscriber.attributes)) {
      this.watchedAttributes.delete(subscriber.attributes);
      this.observe();
    }
  }

  observe() {
    const attributeFilter = [];

    for (const attributes of this.watchedAttributes.values()) {
      for (let i = 0; i < attributes.length; i++) {
        attributeFilter.push(attributes[i]);
      }
    }

    observer.observe(this.element, {
      attributeFilter
    });
  }

  static getOrCreateFor(source) {
    return this.subscriberCache.get(source) || new AttributeReflectionSubscriptionSet(source);
  }

}

AttributeReflectionSubscriptionSet.subscriberCache = new WeakMap();

class ReflectAttributesDirective extends StatelessAttachedAttributeDirective {
  constructor(attributes) {
    super(attributes);
    this.attributes = Object.freeze(attributes);
  }

  bind(controller) {
    const source = controller.source;
    const subscription = AttributeReflectionSubscriptionSet.getOrCreateFor(source);
    subscription[this.id] = controller.targets[this.targetNodeId];
    subscription.subscribe(this); // Reflect any existing attributes because MutationObserver will only
    // handle *changes* to attributes.

    if (source.hasAttributes()) {
      for (let i = 0; i < source.attributes.length; i++) {
        this.handleChange(subscription, source.attributes[i].name);
      }
    }
  }

  unbind(controller) {
    AttributeReflectionSubscriptionSet.getOrCreateFor(controller.source).unsubscribe(this);
  }

  handleChange(source, arg) {
    // In cases where two or more ReflectAttrBehavior instances are bound to the same element,
    // they will share a Subscriber implementation. In that case, this handle change can be invoked with
    // attributes an instances doesn't need to reflect. This guards against reflecting attrs
    // that shouldn't be reflected.
    if (this.attributes.includes(arg)) {
      const element = source.element;
      const target = source[this.id];
      DOM.setAttribute(target, arg, element.getAttribute(arg));
    }
  }

}

HTMLDirective.define(ReflectAttributesDirective);
/**
 * Reflects attributes from the host element to the target element of the directive.
 * @param attributes - The attributes to reflect
 *
 * @beta
 * @example
 * ```ts
 * const template = html`
 *     <button
 *         ${reflectAttributes("aria-label", "aria-describedby")}
 *     >
 *          hello world
 *     </button
 * `
 * ```
 */

function reflectAttributes(...attributes) {
  return new ReflectAttributesDirective(attributes);
}

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTDisclosure:class)} component.
 * @public
 */

function disclosureTemplate(options = {}) {
  return html`<details class="disclosure" ${ref("details")}><summary class="invoker" role="button" aria-controls="disclosure-content" aria-expanded="${x => x.expanded}">${startSlotTemplate(options)}<slot name="summary">${x => x.summary}</slot>${endSlotTemplate(options)}</summary><div id="disclosure-content"><slot></slot></div></details>`;
}

/**
 * A Disclosure Custom HTML Element.
 * Based largely on the {@link https://w3c.github.io/aria-practices/#disclosure | disclosure element }.
 *
 * @slot start - Content which can be provided before the summary content
 * @slot end - Content which can be provided after the summary content
 * @slot title - The summary content
 * @slot - The default slot for the disclosure content
 * @fires toggle - fires a toggle event when the summary is toggled
 *
 * @public
 */

class FASTDisclosure extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * Determines if the element should show the extra content or not.
     *
     * @public
     */

    this.expanded = false;
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.setup();
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    super.disconnectedCallback();
    this.details.removeEventListener("toggle", this.onToggle);
  }
  /**
   * Show extra content.
   */


  show() {
    this.details.open = true;
  }
  /**
   * Hide extra content.
   */


  hide() {
    this.details.open = false;
  }
  /**
   * Toggle the current(expanded/collapsed) state.
   */


  toggle() {
    this.details.open = !this.details.open;
  }
  /**
   * Register listener and set default disclosure mode
   */


  setup() {
    this.onToggle = this.onToggle.bind(this);
    this.details.addEventListener("toggle", this.onToggle);

    if (this.expanded) {
      this.show();
    }
  }
  /**
   * Update the aria attr and fire `toggle` event
   */


  onToggle() {
    this.expanded = this.details.open;
    this.$emit("toggle");
  }

}

__decorate([attr({
  mode: "boolean"
})], FASTDisclosure.prototype, "expanded", void 0);

__decorate([attr], FASTDisclosure.prototype, "summary", void 0);

applyMixins(FASTDisclosure, StartEnd);

/**
 * Divider roles
 * @public
 */

const DividerRole = {
  /**
   * The divider semantically separates content
   */
  separator: "separator",

  /**
   * The divider has no semantic value and is for visual presentation only.
   */
  presentation: "presentation"
};
/**
 * Divider orientation
 * @public
 */

const DividerOrientation = Orientation;

/**
 * The template for the {@link @microsoft/fast-foundation#FASTDivider} component.
 * @public
 */

function dividerTemplate() {
  return html`<template role="${x => x.role}" aria-orientation="${x => x.orientation}"><slot></slot></template>`;
}

/**
 * A Divider Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#separator | ARIA separator } or {@link https://www.w3.org/TR/wai-aria-1.1/#presentation | ARIA presentation}.
 *
 * @public
 */

class FASTDivider extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * The role of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: role
     */

    this.role = DividerRole.separator;
    /**
     * The orientation of the divider.
     *
     * @public
     * @remarks
     * HTML Attribute: orientation
     */

    this.orientation = DividerOrientation.horizontal;
  }

}

__decorate([attr], FASTDivider.prototype, "role", void 0);

__decorate([attr], FASTDivider.prototype, "orientation", void 0);

/**
 * The template for the {@link @microsoft/fast-foundation#FASTFlipper} component.
 * @public
 */

function flipperTemplate(options = {}) {
  const templateCache = {};

  function setFlipperTemplateByDirection(direction, options) {
    let existing = templateCache[direction];

    if (!existing) {
      templateCache[direction] = existing = html`<span part="${direction}" class="${direction}"><slot name="${direction}">${staticallyCompose(options[direction])}</slot></span>`;
    }

    return existing;
  }

  return html`<template role="button" aria-disabled="${x => x.disabled ? true : void 0}" tabindex="${x => x.hiddenFromAT ? -1 : 0}" @keyup="${(x, c) => x.keyupHandler(c.event)}">${x => setFlipperTemplateByDirection(x.direction, options)}</template>`;
}

/**
 * The direction options for flipper.
 * @public
 */
const FlipperDirection = {
  next: "next",
  previous: "previous"
};

/**
 * A Flipper Custom HTML Element.
 * Flippers are a form of button that implies directional content navigation, such as in a carousel.
 *
 * @slot next - The next flipper content
 * @slot previous - The previous flipper content
 * @csspart next - Wraps the next flipper content
 * @csspart previous - Wraps the previous flipper content
 * @fires click - Fires a custom 'click' event when Enter or Space is invoked via keyboard and the flipper is exposed to assistive technologies.
 *
 * @public
 */

class FASTFlipper extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * Indicates the flipper should be hidden from assistive technology. Because flippers are often supplementary navigation, they are often hidden from assistive technology.
     *
     * @public
     * @defaultValue - true
     * @remarks
     * HTML Attribute: aria-hidden
     */

    this.hiddenFromAT = true;
    /**
     * The direction that the flipper implies navigating.
     *
     * @public
     * @remarks
     * HTML Attribute: direction
     */

    this.direction = FlipperDirection.next;
  }
  /**
   * Simulate a click event when the flipper has focus and the user hits enter or space keys
   * Blur focus if the user hits escape key
   * @param e - Keyboard event
   * @public
   */


  keyupHandler(e) {
    if (!this.hiddenFromAT) {
      const key = e.key;

      if (key === "Enter" || key === "Space") {
        this.$emit("click", e);
      }

      if (key === "Escape") {
        this.blur();
      }
    }
  }

}

__decorate([attr({
  mode: "boolean"
})], FASTFlipper.prototype, "disabled", void 0);

__decorate([attr({
  attribute: "aria-hidden",
  converter: booleanConverter
})], FASTFlipper.prototype, "hiddenFromAT", void 0);

__decorate([attr], FASTFlipper.prototype, "direction", void 0);

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTListboxOption:class)} component.
 * @public
 */

function listboxOptionTemplate(options = {}) {
  return html`<template aria-checked="${x => x.ariaChecked}" aria-disabled="${x => x.ariaDisabled}" aria-posinset="${x => x.ariaPosInSet}" aria-selected="${x => x.ariaSelected}" aria-setsize="${x => x.ariaSetSize}" role="option">${startSlotTemplate(options)}<span class="content" part="content"><slot ${slotted("content")}></slot></span>${endSlotTemplate(options)}</template>`;
}

/**
 * A Listbox Custom HTML Element.
 * Implements the {@link https://w3c.github.io/aria/#listbox | ARIA listbox }.
 *
 * @public
 */

class FASTListboxElement extends FASTListbox {
  constructor() {
    super(...arguments);
    /**
     * The index of the most recently checked option.
     *
     * @internal
     * @remarks
     * Multiple-selection mode only.
     */

    this.activeIndex = -1;
    /**
     * The start index when checking a range of options.
     *
     * @internal
     */

    this.rangeStartIndex = -1;
  }
  /**
   * Returns the last checked option.
   *
   * @internal
   */


  get activeOption() {
    return this.options[this.activeIndex];
  }
  /**
   * Returns the list of checked options.
   *
   * @internal
   */


  get checkedOptions() {
    var _a;

    return (_a = this.options) === null || _a === void 0 ? void 0 : _a.filter(o => o.checked);
  }
  /**
   * Returns the index of the first selected option.
   *
   * @internal
   */


  get firstSelectedOptionIndex() {
    return this.options.indexOf(this.firstSelectedOption);
  }
  /**
   * Updates the `ariaActiveDescendant` property when the active index changes.
   *
   * @param prev - the previous active index
   * @param next - the next active index
   *
   * @internal
   */


  activeIndexChanged(prev, next) {
    var _a, _b;

    this.ariaActiveDescendant = (_b = (_a = this.options[next]) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : "";
    this.focusAndScrollOptionIntoView();
  }
  /**
   * Toggles the checked state for the currently active option.
   *
   * @remarks
   * Multiple-selection mode only.
   *
   * @internal
   */


  checkActiveIndex() {
    if (!this.multiple) {
      return;
    }

    const activeItem = this.activeOption;

    if (activeItem) {
      activeItem.checked = true;
    }
  }
  /**
   * Sets the active index to the first option and marks it as checked.
   *
   * @remarks
   * Multi-selection mode only.
   *
   * @param preserveChecked - mark all options unchecked before changing the active index
   *
   * @internal
   */


  checkFirstOption(preserveChecked = false) {
    if (preserveChecked) {
      if (this.rangeStartIndex === -1) {
        this.rangeStartIndex = this.activeIndex + 1;
      }

      this.options.forEach((o, i) => {
        o.checked = inRange(i, this.rangeStartIndex);
      });
    } else {
      this.uncheckAllOptions();
    }

    this.activeIndex = 0;
    this.checkActiveIndex();
  }
  /**
   * Decrements the active index and sets the matching option as checked.
   *
   * @remarks
   * Multi-selection mode only.
   *
   * @param preserveChecked - mark all options unchecked before changing the active index
   *
   * @internal
   */


  checkLastOption(preserveChecked = false) {
    if (preserveChecked) {
      if (this.rangeStartIndex === -1) {
        this.rangeStartIndex = this.activeIndex;
      }

      this.options.forEach((o, i) => {
        o.checked = inRange(i, this.rangeStartIndex, this.options.length);
      });
    } else {
      this.uncheckAllOptions();
    }

    this.activeIndex = this.options.length - 1;
    this.checkActiveIndex();
  }
  /**
   * @override
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("focusout", this.focusoutHandler);
  }
  /**
   * @override
   * @internal
   */


  disconnectedCallback() {
    this.removeEventListener("focusout", this.focusoutHandler);
    super.disconnectedCallback();
  }
  /**
   * Increments the active index and marks the matching option as checked.
   *
   * @remarks
   * Multiple-selection mode only.
   *
   * @param preserveChecked - mark all options unchecked before changing the active index
   *
   * @internal
   */


  checkNextOption(preserveChecked = false) {
    if (preserveChecked) {
      if (this.rangeStartIndex === -1) {
        this.rangeStartIndex = this.activeIndex;
      }

      this.options.forEach((o, i) => {
        o.checked = inRange(i, this.rangeStartIndex, this.activeIndex + 1);
      });
    } else {
      this.uncheckAllOptions();
    }

    this.activeIndex += this.activeIndex < this.options.length - 1 ? 1 : 0;
    this.checkActiveIndex();
  }
  /**
   * Decrements the active index and marks the matching option as checked.
   *
   * @remarks
   * Multiple-selection mode only.
   *
   * @param preserveChecked - mark all options unchecked before changing the active index
   *
   * @internal
   */


  checkPreviousOption(preserveChecked = false) {
    if (preserveChecked) {
      if (this.rangeStartIndex === -1) {
        this.rangeStartIndex = this.activeIndex;
      }

      if (this.checkedOptions.length === 1) {
        this.rangeStartIndex += 1;
      }

      this.options.forEach((o, i) => {
        o.checked = inRange(i, this.activeIndex, this.rangeStartIndex);
      });
    } else {
      this.uncheckAllOptions();
    }

    this.activeIndex -= this.activeIndex > 0 ? 1 : 0;
    this.checkActiveIndex();
  }
  /**
   * Handles click events for listbox options.
   *
   * @param e - the event object
   *
   * @override
   * @internal
   */


  clickHandler(e) {
    var _a;

    if (!this.multiple) {
      return super.clickHandler(e);
    }

    const captured = (_a = e.target) === null || _a === void 0 ? void 0 : _a.closest(`[role=option]`);

    if (!captured || captured.disabled) {
      return;
    }

    this.uncheckAllOptions();
    this.activeIndex = this.options.indexOf(captured);
    this.checkActiveIndex();
    this.toggleSelectedForAllCheckedOptions();
    return true;
  }
  /**
   * @override
   * @internal
   */


  focusAndScrollOptionIntoView() {
    super.focusAndScrollOptionIntoView(this.activeOption);
  }
  /**
   * In multiple-selection mode:
   * If any options are selected, the first selected option is checked when
   * the listbox receives focus. If no options are selected, the first
   * selectable option is checked.
   *
   * @override
   * @internal
   */


  focusinHandler(e) {
    if (!this.multiple) {
      return super.focusinHandler(e);
    }

    if (!this.shouldSkipFocus && e.target === e.currentTarget) {
      this.uncheckAllOptions();

      if (this.activeIndex === -1) {
        this.activeIndex = this.firstSelectedOptionIndex !== -1 ? this.firstSelectedOptionIndex : 0;
      }

      this.checkActiveIndex();
      this.setSelectedOptions();
      this.focusAndScrollOptionIntoView();
    }

    this.shouldSkipFocus = false;
  }
  /**
   * Unchecks all options when the listbox loses focus.
   *
   * @internal
   */


  focusoutHandler(e) {
    if (this.multiple) {
      this.uncheckAllOptions();
    }
  }
  /**
   * Handles keydown actions for listbox navigation and typeahead
   *
   * @override
   * @internal
   */


  keydownHandler(e) {
    if (!this.multiple) {
      return super.keydownHandler(e);
    }

    if (this.disabled) {
      return true;
    }

    const {
      key,
      shiftKey
    } = e;
    this.shouldSkipFocus = false;

    switch (key) {
      // Select the first available option
      case keyHome:
        {
          this.checkFirstOption(shiftKey);
          return;
        }
      // Select the next selectable option

      case keyArrowDown:
        {
          this.checkNextOption(shiftKey);
          return;
        }
      // Select the previous selectable option

      case keyArrowUp:
        {
          this.checkPreviousOption(shiftKey);
          return;
        }
      // Select the last available option

      case keyEnd:
        {
          this.checkLastOption(shiftKey);
          return;
        }

      case keyTab:
        {
          this.focusAndScrollOptionIntoView();
          return true;
        }

      case keyEscape:
        {
          this.uncheckAllOptions();
          this.checkActiveIndex();
          return true;
        }

      case keySpace:
        {
          e.preventDefault();

          if (this.typeAheadExpired) {
            this.toggleSelectedForAllCheckedOptions();
            return;
          }
        }
      // Send key to Typeahead handler

      default:
        {
          if (key.length === 1) {
            this.handleTypeAhead(`${key}`);
          }

          return true;
        }
    }
  }
  /**
   * Prevents `focusin` events from firing before `click` events when the
   * element is unfocused.
   *
   * @override
   * @internal
   */


  mousedownHandler(e) {
    if (e.offsetX >= 0 && e.offsetX <= this.scrollWidth) {
      return super.mousedownHandler(e);
    }
  }
  /**
   * Switches between single-selection and multi-selection mode.
   *
   * @internal
   */


  multipleChanged(prev, next) {
    var _a;

    this.ariaMultiSelectable = next ? "true" : null;
    (_a = this.options) === null || _a === void 0 ? void 0 : _a.forEach(o => {
      o.checked = next ? false : undefined;
    });
    this.setSelectedOptions();
  }
  /**
   * Sets an option as selected and gives it focus.
   *
   * @override
   * @public
   */


  setSelectedOptions() {
    if (!this.multiple) {
      super.setSelectedOptions();
      return;
    }

    if (this.$fastController.isConnected && this.options) {
      this.selectedOptions = this.options.filter(o => o.selected);
      this.focusAndScrollOptionIntoView();
    }
  }
  /**
   * Ensures the size is a positive integer when the property is updated.
   *
   * @param prev - the previous size value
   * @param next - the current size value
   *
   * @internal
   */


  sizeChanged(prev, next) {
    var _a;

    const size = Math.max(0, parseInt((_a = next === null || next === void 0 ? void 0 : next.toFixed()) !== null && _a !== void 0 ? _a : "", 10));

    if (size !== next) {
      Updates.enqueue(() => {
        this.size = size;
      });
    }
  }
  /**
   * Toggles the selected state of the provided options. If any provided items
   * are in an unselected state, all items are set to selected. If every
   * provided item is selected, they are all unselected.
   *
   * @internal
   */


  toggleSelectedForAllCheckedOptions() {
    const enabledCheckedOptions = this.checkedOptions.filter(o => !o.disabled);
    const force = !enabledCheckedOptions.every(o => o.selected);
    enabledCheckedOptions.forEach(o => o.selected = force);
    this.selectedIndex = this.options.indexOf(enabledCheckedOptions[enabledCheckedOptions.length - 1]);
    this.setSelectedOptions();
  }
  /**
   * @override
   * @internal
   */


  typeaheadBufferChanged(prev, next) {
    if (!this.multiple) {
      super.typeaheadBufferChanged(prev, next);
      return;
    }

    if (this.$fastController.isConnected) {
      const typeaheadMatches = this.getTypeaheadMatches();
      const activeIndex = this.options.indexOf(typeaheadMatches[0]);

      if (activeIndex > -1) {
        this.activeIndex = activeIndex;
        this.uncheckAllOptions();
        this.checkActiveIndex();
      }

      this.typeAheadExpired = false;
    }
  }
  /**
   * Unchecks all options.
   *
   * @remarks
   * Multiple-selection mode only.
   *
   * @param preserveChecked - reset the rangeStartIndex
   *
   * @internal
   */


  uncheckAllOptions(preserveChecked = false) {
    this.options.forEach(o => o.checked = this.multiple ? false : undefined);

    if (!preserveChecked) {
      this.rangeStartIndex = -1;
    }
  }

}

__decorate([observable], FASTListboxElement.prototype, "activeIndex", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTListboxElement.prototype, "multiple", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTListboxElement.prototype, "size", void 0);

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTListbox:class)} component.
 * @public
 */

function listboxTemplate() {
  return html`<template aria-activedescendant="${x => x.ariaActiveDescendant}" aria-multiselectable="${x => x.ariaMultiSelectable}" role="listbox" tabindex="${x => !x.disabled ? "0" : null}" @click="${(x, c) => x.clickHandler(c.event)}" @focusin="${(x, c) => x.focusinHandler(c.event)}" @keydown="${(x, c) => x.keydownHandler(c.event)}" @mousedown="${(x, c) => x.mousedownHandler(c.event)}"><slot ${slotted({
    filter: FASTListboxElement.slottedOptionFilter,
    flatten: true,
    property: "slottedOptions"
  })}></slot></template>`;
}

const defaultContentsTemplate$1 = html`<template>${x => x.value}</template>`;
/**
 * A picker list item Custom HTML Element.
 *
 * @beta
 */

class FASTPickerListItem extends FASTElement {
  contentsTemplateChanged() {
    if (this.$fastController.isConnected) {
      this.updateView();
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.updateView();
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    this.disconnectView();
    super.disconnectedCallback();
  }

  handleKeyDown(e) {
    if (e.defaultPrevented) {
      return false;
    }

    if (e.key === keyEnter) {
      this.handleInvoke();
      return false;
    }

    return true;
  }

  handleClick(e) {
    if (!e.defaultPrevented) {
      this.handleInvoke();
    }

    return false;
  }

  handleInvoke() {
    this.$emit("pickeriteminvoked");
  }

  updateView() {
    var _a, _b;

    this.disconnectView();
    this.customView = (_b = (_a = this.contentsTemplate) === null || _a === void 0 ? void 0 : _a.render(this, this)) !== null && _b !== void 0 ? _b : defaultContentsTemplate$1.render(this, this);
  }

  disconnectView() {
    var _a;

    (_a = this.customView) === null || _a === void 0 ? void 0 : _a.dispose();
    this.customView = undefined;
  }

}

__decorate([attr({
  attribute: "value"
})], FASTPickerListItem.prototype, "value", void 0);

__decorate([observable], FASTPickerListItem.prototype, "contentsTemplate", void 0);

/**
 *
 * @public
 */

function pickerListItemTemplate() {
  return html`<template role="listitem" tabindex="0" @click="${(x, c) => x.handleClick(c.event)}" @keydown="${(x, c) => x.handleKeyDown(c.event)}"><slot></slot></template>`;
}

/**
 * A List Picker Menu Custom HTML Element.
 *
 * @beta
 */

class FASTPickerList extends FASTElement {}

/**
 *
 * @public
 */

function pickerListTemplate() {
  return html`<template slot="list-region" role="list"><slot></slot><slot name="input-region"></slot></template>`;
}

const defaultContentsTemplate = html`<template>${x => x.value}</template>`;
/**
 * A picker list item Custom HTML Element.
 *
 * @beta
 */

class FASTPickerMenuOption extends FASTElement {
  contentsTemplateChanged() {
    if (this.$fastController.isConnected) {
      this.updateView();
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.updateView();
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    super.disconnectedCallback();
    this.disconnectView();
  }

  handleClick(e) {
    if (e.defaultPrevented) {
      return false;
    }

    this.handleInvoked();
    return false;
  }

  handleInvoked() {
    this.$emit("pickeroptioninvoked");
  }

  updateView() {
    var _a, _b;

    this.disconnectView();
    this.customView = (_b = (_a = this.contentsTemplate) === null || _a === void 0 ? void 0 : _a.render(this, this)) !== null && _b !== void 0 ? _b : defaultContentsTemplate.render(this, this);
  }

  disconnectView() {
    var _a;

    (_a = this.customView) === null || _a === void 0 ? void 0 : _a.dispose();
    this.customView = undefined;
  }

}

__decorate([attr({
  attribute: "value"
})], FASTPickerMenuOption.prototype, "value", void 0);

__decorate([observable], FASTPickerMenuOption.prototype, "contentsTemplate", void 0);

/**
 *
 * @public
 */

function pickerMenuOptionTemplate() {
  return html`<template role="listitem" tabindex="-1" @click="${(x, c) => x.handleClick(c.event)}"><slot></slot></template>`;
}

/**
 * A List Picker Menu Custom HTML Element.
 *
 * @beta
 */

class FASTPickerMenu extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * Children that are list items
     *
     * @internal
     */

    this.optionElements = [];
  }

  menuElementsChanged() {
    this.updateOptions();
  }

  headerElementsChanged() {
    this.updateOptions();
  }

  footerElementsChanged() {
    this.updateOptions();
  }

  updateOptions() {
    this.optionElements.splice(0, this.optionElements.length);
    this.addSlottedListItems(this.headerElements);
    this.addSlottedListItems(this.menuElements);
    this.addSlottedListItems(this.footerElements);
    this.$emit("optionsupdated", {
      bubbles: false
    });
  }

  addSlottedListItems(slotChildren) {
    if (slotChildren === undefined) {
      return;
    }

    slotChildren.forEach(child => {
      if (child.nodeType === 1 && child.getAttribute("role") === "listitem") {
        child.id = child.id || uniqueId("option-");
        this.optionElements.push(child);
      }
    });
  }

}

__decorate([observable], FASTPickerMenu.prototype, "menuElements", void 0);

__decorate([observable], FASTPickerMenu.prototype, "headerElements", void 0);

__decorate([observable], FASTPickerMenu.prototype, "footerElements", void 0);

__decorate([observable], FASTPickerMenu.prototype, "suggestionsAvailableText", void 0);

/**
 * The template for the List Picker component.
 * @public
 */

function pickerMenuTemplate() {
  return html`<template role="list" slot="menu-region"><div class="options-display" part="options-display"><div class="header-region" part="header-region"><slot name="header-region" ${slotted("headerElements")}></slot></div><slot ${slotted("menuElements")}></slot><div class="footer-region" part="footer-region"><slot name="footer-region" ${slotted("footerElements")}></slot></div><div role="alert" aria-live="polite" part="suggestions-available-alert" class="suggestions-available-alert">${x => x.suggestionsAvailableText}</div></div></template>`;
}

class _Picker extends FASTElement {}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(FASTPicker:class)} component.
 *
 * @beta
 */


class FormAssociatedPicker extends FormAssociated(_Picker) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }

}

/**
 * vertical positioning values for an anchored region
 * @beta
 */
const MenuPlacement = {
  bottom: "bottom",
  bottomFill: "bottom-fill",
  tallest: "tallest",
  tallestFill: "tallest-fill",
  top: "top",
  topFill: "top-fill"
};

const pickerInputTemplate = html`<input slot="input-region" role="combobox" type="text" autocapitalize="off" autocomplete="off" haspopup="list" aria-label="${x => x.label}" aria-labelledby="${x => x.labelledBy}" placeholder="${x => x.placeholder}" ${ref("inputElement")} />`;
/**
 * A Picker Custom HTML Element.  This is an early "alpha" version of the component.
 * Developers should expect the api to evolve, breaking changes are possible.
 *
 * @beta
 */

class FASTPicker extends FormAssociatedPicker {
  constructor() {
    super(...arguments);
    /**
     * Currently selected items. Comma delineated string ie. "apples,oranges".
     *
     * @remarks
     * HTML Attribute: selection
     */

    this.selection = "";
    /**
     * Whether the component should remove an option from the list when it is in the selection
     *
     * @remarks
     * HTML Attribute: filter-selected
     */

    this.filterSelected = true;
    /**
     * Whether the component should remove options based on the current query
     *
     * @remarks
     * HTML Attribute: filter-query
     */

    this.filterQuery = true;
    /**
     * The text to present to assistive technolgies when no suggestions are available.
     *
     * @remarks
     * HTML Attribute: no-suggestions-text
     */

    this.noSuggestionsText = "No suggestions available";
    /**
     *  The text to present to assistive technolgies when suggestions are available.
     *
     * @remarks
     * HTML Attribute: suggestions-available-text
     */

    this.suggestionsAvailableText = "Suggestions available";
    /**
     * The text to present to assistive technologies when suggestions are loading.
     *
     * @remarks
     * HTML Attribute: loading-text
     */

    this.loadingText = "Loading suggestions";
    /**
     * Controls menu placement
     *
     * @remarks
     * HTML Attribute: menu-placement
     */

    this.menuPlacement = MenuPlacement.bottomFill;
    /**
     * Whether to display a loading state if the menu is opened.
     *
     */

    this.showLoading = false;
    /**
     *  Current list of options in array form
     *
     */

    this.optionsList = [];
    /**
     *  Current list of filtered options in array form
     *
     * @internal
     */

    this.filteredOptionsList = [];
    /**
     *  Indicates if the flyout menu is open or not
     *
     * @internal
     */

    this.flyoutOpen = false;
    /**
     *  Index of currently active menu option
     *
     * @internal
     */

    this.menuFocusIndex = -1;
    /**
     *  Internal flag to indicate no options available display should be shown.
     *
     * @internal
     */

    this.showNoOptions = false;
    /**
     *
     *
     * @internal
     */

    this.selectedItems = [];
    this.inputElementView = null;
    this.behaviorOrchestrator = null;
    /**
     * Handle input event from input element
     */

    this.handleTextInput = e => {
      this.query = this.inputElement.value;
    };
    /**
     * Handle click event from input element
     */


    this.handleInputClick = e => {
      e.preventDefault();
      this.toggleFlyout(true);
    };
    /**
     * Sets properties on the anchored region once it is instanciated.
     */


    this.setRegionProps = () => {
      if (!this.flyoutOpen) {
        return;
      }

      if (this.region === null || this.region === undefined) {
        // TODO: limit this
        Updates.enqueue(this.setRegionProps);
        return;
      }

      this.region.anchorElement = this.inputElement;
    };
    /**
     * matches menu placement values with the associated menu config
     */


    this.configLookup = {
      top: FlyoutPosTop,
      bottom: FlyoutPosBottom,
      tallest: FlyoutPosTallest,
      "top-fill": FlyoutPosTopFill,
      "bottom-fill": FlyoutPosBottomFill,
      "tallest-fill": FlyoutPosTallestFill
    };
  }

  selectionChanged() {
    if (this.$fastController.isConnected) {
      this.handleSelectionChange();

      if (this.proxy instanceof HTMLInputElement) {
        this.proxy.value = this.selection;
        this.validate();
      }
    }
  }

  optionsChanged() {
    this.optionsList = this.options.split(",").map(opt => opt.trim()).filter(opt => opt !== "");
  }

  menuPlacementChanged() {
    if (this.$fastController.isConnected) {
      this.updateMenuConfig();
    }
  }

  showLoadingChanged() {
    if (this.$fastController.isConnected) {
      Updates.enqueue(() => {
        this.setFocusedOption(0);
      });
    }
  }

  listItemTemplateChanged() {
    this.updateListItemTemplate();
  }

  defaultListItemTemplateChanged() {
    this.updateListItemTemplate();
  }

  menuOptionTemplateChanged() {
    this.updateOptionTemplate();
  }

  defaultMenuOptionTemplateChanged() {
    this.updateOptionTemplate();
  }

  optionsListChanged() {
    this.updateFilteredOptions();
  }

  queryChanged() {
    if (this.$fastController.isConnected) {
      if (this.inputElement.value !== this.query) {
        this.inputElement.value = this.query;
      }

      this.updateFilteredOptions();
      this.$emit("querychange", {
        bubbles: false
      });
    }
  }

  filteredOptionsListChanged() {
    if (this.$fastController.isConnected) {
      this.showNoOptions = this.filteredOptionsList.length === 0 && this.menuElement.querySelectorAll('[role="listitem"]').length === 0;
      this.setFocusedOption(this.showNoOptions ? -1 : 0);
    }
  }

  flyoutOpenChanged() {
    if (this.flyoutOpen) {
      Updates.enqueue(this.setRegionProps);
      this.$emit("menuopening", {
        bubbles: false
      });
    } else {
      this.$emit("menuclosing", {
        bubbles: false
      });
    }
  }

  showNoOptionsChanged() {
    if (this.$fastController.isConnected) {
      Updates.enqueue(() => {
        this.setFocusedOption(0);
      });
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();

    if (!this.listElement) {
      this.listElement = document.createElement(this.selectedListTag);
      this.appendChild(this.listElement);
      this.itemsPlaceholderElement = document.createComment("");
      this.listElement.appendChild(this.itemsPlaceholderElement);
    }

    this.inputElementView = pickerInputTemplate.render(this, this.listElement);
    const match = this.menuTag.toUpperCase();
    this.menuElement = Array.from(this.children).find(element => {
      return element.tagName === match;
    });

    if (!this.menuElement) {
      this.menuElement = document.createElement(this.menuTag);
      this.appendChild(this.menuElement);

      if (this.menuElement.id === "") {
        this.menuElement.id = uniqueId("listbox-");
      }

      this.menuId = this.menuElement.id;
    }

    if (!this.optionsPlaceholder) {
      this.optionsPlaceholder = document.createComment("");
      this.menuElement.appendChild(this.optionsPlaceholder);
    }

    this.updateMenuConfig();
    Updates.enqueue(() => this.initialize());
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this.toggleFlyout(false);
    this.inputElement.removeEventListener("input", this.handleTextInput);
    this.inputElement.removeEventListener("click", this.handleInputClick);

    if (this.inputElementView !== null) {
      this.inputElementView.dispose();
      this.inputElementView = null;
    }
  }
  /**
   * Move focus to the input element
   * @public
   */


  focus() {
    this.inputElement.focus();
  }
  /**
   * Initialize the component.  This is delayed a frame to ensure children are connected as well.
   */


  initialize() {
    this.updateListItemTemplate();
    this.updateOptionTemplate();

    if (this.behaviorOrchestrator === null) {
      this.behaviorOrchestrator = ViewBehaviorOrchestrator.create(this);
      this.$fastController.addBehavior(this.behaviorOrchestrator);
      this.behaviorOrchestrator.addBehaviorFactory(new RepeatDirective(oneWay(x => x.selectedItems), oneWay(x => x.activeListItemTemplate), {
        positioning: true
      }), this.itemsPlaceholderElement);
      this.behaviorOrchestrator.addBehaviorFactory(new RepeatDirective(oneWay(x => x.filteredOptionsList), oneWay(x => x.activeMenuOptionTemplate), {
        positioning: true
      }), this.optionsPlaceholder);
    }

    this.inputElement.addEventListener("input", this.handleTextInput);
    this.inputElement.addEventListener("click", this.handleInputClick);
    this.menuElement.suggestionsAvailableText = this.suggestionsAvailableText;
    this.menuElement.addEventListener("optionsupdated", this.handleMenuOptionsUpdated);
    this.handleSelectionChange();
  }
  /**
   * Toggles the menu flyout
   */


  toggleFlyout(open) {
    if (this.flyoutOpen === open) {
      return;
    }

    if (open && this.getRootActiveElement() === this.inputElement) {
      this.flyoutOpen = open;
      Updates.enqueue(() => {
        if (this.menuElement !== undefined) {
          this.setFocusedOption(0);
        } else {
          this.disableMenu();
        }
      });
      return;
    }

    this.flyoutOpen = false;
    this.disableMenu();
    return;
  }
  /**
   * Handle the menu options updated event from the child menu
   */


  handleMenuOptionsUpdated(e) {
    e.preventDefault();

    if (this.flyoutOpen) {
      this.setFocusedOption(0);
    }
  }
  /**
   * Handle key down events.
   */


  handleKeyDown(e) {
    if (e.defaultPrevented) {
      return false;
    }

    const activeElement = this.getRootActiveElement();

    switch (e.key) {
      // TODO: what should "home" and "end" keys do, exactly?
      //
      // case keyHome: {
      //     if (!this.flyoutOpen) {
      //         this.toggleFlyout(true);
      //     } else {
      //         if (this.menuElement.optionElements.length > 0) {
      //             this.setFocusedOption(0);
      //         }
      //     }
      //     return false;
      // }
      // case keyEnd: {
      //     if (!this.flyoutOpen) {
      //         this.toggleFlyout(true);
      //     } else {
      //         if (this.menuElement.optionElements.length > 0) {
      //             this.toggleFlyout(true);
      //             this.setFocusedOption(this.menuElement.optionElements.length - 1);
      //         }
      //     }
      //     return false;
      // }
      case keyArrowDown:
        {
          if (!this.flyoutOpen) {
            this.toggleFlyout(true);
          } else {
            const nextFocusOptionIndex = this.flyoutOpen ? Math.min(this.menuFocusIndex + 1, this.menuElement.optionElements.length - 1) : 0;
            this.setFocusedOption(nextFocusOptionIndex);
          }

          return false;
        }

      case keyArrowUp:
        {
          if (!this.flyoutOpen) {
            this.toggleFlyout(true);
          } else {
            const previousFocusOptionIndex = this.flyoutOpen ? Math.max(this.menuFocusIndex - 1, 0) : 0;
            this.setFocusedOption(previousFocusOptionIndex);
          }

          return false;
        }

      case keyEscape:
        {
          this.toggleFlyout(false);
          return false;
        }

      case keyEnter:
        {
          if (this.menuFocusIndex !== -1 && this.menuElement.optionElements.length > this.menuFocusIndex) {
            this.menuElement.optionElements[this.menuFocusIndex].click();
          }

          return false;
        }

      case keyArrowRight:
        {
          if (activeElement !== this.inputElement) {
            this.incrementFocusedItem(1);
            return false;
          } // don't block if arrow keys moving caret in input element


          return true;
        }

      case keyArrowLeft:
        {
          if (this.inputElement.selectionStart === 0) {
            this.incrementFocusedItem(-1);
            return false;
          } // don't block if arrow keys moving caret in input element


          return true;
        }

      case keyDelete:
      case keyBackspace:
        {
          if (activeElement === null) {
            return true;
          }

          if (activeElement === this.inputElement) {
            if (this.inputElement.selectionStart === 0) {
              this.selection = this.selectedItems.slice(0, this.selectedItems.length - 1).toString();
              this.toggleFlyout(false);
              return false;
            } // let text deletion proceed


            return true;
          }

          const selectedItems = Array.from(this.listElement.children);
          const currentFocusedItemIndex = selectedItems.indexOf(activeElement);

          if (currentFocusedItemIndex > -1) {
            // delete currently focused item
            this.selection = this.selectedItems.splice(currentFocusedItemIndex, 1).toString();
            Updates.enqueue(() => {
              selectedItems[Math.min(selectedItems.length, currentFocusedItemIndex)].focus();
            });
            return false;
          }

          return true;
        }
    }

    this.toggleFlyout(true);
    return true;
  }
  /**
   * Handle focus in events.
   */


  handleFocusIn(e) {
    return false;
  }
  /**
   * Handle focus out events.
   */


  handleFocusOut(e) {
    if (this.menuElement === undefined || !this.menuElement.contains(e.relatedTarget)) {
      this.toggleFlyout(false);
    }

    return false;
  }
  /**
   * The list of selected items has changed
   */


  handleSelectionChange() {
    if (this.selectedItems.toString() === this.selection) {
      return;
    }

    this.selectedItems = this.selection === "" ? [] : this.selection.split(",");
    this.updateFilteredOptions();
    Updates.enqueue(() => {
      this.checkMaxItems();
    });
    this.$emit("selectionchange", {
      bubbles: false
    });
  }
  /**
   * Anchored region is loaded, menu and options exist in the DOM.
   */


  handleRegionLoaded(e) {
    Updates.enqueue(() => {
      this.setFocusedOption(0);
      this.$emit("menuloaded", {
        bubbles: false
      });
    });
  }
  /**
   * Checks if the maximum number of items has been chosen and updates the ui.
   */


  checkMaxItems() {
    if (this.inputElement === undefined) {
      return;
    }

    if (this.maxSelected !== undefined && this.selectedItems.length >= this.maxSelected) {
      if (this.getRootActiveElement() === this.inputElement) {
        const selectedItemInstances = Array.from(this.listElement.querySelectorAll("[role='listitem']"));
        selectedItemInstances[selectedItemInstances.length - 1].focus();
      }

      this.inputElement.hidden = true;
    } else {
      this.inputElement.hidden = false;
    }
  }

  getRootActiveElement() {
    const rootNode = this.getRootNode();

    if (rootNode instanceof ShadowRoot) {
      return rootNode.activeElement;
    }

    return document.activeElement;
  }
  /**
   * A list item has been invoked.
   */


  handleItemInvoke(e) {
    if (e.defaultPrevented) {
      return false;
    }

    if (e.target instanceof FASTPickerListItem) {
      const listItems = Array.from(this.listElement.querySelectorAll("[role='listitem']"));
      const itemIndex = listItems.indexOf(e.target);

      if (itemIndex !== -1) {
        const newSelection = this.selectedItems.slice();
        newSelection.splice(itemIndex, 1);
        this.selection = newSelection.toString();
        Updates.enqueue(() => this.incrementFocusedItem(0));
      }

      return false;
    }

    return true;
  }
  /**
   * A menu option has been invoked.
   */


  handleOptionInvoke(e) {
    if (e.defaultPrevented) {
      return false;
    }

    if (e.target instanceof FASTPickerMenuOption) {
      if (e.target.value !== undefined) {
        this.selection = `${this.selection}${this.selection === "" ? "" : ","}${e.target.value}`;
      }

      this.inputElement.value = "";
      this.query = "";
      this.inputElement.focus();
      this.toggleFlyout(false);
      return false;
    } // const value: string = (e.target as PickerMenuOption).value;


    return true;
  }
  /**
   * Increments the focused list item by the specified amount
   */


  incrementFocusedItem(increment) {
    if (this.selectedItems.length === 0) {
      this.inputElement.focus();
      return;
    }

    const selectedItemsAsElements = Array.from(this.listElement.querySelectorAll("[role='listitem']"));
    const activeElement = this.getRootActiveElement();

    if (activeElement !== null) {
      let currentFocusedItemIndex = selectedItemsAsElements.indexOf(activeElement);

      if (currentFocusedItemIndex === -1) {
        // use the input element
        currentFocusedItemIndex = selectedItemsAsElements.length;
      }

      const newFocusedItemIndex = Math.min(selectedItemsAsElements.length, Math.max(0, currentFocusedItemIndex + increment));

      if (newFocusedItemIndex === selectedItemsAsElements.length) {
        if (this.maxSelected !== undefined && this.selectedItems.length >= this.maxSelected) {
          selectedItemsAsElements[newFocusedItemIndex - 1].focus();
        } else {
          this.inputElement.focus();
        }
      } else {
        selectedItemsAsElements[newFocusedItemIndex].focus();
      }
    }
  }
  /**
   * Disables the menu. Note that the menu can be open, just doens't have any valid options on display.
   */


  disableMenu() {
    var _a, _b, _c;

    this.menuFocusIndex = -1;
    this.menuFocusOptionId = undefined;
    (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.removeAttribute("aria-activedescendant");
    (_b = this.inputElement) === null || _b === void 0 ? void 0 : _b.removeAttribute("aria-owns");
    (_c = this.inputElement) === null || _c === void 0 ? void 0 : _c.removeAttribute("aria-expanded");
  }
  /**
   * Sets the currently focused menu option by index
   */


  setFocusedOption(optionIndex) {
    if (!this.flyoutOpen || optionIndex === -1 || this.showNoOptions || this.showLoading) {
      this.disableMenu();
      return;
    }

    if (this.menuElement.optionElements.length === 0) {
      return;
    }

    this.menuElement.optionElements.forEach(element => {
      element.setAttribute("aria-selected", "false");
    });
    this.menuFocusIndex = optionIndex;

    if (this.menuFocusIndex > this.menuElement.optionElements.length - 1) {
      this.menuFocusIndex = this.menuElement.optionElements.length - 1;
    }

    this.menuFocusOptionId = this.menuElement.optionElements[this.menuFocusIndex].id;
    this.inputElement.setAttribute("aria-owns", this.menuId);
    this.inputElement.setAttribute("aria-expanded", "true");
    this.inputElement.setAttribute("aria-activedescendant", this.menuFocusOptionId);
    const focusedOption = this.menuElement.optionElements[this.menuFocusIndex];
    focusedOption.setAttribute("aria-selected", "true");
    this.menuElement.scrollTo(0, focusedOption.offsetTop);
  }
  /**
   * Updates the template used for the list item repeat behavior
   */


  updateListItemTemplate() {
    var _a;

    this.activeListItemTemplate = (_a = this.listItemTemplate) !== null && _a !== void 0 ? _a : this.defaultListItemTemplate;
  }
  /**
   * Updates the template used for the menu option repeat behavior
   */


  updateOptionTemplate() {
    var _a;

    this.activeMenuOptionTemplate = (_a = this.menuOptionTemplate) !== null && _a !== void 0 ? _a : this.defaultMenuOptionTemplate;
  }
  /**
   * Updates the filtered options array
   */


  updateFilteredOptions() {
    this.filteredOptionsList = this.optionsList.slice(0);

    if (this.filterSelected) {
      this.filteredOptionsList = this.filteredOptionsList.filter(el => this.selectedItems.indexOf(el) === -1);
    }

    if (this.filterQuery && this.query !== "" && this.query !== undefined) {
      this.filteredOptionsList = this.filteredOptionsList.filter(el => el.indexOf(this.query) !== -1);
    }
  }
  /**
   * Updates the menu configuration
   */


  updateMenuConfig() {
    let newConfig = this.configLookup[this.menuPlacement];

    if (newConfig === null) {
      newConfig = FlyoutPosBottomFill;
    }

    this.menuConfig = Object.assign(Object.assign({}, newConfig), {
      autoUpdateMode: "auto",
      fixedPlacement: true,
      horizontalViewportLock: false,
      verticalViewportLock: false
    });
  }

}

__decorate([attr({
  attribute: "selection"
})], FASTPicker.prototype, "selection", void 0);

__decorate([attr({
  attribute: "options"
})], FASTPicker.prototype, "options", void 0);

__decorate([attr({
  attribute: "filter-selected",
  mode: "boolean"
})], FASTPicker.prototype, "filterSelected", void 0);

__decorate([attr({
  attribute: "filter-query",
  mode: "boolean"
})], FASTPicker.prototype, "filterQuery", void 0);

__decorate([attr({
  attribute: "max-selected"
})], FASTPicker.prototype, "maxSelected", void 0);

__decorate([attr({
  attribute: "no-suggestions-text"
})], FASTPicker.prototype, "noSuggestionsText", void 0);

__decorate([attr({
  attribute: "suggestions-available-text"
})], FASTPicker.prototype, "suggestionsAvailableText", void 0);

__decorate([attr({
  attribute: "loading-text"
})], FASTPicker.prototype, "loadingText", void 0);

__decorate([attr({
  attribute: "label"
})], FASTPicker.prototype, "label", void 0);

__decorate([attr({
  attribute: "labelledby"
})], FASTPicker.prototype, "labelledBy", void 0);

__decorate([attr({
  attribute: "placeholder"
})], FASTPicker.prototype, "placeholder", void 0);

__decorate([attr({
  attribute: "menu-placement"
})], FASTPicker.prototype, "menuPlacement", void 0);

__decorate([observable], FASTPicker.prototype, "showLoading", void 0);

__decorate([observable], FASTPicker.prototype, "listItemTemplate", void 0);

__decorate([observable], FASTPicker.prototype, "defaultListItemTemplate", void 0);

__decorate([observable], FASTPicker.prototype, "activeListItemTemplate", void 0);

__decorate([observable], FASTPicker.prototype, "menuOptionTemplate", void 0);

__decorate([observable], FASTPicker.prototype, "defaultMenuOptionTemplate", void 0);

__decorate([observable], FASTPicker.prototype, "activeMenuOptionTemplate", void 0);

__decorate([observable], FASTPicker.prototype, "listItemContentsTemplate", void 0);

__decorate([observable], FASTPicker.prototype, "menuOptionContentsTemplate", void 0);

__decorate([observable], FASTPicker.prototype, "optionsList", void 0);

__decorate([observable], FASTPicker.prototype, "query", void 0);

__decorate([observable], FASTPicker.prototype, "filteredOptionsList", void 0);

__decorate([observable], FASTPicker.prototype, "flyoutOpen", void 0);

__decorate([observable], FASTPicker.prototype, "menuId", void 0);

__decorate([observable], FASTPicker.prototype, "selectedListTag", void 0);

__decorate([observable], FASTPicker.prototype, "menuTag", void 0);

__decorate([observable], FASTPicker.prototype, "menuFocusIndex", void 0);

__decorate([observable], FASTPicker.prototype, "menuFocusOptionId", void 0);

__decorate([observable], FASTPicker.prototype, "showNoOptions", void 0);

__decorate([observable], FASTPicker.prototype, "menuConfig", void 0);

__decorate([observable], FASTPicker.prototype, "selectedItems", void 0);

function defaultListItemTemplate(options) {
  const pickerListItemTag = html.partial(tagFor(options.pickerListItem));
  return html`<${pickerListItemTag} value="${x => x}" :contentsTemplate="${(x, c) => c.parent.listItemContentsTemplate}"></${pickerListItemTag}>`;
}

function defaultMenuOptionTemplate(options) {
  const pickerMenuOptionTag = html.partial(tagFor(options.pickerMenuOption));
  return html`<${pickerMenuOptionTag} value="${x => x}" :contentsTemplate="${(x, c) => c.parent.menuOptionContentsTemplate}"></${pickerMenuOptionTag}>`;
}
/**
 * The template for the List Picker component.
 * @public
 */


function pickerTemplate(options) {
  const anchoredRegionTag = html.partial(tagFor(options.anchoredRegion));
  const pickerMenuTag = tagFor(options.pickerMenu);
  const pickerListTag = tagFor(options.pickerList);
  const progressRingTag = html.partial(tagFor(options.progressRing));
  return html`<template :selectedListTag="${() => pickerListTag}" :menuTag="${() => pickerMenuTag}" :defaultListItemTemplate="${defaultListItemTemplate(options)}" :defaultMenuOptionTemplate="${defaultMenuOptionTemplate(options)}" @focusin="${(x, c) => x.handleFocusIn(c.event)}" @focusout="${(x, c) => x.handleFocusOut(c.event)}" @keydown="${(x, c) => x.handleKeyDown(c.event)}" @pickeriteminvoked="${(x, c) => x.handleItemInvoke(c.event)}" @pickeroptioninvoked="${(x, c) => x.handleOptionInvoke(c.event)}"><slot name="list-region"></slot>${when(x => x.flyoutOpen, html`<${anchoredRegionTag} class="region" part="region" auto-update-mode="${x => x.menuConfig.autoUpdateMode}" fixed-placement="${x => x.menuConfig.fixedPlacement}" vertical-positioning-mode="${x => x.menuConfig.verticalPositioningMode}" vertical-default-position="${x => x.menuConfig.verticalDefaultPosition}" vertical-scaling="${x => x.menuConfig.verticalScaling}" vertical-inset="${x => x.menuConfig.verticalInset}" vertical-viewport-lock="${x => x.menuConfig.verticalViewportLock}" horizontal-positioning-mode="${x => x.menuConfig.horizontalPositioningMode}" horizontal-default-position="${x => x.menuConfig.horizontalDefaultPosition}" horizontal-scaling="${x => x.menuConfig.horizontalScaling}" horizontal-inset="${x => x.menuConfig.horizontalInset}" horizontal-viewport-lock="${x => x.menuConfig.horizontalViewportLock}" @loaded="${(x, c) => x.handleRegionLoaded(c.event)}" ${ref("region")}>${when(x => !x.showNoOptions && !x.showLoading, html`<slot name="menu-region"></slot>`)} ${when(x => x.showNoOptions && !x.showLoading, html`<div class="no-options-display" part="no-options-display"><slot name="no-options-region">${x => x.noSuggestionsText}</slot></div>`)} ${when(x => x.showLoading, html`<div class="loading-display" part="loading-display"><slot name="loading-region"><${progressRingTag} part="loading-progress" class="loading-progress" slot="loading-region"></${progressRingTag}>${x => x.loadingText}</slot></div>`)}</${anchoredRegionTag}>`)}</template>`;
}

/**
 * Menu items roles.
 * @public
 */
const MenuItemRole = {
  /**
   * The menu item has a "menuitem" role
   */
  menuitem: "menuitem",

  /**
   * The menu item has a "menuitemcheckbox" role
   */
  menuitemcheckbox: "menuitemcheckbox",

  /**
   * The menu item has a "menuitemradio" role
   */
  menuitemradio: "menuitemradio"
};
/**
 * @internal
 */

const roleForMenuItem = {
  [MenuItemRole.menuitem]: "menuitem",
  [MenuItemRole.menuitemcheckbox]: "menuitemcheckbox",
  [MenuItemRole.menuitemradio]: "menuitemradio"
};

/**
 * Generates a template for the {@link @microsoft/fast-foundation#(FASTMenuItem:class)} component using
 * the provided prefix.
 *
 * @public
 */

function menuItemTemplate(options = {}) {
  return html`<template aria-haspopup="${x => x.hasSubmenu ? "menu" : void 0}" aria-checked="${x => x.role !== MenuItemRole.menuitem ? x.checked : void 0}" aria-disabled="${x => x.disabled}" aria-expanded="${x => x.expanded}" @keydown="${(x, c) => x.handleMenuItemKeyDown(c.event)}" @click="${(x, c) => x.handleMenuItemClick(c.event)}" @mouseover="${(x, c) => x.handleMouseOver(c.event)}" @mouseout="${(x, c) => x.handleMouseOut(c.event)}">${when(x => x.role === MenuItemRole.menuitemcheckbox, html`<div part="input-container" class="input-container"><span part="checkbox" class="checkbox"><slot name="checkbox-indicator">${staticallyCompose(options.checkboxIndicator)}</slot></span></div>`)} ${when(x => x.role === MenuItemRole.menuitemradio, html`<div part="input-container" class="input-container"><span part="radio" class="radio"><slot name="radio-indicator">${staticallyCompose(options.radioIndicator)}</slot></span></div>`)}</div>${startSlotTemplate(options)}<span class="content" part="content"><slot></slot></span>${endSlotTemplate(options)} ${when(x => x.hasSubmenu, html`<div part="expand-collapse-glyph-container" class="expand-collapse-glyph-container"><span part="expand-collapse" class="expand-collapse"><slot name="expand-collapse-indicator">${staticallyCompose(options.expandCollapseGlyph)}</slot></span></div>`)}<span ?hidden="${x => !x.expanded}" class="submenu-container" part="submenu-container" ${ref("submenuContainer")}><slot name="submenu" ${slotted({
    property: "slottedSubmenu",
    filter: elements("[role='menu']")
  })}></slot></span></template>`;
}

/**
 * A Switch Custom HTML Element.
 * Implements {@link https://www.w3.org/TR/wai-aria-1.1/#menuitem | ARIA menuitem }, {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemcheckbox | ARIA menuitemcheckbox}, or {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemradio | ARIA menuitemradio }.
 *
 * @slot checked-indicator - The checked indicator
 * @slot radio-indicator - The radio indicator
 * @slot start - Content which can be provided before the menu item content
 * @slot end - Content which can be provided after the menu item content
 * @slot - The default slot for menu item content
 * @slot expand-collapse-indicator - The expand/collapse indicator
 * @slot submenu - Used to nest menu's within menu items
 * @csspart input-container - The element representing the visual checked or radio indicator
 * @csspart checkbox - The element wrapping the `menuitemcheckbox` indicator
 * @csspart radio - The element wrapping the `menuitemradio` indicator
 * @csspart content - The element wrapping the menu item content
 * @csspart expand-collapse-glyph-container - The element wrapping the expand collapse element
 * @csspart expand-collapse - The expand/collapse element
 * @csspart submenu-region - The container for the submenu, used for positioning
 * @fires expanded-change - Fires a custom 'expanded-change' event when the expanded state changes
 * @fires change - Fires a custom 'change' event when a non-submenu item with a role of `menuitemcheckbox`, `menuitemradio`, or `menuitem` is invoked
 *
 * @public
 */

class FASTMenuItem extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * The role of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: role
     */

    this.role = MenuItemRole.menuitem;
    /**
     * The checked value of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: checked
     */

    this.checked = false;
    this.focusSubmenuOnLoad = false;
    /**
     * @internal
     */

    this.handleMenuItemKeyDown = e => {
      if (e.defaultPrevented) {
        return false;
      }

      switch (e.key) {
        case keyEnter:
        case keySpace:
          this.invoke();
          return false;

        case keyArrowRight:
          //open/focus on submenu
          this.expanded && this.submenu ? this.submenu.focus() : this.expandAndFocus();
          return false;

        case keyEscape:
          // close submenu
          if (this.expanded) {
            this.closeSubMenu();
            return false;
          }

          break;

        case keyArrowLeft:
          //close submenu
          if (this.expanded) {
            this.closeSubMenu();
            return false;
          }

      }

      return true;
    };
    /**
     * @internal
     */


    this.handleMenuItemClick = e => {
      if (e.defaultPrevented || this.disabled) {
        return false;
      }

      this.invoke();
      return false;
    };
    /**
     * @internal
     */


    this.submenuLoaded = () => {
      if (!this.focusSubmenuOnLoad) {
        return;
      }

      this.focusSubmenuOnLoad = false;

      if (this.submenu) {
        this.submenu.focus();
        this.setAttribute("tabindex", "-1");
      }
    };
    /**
     * @internal
     */


    this.handleMouseOver = e => {
      if (this.disabled || !this.hasSubmenu || this.expanded) {
        return false;
      }

      this.expanded = true;
      return false;
    };
    /**
     * @internal
     */


    this.handleMouseOut = e => {
      if (!this.expanded || this.contains(document.activeElement)) {
        return false;
      }

      this.expanded = false;
      return false;
    };
    /**
     * @internal
     */


    this.closeSubMenu = () => {
      // close submenu
      this.expanded = false;
      this.focus();
    };
    /**
     * @internal
     */


    this.expandAndFocus = () => {
      if (!this.hasSubmenu) {
        return;
      }

      this.focusSubmenuOnLoad = true;
      this.expanded = true;
    };
    /**
     * @internal
     */


    this.invoke = () => {
      if (this.disabled) {
        return;
      }

      switch (this.role) {
        case MenuItemRole.menuitemcheckbox:
          this.checked = !this.checked;
          break;

        case MenuItemRole.menuitem:
          if (this.hasSubmenu) {
            this.expandAndFocus();
            break;
          }

          this.$emit("change");
          break;

        case MenuItemRole.menuitemradio:
          if (!this.checked) {
            this.checked = true;
          }

          break;
      }
    };
  }

  expandedChanged(prev, next) {
    if (this.$fastController.isConnected) {
      if (next && this.submenu) {
        this.updateSubmenu();
      }

      this.$emit("expanded-change", this, {
        bubbles: false
      });
    }
  }

  checkedChanged(oldValue, newValue) {
    if (this.$fastController.isConnected) {
      this.$emit("change");
    }
  }
  /**
   * @internal
   */


  get hasSubmenu() {
    return !!this.submenu;
  }
  /**
   * Sets the submenu and updates its position.
   *
   * @internal
   */


  slottedSubmenuChanged(prev, next) {
    if (next.length) {
      this.submenu = next[0];
      this.updateSubmenu();
    }
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    var _a;

    (_a = this.cleanup) === null || _a === void 0 ? void 0 : _a.call(this);
    super.disconnectedCallback();
  }
  /**
   * Calculate and apply submenu positioning.
   *
   * @public
   */


  updateSubmenu() {
    var _a;

    (_a = this.cleanup) === null || _a === void 0 ? void 0 : _a.call(this);

    if (!this.submenu || !this.expanded) {
      return;
    }

    Updates.enqueue(() => {
      this.cleanup = autoUpdate(this, this.submenuContainer, () => __awaiter(this, void 0, void 0, function* () {
        const fallbackPlacements = ["left-start", "right-start"];
        const {
          x,
          y
        } = yield computePosition(this, this.submenuContainer, {
          middleware: [shift(), size({
            apply: ({
              availableWidth,
              rects
            }) => {
              if (availableWidth < rects.floating.width) {
                fallbackPlacements.push("bottom-end", "top-end");
              }
            }
          }), flip({
            fallbackPlacements
          })],
          placement: "right-start",
          strategy: "fixed"
        });
        Object.assign(this.submenuContainer.style, {
          left: `${x}px`,
          position: "fixed",
          top: `${y}px`
        });
        this.submenuLoaded();
      }));
    });
  }

}

__decorate([attr({
  mode: "boolean"
})], FASTMenuItem.prototype, "disabled", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTMenuItem.prototype, "expanded", void 0);

__decorate([attr], FASTMenuItem.prototype, "role", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTMenuItem.prototype, "checked", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTMenuItem.prototype, "hidden", void 0);

__decorate([observable], FASTMenuItem.prototype, "slottedSubmenu", void 0);

__decorate([observable], FASTMenuItem.prototype, "submenu", void 0);

applyMixins(FASTMenuItem, StartEnd);

/**
 * The template for the {@link @microsoft/fast-foundation#FASTMenu} component.
 * @public
 */

function menuTemplate() {
  return html`<template slot="${x => x.slot ? x.slot : x.isNestedMenu() ? "submenu" : void 0}" role="menu" @keydown="${(x, c) => x.handleMenuKeyDown(c.event)}" @focusout="${(x, c) => x.handleFocusOut(c.event)}"><slot ${slotted("items")}></slot></template>`;
}

/**
 * A Menu Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#menu | ARIA menu }.
 *
 * @slot - The default slot for the menu items
 *
 * @public
 */

class FASTMenu extends FASTElement {
  constructor() {
    super(...arguments);
    this.expandedItem = null;
    /**
     * The index of the focusable element in the items array
     * defaults to -1
     */

    this.focusIndex = -1;
    /**
     * @internal
     */

    this.isNestedMenu = () => {
      return this.parentElement !== null && isHTMLElement$1(this.parentElement) && this.parentElement.getAttribute("role") === "menuitem";
    };
    /**
     * if focus is moving out of the menu, reset to a stable initial state
     * @internal
     */


    this.handleFocusOut = e => {
      if (!this.contains(e.relatedTarget) && this.menuItems !== undefined) {
        this.collapseExpandedItem(); // find our first focusable element

        const focusIndex = this.menuItems.findIndex(this.isFocusableElement); // set the current focus index's tabindex to -1

        this.menuItems[this.focusIndex].setAttribute("tabindex", "-1"); // set the first focusable element tabindex to 0

        this.menuItems[focusIndex].setAttribute("tabindex", "0"); // set the focus index

        this.focusIndex = focusIndex;
      }
    };

    this.handleItemFocus = e => {
      const targetItem = e.target;

      if (this.menuItems !== undefined && targetItem !== this.menuItems[this.focusIndex]) {
        this.menuItems[this.focusIndex].setAttribute("tabindex", "-1");
        this.focusIndex = this.menuItems.indexOf(targetItem);
        targetItem.setAttribute("tabindex", "0");
      }
    };

    this.handleExpandedChanged = e => {
      if (e.defaultPrevented || e.target === null || this.menuItems === undefined || this.menuItems.indexOf(e.target) < 0) {
        return;
      }

      e.preventDefault();
      const changedItem = e.target; // closing an expanded item without opening another

      if (this.expandedItem !== null && changedItem === this.expandedItem && changedItem.expanded === false) {
        this.expandedItem = null;
        return;
      }

      if (changedItem.expanded) {
        if (this.expandedItem !== null && this.expandedItem !== changedItem) {
          this.expandedItem.expanded = false;
        }

        this.menuItems[this.focusIndex].setAttribute("tabindex", "-1");
        this.expandedItem = changedItem;
        this.focusIndex = this.menuItems.indexOf(changedItem);
        changedItem.setAttribute("tabindex", "0");
      }
    };
    /**
     * handle change from child element
     */


    this.changeHandler = e => {
      if (this.menuItems === undefined) {
        return;
      }

      const changedMenuItem = e.target;
      const changeItemIndex = this.menuItems.indexOf(changedMenuItem);

      if (changeItemIndex === -1) {
        return;
      }

      if (changedMenuItem.role === "menuitemradio" && changedMenuItem.checked === true) {
        for (let i = changeItemIndex - 1; i >= 0; --i) {
          const item = this.menuItems[i];
          const role = item.getAttribute("role");

          if (role === MenuItemRole.menuitemradio) {
            item.checked = false;
          }

          if (role === "separator") {
            break;
          }
        }

        const maxIndex = this.menuItems.length - 1;

        for (let i = changeItemIndex + 1; i <= maxIndex; ++i) {
          const item = this.menuItems[i];
          const role = item.getAttribute("role");

          if (role === MenuItemRole.menuitemradio) {
            item.checked = false;
          }

          if (role === "separator") {
            break;
          }
        }
      }
    };
    /**
     * check if the item is a menu item
     */


    this.isMenuItemElement = el => {
      return el instanceof FASTMenuItem || isHTMLElement$1(el) && el.getAttribute("role") in FASTMenu.focusableElementRoles;
    };
    /**
     * check if the item is focusable
     */


    this.isFocusableElement = el => {
      return this.isMenuItemElement(el);
    };
  }

  itemsChanged(oldValue, newValue) {
    // only update children after the component is connected and
    // the setItems has run on connectedCallback
    // (menuItems is undefined until then)
    if (this.$fastController.isConnected && this.menuItems !== undefined) {
      this.setItems();
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    Updates.enqueue(() => {
      // wait until children have had a chance to
      // connect before setting/checking their props/attributes
      this.setItems();
    });
    this.addEventListener("change", this.changeHandler);
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeItemListeners();
    this.menuItems = undefined;
    this.removeEventListener("change", this.changeHandler);
  }
  /**
   * Focuses the first item in the menu.
   *
   * @public
   */


  focus() {
    this.setFocus(0, 1);
  }
  /**
   * Collapses any expanded menu items.
   *
   * @public
   */


  collapseExpandedItem() {
    if (this.expandedItem !== null) {
      this.expandedItem.expanded = false;
      this.expandedItem = null;
    }
  }
  /**
   * @internal
   */


  handleMenuKeyDown(e) {
    if (e.defaultPrevented || this.menuItems === undefined) {
      return;
    }

    switch (e.key) {
      case keyArrowDown:
        // go forward one index
        this.setFocus(this.focusIndex + 1, 1);
        return;

      case keyArrowUp:
        // go back one index
        this.setFocus(this.focusIndex - 1, -1);
        return;

      case keyEnd:
        // set focus on last item
        this.setFocus(this.menuItems.length - 1, -1);
        return;

      case keyHome:
        // set focus on first item
        this.setFocus(0, 1);
        return;

      default:
        // if we are not handling the event, do not prevent default
        return true;
    }
  }

  removeItemListeners(items = this.items) {
    items.forEach(item => {
      item.removeEventListener("focus", this.handleItemFocus);
      item.removeEventListener("expanded-changed", this.handleExpandedChanged);
      Observable.getNotifier(item).unsubscribe(this, "hidden");
    });
  }

  setItems() {
    const children = Array.from(this.children);
    this.removeItemListeners(children);
    children.forEach(child => Observable.getNotifier(child).subscribe(this, "hidden"));
    const newItems = children.filter(child => !child.hasAttribute("hidden"));
    this.menuItems = newItems;
    const menuItems = this.menuItems.filter(this.isMenuItemElement); // if our focus index is not -1 we have items

    if (menuItems.length) {
      this.focusIndex = 0;
    }

    menuItems.forEach((item, index) => {
      item.setAttribute("tabindex", index === 0 ? "0" : "-1");
      item.addEventListener("expanded-change", this.handleExpandedChanged);
      item.addEventListener("focus", this.handleItemFocus);
    });
  }

  handleChange(source, propertyName) {
    if (propertyName === "hidden") {
      this.setItems();
    }
  }

  setFocus(focusIndex, adjustment) {
    if (this.menuItems === undefined) {
      return;
    }

    while (focusIndex >= 0 && focusIndex < this.menuItems.length) {
      const child = this.menuItems[focusIndex];

      if (this.isFocusableElement(child)) {
        // change the previous index to -1
        if (this.focusIndex > -1 && this.menuItems.length >= this.focusIndex - 1) {
          this.menuItems[this.focusIndex].setAttribute("tabindex", "-1");
        } // update the focus index


        this.focusIndex = focusIndex; // update the tabindex of next focusable element

        child.setAttribute("tabindex", "0"); // focus the element

        child.focus();
        break;
      }

      focusIndex += adjustment;
    }
  }

}
FASTMenu.focusableElementRoles = MenuItemRole;

__decorate([observable], FASTMenu.prototype, "items", void 0);

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTNumberField:class)} component.
 * @public
 */

function numberFieldTemplate(options = {}) {
  return html`<label part="label" for="control" class="${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"><slot ${slotted("defaultSlottedNodes")}></slot></label><div class="root" part="root">${startSlotTemplate(options)}<input class="control" part="control" id="control" @input="${x => x.handleTextInput()}" @change="${x => x.handleChange()}" @keydown="${(x, c) => x.handleKeyDown(c.event)}" @blur="${(x, c) => x.handleBlur()}" ?autofocus="${x => x.autofocus}" ?disabled="${x => x.disabled}" list="${x => x.list}" maxlength="${x => x.maxlength}" minlength="${x => x.minlength}" placeholder="${x => x.placeholder}" ?readonly="${x => x.readOnly}" ?required="${x => x.required}" size="${x => x.size}" type="text" inputmode="numeric" min="${x => x.min}" max="${x => x.max}" step="${x => x.step}" aria-atomic="${x => x.ariaAtomic}" aria-busy="${x => x.ariaBusy}" aria-controls="${x => x.ariaControls}" aria-current="${x => x.ariaCurrent}" aria-describedby="${x => x.ariaDescribedby}" aria-details="${x => x.ariaDetails}" aria-disabled="${x => x.ariaDisabled}" aria-errormessage="${x => x.ariaErrormessage}" aria-flowto="${x => x.ariaFlowto}" aria-haspopup="${x => x.ariaHaspopup}" aria-hidden="${x => x.ariaHidden}" aria-invalid="${x => x.ariaInvalid}" aria-keyshortcuts="${x => x.ariaKeyshortcuts}" aria-label="${x => x.ariaLabel}" aria-labelledby="${x => x.ariaLabelledby}" aria-live="${x => x.ariaLive}" aria-owns="${x => x.ariaOwns}" aria-relevant="${x => x.ariaRelevant}" aria-roledescription="${x => x.ariaRoledescription}" ${ref("control")} />${when(x => !x.hideStep && !x.readOnly && !x.disabled, html`<div class="controls" part="controls"><div class="step-up" part="step-up" @click="${x => x.stepUp()}"><slot name="step-up-glyph">${staticallyCompose(options.stepUpGlyph)}</slot></div><div class="step-down" part="step-down" @click="${x => x.stepDown()}"><slot name="step-down-glyph">${staticallyCompose(options.stepDownGlyph)}</slot></div></div>`)} ${endSlotTemplate(options)}</div>`;
}

class _TextField extends FASTElement {}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(TextField:class)} component.
 *
 * @beta
 */


class FormAssociatedTextField extends FormAssociated(_TextField) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }

}

/**
 * Text field sub-types
 * @public
 */
const TextFieldType = {
  /**
   * An email TextField
   */
  email: "email",

  /**
   * A password TextField
   */
  password: "password",

  /**
   * A telephone TextField
   */
  tel: "tel",

  /**
   * A text TextField
   */
  text: "text",

  /**
   * A URL TextField
   */
  url: "url"
};

/**
 * A Text Field Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text | <input type="text" /> element }.
 *
 * @slot start - Content which can be provided before the number field input
 * @slot end - Content which can be provided after the number field input
 * @slot - The default slot for the label
 * @csspart label - The label
 * @csspart root - The element wrapping the control, including start and end slots
 * @csspart control - The text field element
 * @fires change - Fires a custom 'change' event when the value has changed
 *
 * @public
 */

class FASTTextField extends FormAssociatedTextField {
  constructor() {
    super(...arguments);
    /**
     * Allows setting a type or mode of text.
     * @public
     * @remarks
     * HTML Attribute: type
     */

    this.type = TextFieldType.text;
  }

  readOnlyChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.readOnly = this.readOnly;
      this.validate();
    }
  }

  autofocusChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.autofocus = this.autofocus;
      this.validate();
    }
  }

  placeholderChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.placeholder = this.placeholder;
    }
  }

  typeChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.type = this.type;
      this.validate();
    }
  }

  listChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.setAttribute("list", this.list);
      this.validate();
    }
  }

  maxlengthChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.maxLength = this.maxlength;
      this.validate();
    }
  }

  minlengthChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.minLength = this.minlength;
      this.validate();
    }
  }

  patternChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.pattern = this.pattern;
      this.validate();
    }
  }

  sizeChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.size = this.size;
    }
  }

  spellcheckChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.spellcheck = this.spellcheck;
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.proxy.setAttribute("type", this.type);
    this.validate();

    if (this.autofocus) {
      Updates.enqueue(() => {
        this.focus();
      });
    }
  }
  /**
   * Selects all the text in the text field
   *
   * @public
   */


  select() {
    this.control.select();
    /**
     * The select event does not permeate the shadow DOM boundary.
     * This fn effectively proxies the select event,
     * emitting a `select` event whenever the internal
     * control emits a `select` event
     */

    this.$emit("select");
  }
  /**
   * Handles the internal control's `input` event
   * @internal
   */


  handleTextInput() {
    this.value = this.control.value;
  }
  /**
   * Change event handler for inner control.
   * @remarks
   * "Change" events are not `composable` so they will not
   * permeate the shadow DOM boundary. This fn effectively proxies
   * the change event, emitting a `change` event whenever the internal
   * control emits a `change` event
   * @internal
   */


  handleChange() {
    this.$emit("change");
  }
  /** {@inheritDoc (FormAssociated:interface).validate} */


  validate() {
    super.validate(this.control);
  }

}

__decorate([attr({
  attribute: "readonly",
  mode: "boolean"
})], FASTTextField.prototype, "readOnly", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTTextField.prototype, "autofocus", void 0);

__decorate([attr], FASTTextField.prototype, "placeholder", void 0);

__decorate([attr], FASTTextField.prototype, "type", void 0);

__decorate([attr], FASTTextField.prototype, "list", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTTextField.prototype, "maxlength", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTTextField.prototype, "minlength", void 0);

__decorate([attr], FASTTextField.prototype, "pattern", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTTextField.prototype, "size", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTTextField.prototype, "spellcheck", void 0);

__decorate([observable], FASTTextField.prototype, "defaultSlottedNodes", void 0);
/**
 * Includes ARIA states and properties relating to the ARIA textbox role
 *
 * @public
 */


class DelegatesARIATextbox {}
applyMixins(DelegatesARIATextbox, ARIAGlobalStatesAndProperties);
applyMixins(FASTTextField, StartEnd, DelegatesARIATextbox);

class _NumberField extends FASTElement {}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(NumberField:class)} component.
 *
 * @beta
 */


class FormAssociatedNumberField extends FormAssociated(_NumberField) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }

}

/**
 * A Number Field Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number | <input type="number" /> element }.
 *
 * @slot start - Content which can be provided before the number field input
 * @slot end - Content which can be provided after the number field input
 * @slot - The default slot for the label
 * @slot step-up-glyph - The glyph for the step up control
 * @slot step-down-glyph - The glyph for the step down control
 * @csspart label - The label
 * @csspart root - The element wrapping the control, including start and end slots
 * @csspart control - The element representing the input
 * @csspart controls - The step up and step down controls
 * @csspart step-up - The step up control
 * @csspart step-down - The step down control
 * @fires input - Fires a custom 'input' event when the value has changed
 * @fires change - Fires a custom 'change' event when the value has changed
 *
 * @public
 */

class FASTNumberField extends FormAssociatedNumberField {
  constructor() {
    super(...arguments);
    /**
     * When true, spin buttons will not be rendered
     * @public
     * @remarks
     * HTML Attribute: autofocus
     */

    this.hideStep = false;
    /**
     * Amount to increment or decrement the value by
     * @public
     * @remarks
     * HTMLAttribute: step
     */

    this.step = 1;
    /**
     * Flag to indicate that the value change is from the user input
     * @internal
     */

    this.isUserInput = false;
  }
  /**
   * Ensures that the max is greater than the min and that the value
   *  is less than the max
   * @param previous - the previous max value
   * @param next - updated max value
   *
   * @internal
   */


  maxChanged(previous, next) {
    var _a;

    this.max = Math.max(next, (_a = this.min) !== null && _a !== void 0 ? _a : next);
    const min = Math.min(this.min, this.max);

    if (this.min !== undefined && this.min !== min) {
      this.min = min;
    }

    this.value = this.getValidValue(this.value);
  }
  /**
   * Ensures that the min is less than the max and that the value
   *  is greater than the min
   * @param previous - previous min value
   * @param next - updated min value
   *
   * @internal
   */


  minChanged(previous, next) {
    var _a;

    this.min = Math.min(next, (_a = this.max) !== null && _a !== void 0 ? _a : next);
    const max = Math.max(this.min, this.max);

    if (this.max !== undefined && this.max !== max) {
      this.max = max;
    }

    this.value = this.getValidValue(this.value);
  }
  /**
   * The value property, typed as a number.
   *
   * @public
   */


  get valueAsNumber() {
    return parseFloat(super.value);
  }

  set valueAsNumber(next) {
    this.value = next.toString();
  }
  /**
   * Validates that the value is a number between the min and max
   * @param previous - previous stored value
   * @param next - value being updated
   * @param updateControl - should the text field be updated with value, defaults to true
   * @internal
   */


  valueChanged(previous, next) {
    var _a;

    const value = this.getValidValue(next);

    if (next !== value) {
      this.value = value;
      return;
    }

    if (this.$fastController.isConnected && ((_a = this.control) === null || _a === void 0 ? void 0 : _a.value) !== value) {
      this.control.value = this.value;
    }

    super.valueChanged(previous, this.value);

    if (previous !== undefined && !this.isUserInput) {
      this.$emit("input");
      this.$emit("change");
    }

    this.isUserInput = false;
  }
  /** {@inheritDoc (FormAssociated:interface).validate} */


  validate() {
    super.validate(this.control);
  }
  /**
   * Sets the internal value to a valid number between the min and max properties
   * @param value - user input
   *
   * @internal
   */


  getValidValue(value) {
    var _a, _b;

    let validValue = parseFloat(parseFloat(value).toPrecision(12));

    if (isNaN(validValue)) {
      validValue = "";
    } else {
      validValue = Math.min(validValue, (_a = this.max) !== null && _a !== void 0 ? _a : validValue);
      validValue = Math.max(validValue, (_b = this.min) !== null && _b !== void 0 ? _b : validValue).toString();
    }

    return validValue;
  }
  /**
   * Increments the value using the step value
   *
   * @public
   */


  stepUp() {
    const value = parseFloat(this.value);
    const stepUpValue = !isNaN(value) ? value + this.step : this.min > 0 ? this.min : this.max < 0 ? this.max : !this.min ? this.step : 0;
    this.value = stepUpValue.toString();
  }
  /**
   * Decrements the value using the step value
   *
   * @public
   */


  stepDown() {
    const value = parseFloat(this.value);
    const stepDownValue = !isNaN(value) ? value - this.step : this.min > 0 ? this.min : this.max < 0 ? this.max : !this.min ? 0 - this.step : 0;
    this.value = stepDownValue.toString();
  }
  /**
   * Sets up the initial state of the number field
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.proxy.setAttribute("type", "number");
    this.validate();
    this.control.value = this.value;

    if (this.autofocus) {
      Updates.enqueue(() => {
        this.focus();
      });
    }
  }
  /**
   * Selects all the text in the number field
   *
   * @public
   */


  select() {
    this.control.select();
    /**
     * The select event does not permeate the shadow DOM boundary.
     * This fn effectively proxies the select event,
     * emitting a `select` event whenever the internal
     * control emits a `select` event
     */

    this.$emit("select");
  }
  /**
   * Handles the internal control's `input` event
   * @internal
   */


  handleTextInput() {
    this.control.value = this.control.value.replace(/[^0-9\-+e.]/g, "");
    this.isUserInput = true;
    this.value = this.control.value;
  }
  /**
   * Change event handler for inner control.
   * @remarks
   * "Change" events are not `composable` so they will not
   * permeate the shadow DOM boundary. This fn effectively proxies
   * the change event, emitting a `change` event whenever the internal
   * control emits a `change` event
   * @internal
   */


  handleChange() {
    this.$emit("change");
  }
  /**
   * Handles the internal control's `keydown` event
   * @internal
   */


  handleKeyDown(e) {
    const key = e.key;

    switch (key) {
      case keyArrowUp:
        this.stepUp();
        return false;

      case keyArrowDown:
        this.stepDown();
        return false;
    }

    return true;
  }
  /**
   * Handles populating the input field with a validated value when
   *  leaving the input field.
   * @internal
   */


  handleBlur() {
    this.control.value = this.value;
  }

}

__decorate([attr({
  attribute: "readonly",
  mode: "boolean"
})], FASTNumberField.prototype, "readOnly", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTNumberField.prototype, "autofocus", void 0);

__decorate([attr({
  attribute: "hide-step",
  mode: "boolean"
})], FASTNumberField.prototype, "hideStep", void 0);

__decorate([attr], FASTNumberField.prototype, "placeholder", void 0);

__decorate([attr], FASTNumberField.prototype, "list", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTNumberField.prototype, "maxlength", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTNumberField.prototype, "minlength", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTNumberField.prototype, "size", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTNumberField.prototype, "step", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTNumberField.prototype, "max", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTNumberField.prototype, "min", void 0);

__decorate([observable], FASTNumberField.prototype, "defaultSlottedNodes", void 0);

applyMixins(FASTNumberField, StartEnd, DelegatesARIATextbox);

/**
 * A base class for progress components.
 * @public
 */

class FASTBaseProgress extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * Indicates progress in %
     * @internal
     */

    this.percentComplete = 0;
  }

  valueChanged() {
    this.updatePercentComplete();
  }

  minChanged() {
    if (this.$fastController.isConnected) {
      this.updatePercentComplete();
    }
  }

  maxChanged() {
    if (this.$fastController.isConnected) {
      this.updatePercentComplete();
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.updatePercentComplete();
  }

  updatePercentComplete() {
    const min = typeof this.min === "number" ? this.min : 0;
    const max = typeof this.max === "number" ? this.max : 100;
    const value = typeof this.value === "number" ? this.value : 0;
    const range = max - min;
    this.percentComplete = range === 0 ? 0 : Math.fround((value - min) / range * 100);
  }

}

__decorate([attr({
  converter: nullableNumberConverter
})], FASTBaseProgress.prototype, "value", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTBaseProgress.prototype, "min", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTBaseProgress.prototype, "max", void 0);

__decorate([observable], FASTBaseProgress.prototype, "percentComplete", void 0);

/**
 * An circular Progress HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#progressbar | ARIA progressbar }.
 *
 * @slot indeterminate - The slot for a custom indeterminate indicator
 * @slot determinate - The slot for a custom determinate indicator
 * @csspart progress - Represents the progress element
 * @csspart determinate - The determinate indicator
 * @csspart background - The background
 *
 * @public
 */

class FASTProgressRing extends FASTBaseProgress {}

const progressSegments = 44;
/**
 * The template for the {@link @microsoft/fast-foundation#FASTProgressRing} component.
 * @public
 */

function progressRingTemplate(options = {}) {
  return html`<template role="progressbar" aria-valuenow="${x => x.value}" aria-valuemin="${x => x.min}" aria-valuemax="${x => x.max}">${when(x => typeof x.value === "number", html`<svg class="progress" part="progress" viewBox="0 0 16 16" slot="determinate"><circle class="background" part="background" cx="8px" cy="8px" r="7px"></circle><circle class="determinate" part="determinate" style="stroke-dasharray: ${x => progressSegments * x.percentComplete / 100}px ${progressSegments}px" cx="8px" cy="8px" r="7px"></circle></svg>`)} ${when(x => typeof x.value !== "number", html`<slot name="indeterminate">${staticallyCompose(options.indeterminateIndicator)}</slot>`)}</template>`;
}

/**
 * An Progress HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#progressbar | ARIA progressbar }.
 *
 * @slot indeterminate - The slot for a custom indeterminate indicator
 * @csspart progress - Represents the progress element
 * @csspart determinate - The determinate indicator
 * @csspart indeterminate - The indeterminate indicator
 *
 * @public
 */

class FASTProgress extends FASTBaseProgress {}

/**
 * The template for the {@link @microsoft/fast-foundation#FASTProgress} component.
 * @public
 */

function progressTemplate(options = {}) {
  return html`<template role="progressbar" aria-valuenow="${x => x.value}" aria-valuemin="${x => x.min}" aria-valuemax="${x => x.max}">${when(x => typeof x.value === "number", html`<div class="progress" part="progress" slot="determinate"><div class="determinate" part="determinate" style="width: ${x => x.percentComplete}%"></div></div>`)} ${when(x => typeof x.value !== "number", html`<div class="progress" part="progress" slot="indeterminate"><slot name="indeterminate">${staticallyCompose(options.indeterminateIndicator1)} ${staticallyCompose(options.indeterminateIndicator2)}</slot></div>`)}</template>`;
}

/**
 * Radio Group orientation
 * @public
 */

const RadioGroupOrientation = Orientation;

/**
 * The template for the {@link @microsoft/fast-foundation#FASTRadioGroup} component.
 * @public
 */

function radioGroupTemplate() {
  return html`<template role="radiogroup" tabindex="${x => x.disabled ? -1 : void 0}" aria-disabled="${x => x.disabled}" aria-readonly="${x => x.readOnly}" aria-orientation="${x => x.orientation}" @click="${(x, c) => x.clickHandler(c.event)}" @mousedown="${(x, c) => x.handleDisabledClick(c.event)}" @keydown="${(x, c) => x.keydownHandler(c.event)}" @focusout="${(x, c) => x.focusOutHandler(c.event)}"><slot name="label"></slot><div class="positioning-region ${x => x.orientation === RadioGroupOrientation.horizontal ? "horizontal" : "vertical"}" part="positioning-region"><slot ${slotted({
    property: "slottedRadioButtons",
    filter: elements("[role=radio]")
  })}></slot></div></template>`;
}

/**
 * filters out any whitespace-only nodes, to be used inside a template.
 *
 * @param value - The Node that is being inspected
 * @param index - The index of the node within the array
 * @param array - The Node array that is being filtered
 * @returns true if the node is not a whitespace-only node, false otherwise
 *
 * @public
 */
const whitespaceFilter = value => {
  var _a;

  return value.nodeType !== Node.TEXT_NODE || !!((_a = value.nodeValue) === null || _a === void 0 ? void 0 : _a.trim().length);
};

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTRadio:class)} component.
 * @public
 */

function radioTemplate(options = {}) {
  return html`<template role="radio" aria-checked="${x => x.checked}" aria-required="${x => x.required}" aria-disabled="${x => x.disabled}" @keypress="${(x, c) => x.keypressHandler(c.event)}"><div part="control" class="control"><slot name="checked-indicator">${staticallyCompose(options.checkedIndicator)}</slot></div><label part="label" class="${x => {
    var _a;

    return ["label", !((_a = x.defaultSlottedNodes) === null || _a === void 0 ? void 0 : _a.length) && "label__hidden"].filter(Boolean).join(" ");
  }}"><slot ${slotted({
    property: "defaultSlottedNodes",
    filter: whitespaceFilter
  })}></slot></label></template>`;
}

class _Radio extends FASTElement {}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(FASTRadio:class)} component.
 *
 * @beta
 */


class FormAssociatedRadio extends CheckableFormAssociated(_Radio) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }

}

/**
 * A Radio Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radio | ARIA radio }.
 *
 * @slot checked-indicator - The checked indicator
 * @slot - The default slot for the label
 * @csspart control - The element representing the visual radio control
 * @csspart label - The label
 * @fires change - Emits a custom change event when the checked state changes
 *
 * @public
 */

class FASTRadio extends FormAssociatedRadio {
  constructor() {
    super();
    /**
     * The element's value to be included in form submission when checked.
     * Default to "on" to reach parity with input[type="radio"]
     *
     * @internal
     */

    this.initialValue = "on";
    this.proxy.setAttribute("type", "radio");
  }

  get radioGroup() {
    return this.closest("[role=radiogroup]");
  }
  /**
   * @internal
   */


  defaultCheckedChanged() {
    var _a;

    if (this.$fastController.isConnected && !this.dirtyChecked) {
      // Setting this.checked will cause us to enter a dirty state,
      // but if we are clean when defaultChecked is changed, we want to stay
      // in a clean state, so reset this.dirtyChecked
      if (!this.isInsideRadioGroup()) {
        this.checked = (_a = this.defaultChecked) !== null && _a !== void 0 ? _a : false;
        this.dirtyChecked = false;
      }
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    var _a, _b;

    super.connectedCallback();
    this.validate();

    if (((_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute("role")) !== "radiogroup" && this.getAttribute("tabindex") === null) {
      if (!this.disabled) {
        this.setAttribute("tabindex", "0");
      }
    }

    if (this.checkedAttribute) {
      if (!this.dirtyChecked) {
        // Setting this.checked will cause us to enter a dirty state,
        // but if we are clean when defaultChecked is changed, we want to stay
        // in a clean state, so reset this.dirtyChecked
        if (!this.isInsideRadioGroup()) {
          this.checked = (_b = this.defaultChecked) !== null && _b !== void 0 ? _b : false;
          this.dirtyChecked = false;
        }
      }
    }
  }

  isInsideRadioGroup() {
    return this.radioGroup !== null;
  }
  /**
   * Handles key presses on the radio.
   * @beta
   */


  keypressHandler(e) {
    var _a;

    switch (e.key) {
      case keySpace:
        if (!this.checked && !((_a = this.radioGroup) === null || _a === void 0 ? void 0 : _a.readOnly)) {
          this.checked = true;
        }

        return;
    }

    return true;
  }

}

__decorate([observable], FASTRadio.prototype, "name", void 0);

__decorate([observable], FASTRadio.prototype, "defaultSlottedNodes", void 0);

/**
 * An Radio Group Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radiogroup | ARIA radiogroup }.
 *
 * @slot label - The slot for the label
 * @slot - The default slot for radio buttons
 * @csspart positioning-region - The positioning region for laying out the radios
 * @fires change - Fires a custom 'change' event when the value changes
 *
 * @public
 */

class FASTRadioGroup extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * The orientation of the group
     *
     * @public
     * @remarks
     * HTML Attribute: orientation
     */

    this.orientation = RadioGroupOrientation.horizontal;

    this.radioChangeHandler = e => {
      const changedRadio = e.target;

      if (changedRadio.checked) {
        this.slottedRadioButtons.forEach(radio => {
          if (radio !== changedRadio) {
            radio.checked = false;

            if (!this.isInsideFoundationToolbar) {
              radio.setAttribute("tabindex", "-1");
            }
          }
        });
        this.selectedRadio = changedRadio;
        this.value = changedRadio.value;
        changedRadio.setAttribute("tabindex", "0");
        this.focusedRadio = changedRadio;
      }

      e.stopPropagation();
    };

    this.moveToRadioByIndex = (group, index) => {
      const radio = group[index];

      if (!this.isInsideToolbar) {
        radio.setAttribute("tabindex", "0");
        radio.checked = true;
        this.selectedRadio = radio;
      }

      this.focusedRadio = radio;
      radio.focus();
    };

    this.moveRightOffGroup = () => {
      var _a;

      (_a = this.nextElementSibling) === null || _a === void 0 ? void 0 : _a.focus();
    };

    this.moveLeftOffGroup = () => {
      var _a;

      (_a = this.previousElementSibling) === null || _a === void 0 ? void 0 : _a.focus();
    };
    /**
     * @internal
     */


    this.focusOutHandler = e => {
      const group = this.slottedRadioButtons;
      const radio = e.target;
      const index = radio !== null ? group.indexOf(radio) : 0;
      const focusedIndex = this.focusedRadio ? group.indexOf(this.focusedRadio) : -1;

      if (focusedIndex === 0 && index === focusedIndex || focusedIndex === group.length - 1 && focusedIndex === index) {
        if (!this.selectedRadio) {
          this.focusedRadio = group[0];
          this.focusedRadio.setAttribute("tabindex", "0");
          group.forEach(nextRadio => {
            if (nextRadio !== this.focusedRadio) {
              nextRadio.setAttribute("tabindex", "-1");
            }
          });
        } else {
          this.focusedRadio = this.selectedRadio;

          if (!this.isInsideFoundationToolbar) {
            this.selectedRadio.setAttribute("tabindex", "0");
            group.forEach(nextRadio => {
              if (nextRadio !== this.selectedRadio) {
                nextRadio.setAttribute("tabindex", "-1");
              }
            });
          }
        }
      }

      return true;
    };
    /**
     * @internal
     */


    this.handleDisabledClick = e => {
      // prevent focus events on items from the click handler when disabled
      if (this.disabled) {
        e.preventDefault();
        return;
      }

      return true;
    };
    /**
     * @internal
     */


    this.clickHandler = e => {
      if (this.disabled) {
        return;
      }

      e.preventDefault();
      const radio = e.target;

      if (radio && radio instanceof FASTRadio) {
        radio.checked = true;
        radio.setAttribute("tabindex", "0");
        this.selectedRadio = radio;
        this.focusedRadio = radio;
      }
    };

    this.shouldMoveOffGroupToTheRight = (index, group, key) => {
      return index === group.length && this.isInsideToolbar && key === keyArrowRight;
    };

    this.shouldMoveOffGroupToTheLeft = (group, key) => {
      const index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;
      return index < 0 && this.isInsideToolbar && key === keyArrowLeft;
    };

    this.checkFocusedRadio = () => {
      if (this.focusedRadio !== null && !this.focusedRadio.checked) {
        this.focusedRadio.checked = true;
        this.focusedRadio.setAttribute("tabindex", "0");
        this.focusedRadio.focus();
        this.selectedRadio = this.focusedRadio;
      }
    };

    this.moveRight = e => {
      const group = this.slottedRadioButtons;
      let index = 0;
      index = this.focusedRadio ? group.indexOf(this.focusedRadio) + 1 : 1;

      if (this.shouldMoveOffGroupToTheRight(index, group, e.key)) {
        this.moveRightOffGroup();
        return;
      } else if (index === group.length) {
        index = 0;
      }
      /* looping to get to next radio that is not disabled */

      /* matching native radio/radiogroup which does not select an item if there is only 1 in the group */


      while (index < group.length && group.length > 1) {
        if (!group[index].disabled) {
          this.moveToRadioByIndex(group, index);
          break;
        } else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {
          break;
        } else if (index + 1 >= group.length) {
          if (this.isInsideToolbar) {
            break;
          } else {
            index = 0;
          }
        } else {
          index += 1;
        }
      }
    };

    this.moveLeft = e => {
      const group = this.slottedRadioButtons;
      let index = 0;
      index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;
      index = index < 0 ? group.length - 1 : index;

      if (this.shouldMoveOffGroupToTheLeft(group, e.key)) {
        this.moveLeftOffGroup();
        return;
      }
      /* looping to get to next radio that is not disabled */


      while (index >= 0 && group.length > 1) {
        if (!group[index].disabled) {
          this.moveToRadioByIndex(group, index);
          break;
        } else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {
          break;
        } else if (index - 1 < 0) {
          index = group.length - 1;
        } else {
          index -= 1;
        }
      }
    };
    /**
     * keyboard handling per https://w3c.github.io/aria-practices/#for-radio-groups-not-contained-in-a-toolbar
     * navigation is different when there is an ancestor with role='toolbar'
     *
     * @internal
     */


    this.keydownHandler = e => {
      const key = e.key;

      if (key in ArrowKeys && (this.isInsideFoundationToolbar || this.disabled)) {
        return true;
      }

      switch (key) {
        case keyEnter:
          {
            this.checkFocusedRadio();
            break;
          }

        case keyArrowRight:
        case keyArrowDown:
          {
            if (this.direction === Direction.ltr) {
              this.moveRight(e);
            } else {
              this.moveLeft(e);
            }

            break;
          }

        case keyArrowLeft:
        case keyArrowUp:
          {
            if (this.direction === Direction.ltr) {
              this.moveLeft(e);
            } else {
              this.moveRight(e);
            }

            break;
          }

        default:
          {
            return true;
          }
      }
    };
  }

  disabledChanged() {}

  nameChanged() {
    if (this.slottedRadioButtons) {
      this.slottedRadioButtons.forEach(radio => {
        radio.setAttribute("name", this.name);
      });
    }
  }

  valueChanged() {
    if (this.slottedRadioButtons) {
      this.slottedRadioButtons.forEach(radio => {
        if (radio.value === this.value) {
          radio.checked = true;
          this.selectedRadio = radio;
        }
      });
    }

    this.$emit("change");
  }

  slottedRadioButtonsChanged(oldValue, newValue) {
    if (this.slottedRadioButtons && this.slottedRadioButtons.length > 0) {
      this.setupRadioButtons();
    }
  }

  get parentToolbar() {
    return this.closest('[role="toolbar"]');
  }

  get isInsideToolbar() {
    var _a;

    return (_a = this.parentToolbar) !== null && _a !== void 0 ? _a : false;
  }

  get isInsideFoundationToolbar() {
    var _a;

    return !!((_a = this.parentToolbar) === null || _a === void 0 ? void 0 : _a["$fastController"]);
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.direction = getDirection(this);
    this.setupRadioButtons();
  }

  disconnectedCallback() {
    this.slottedRadioButtons.forEach(radio => {
      radio.removeEventListener("change", this.radioChangeHandler);
    });
  }

  setupRadioButtons() {
    const checkedRadios = this.slottedRadioButtons.filter(radio => {
      return radio.hasAttribute("checked");
    });
    const numberOfCheckedRadios = checkedRadios ? checkedRadios.length : 0;

    if (numberOfCheckedRadios > 1) {
      const lastCheckedRadio = checkedRadios[numberOfCheckedRadios - 1];
      lastCheckedRadio.checked = true;
    }

    let foundMatchingVal = false;
    this.slottedRadioButtons.forEach(radio => {
      if (this.name !== undefined) {
        radio.setAttribute("name", this.name);
      }

      if (this.value && this.value === radio.value) {
        this.selectedRadio = radio;
        this.focusedRadio = radio;
        radio.checked = true;
        radio.setAttribute("tabindex", "0");
        foundMatchingVal = true;
      } else {
        if (!this.isInsideFoundationToolbar) {
          radio.setAttribute("tabindex", "-1");
        }

        radio.checked = false;
      }

      radio.addEventListener("change", this.radioChangeHandler);
    });

    if (this.value === undefined && this.slottedRadioButtons.length > 0) {
      const checkedRadios = this.slottedRadioButtons.filter(radio => {
        return radio.hasAttribute("checked");
      });
      const numberOfCheckedRadios = checkedRadios !== null ? checkedRadios.length : 0;

      if (numberOfCheckedRadios > 0 && !foundMatchingVal) {
        const lastCheckedRadio = checkedRadios[numberOfCheckedRadios - 1];
        lastCheckedRadio.checked = true;
        this.focusedRadio = lastCheckedRadio;
        lastCheckedRadio.setAttribute("tabindex", "0");
      } else {
        this.slottedRadioButtons[0].setAttribute("tabindex", "0");
        this.focusedRadio = this.slottedRadioButtons[0];
      }
    }
  }

}

__decorate([attr({
  attribute: "readonly",
  mode: "boolean"
})], FASTRadioGroup.prototype, "readOnly", void 0);

__decorate([attr({
  attribute: "disabled",
  mode: "boolean"
})], FASTRadioGroup.prototype, "disabled", void 0);

__decorate([attr], FASTRadioGroup.prototype, "name", void 0);

__decorate([attr], FASTRadioGroup.prototype, "value", void 0);

__decorate([attr], FASTRadioGroup.prototype, "orientation", void 0);

__decorate([observable], FASTRadioGroup.prototype, "childItems", void 0);

__decorate([observable], FASTRadioGroup.prototype, "slottedRadioButtons", void 0);

/**
 * View options for the {@link @microsoft/fast-foundation#(FASTHorizontalScroll:class)|FASTHorizontalScroll} component.
 * @public
 */
const HorizontalScrollView = {
  default: "default",
  mobile: "mobile"
};
/**
 * Easing values for the {@link @microsoft/fast-foundation#(FASTHorizontalScroll:class)|FASTHorizontalScroll} component.
 * @public
 */

const ScrollEasing = {
  linear: "linear",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out"
};

/**
 * A HorizontalScroll Custom HTML Element
 *
 * @slot start - Content which can be provided before the scroll area
 * @slot end - Content which can be provided after the scroll area
 * @csspart scroll-area - Wraps the entire scrollable region
 * @csspart scroll-view - The visible scroll area
 * @csspart content-container - The container for the content
 * @csspart scroll-prev - The previous flipper container
 * @csspart scroll-action-previous - The element wrapping the previous flipper
 * @csspart scroll-next - The next flipper container
 * @csspart scroll-action-next - The element wrapping the next flipper
 * @fires scrollstart - Fires a custom 'scrollstart' event when scrolling
 * @fires scrollend - Fires a custom 'scrollend' event when scrolling stops
 *
 * @public
 */

class FASTHorizontalScroll extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * @internal
     */

    this.framesPerSecond = 60;
    /**
     * Flag indicating that the items are being updated
     *
     * @internal
     */

    this.updatingItems = false;
    /**
     * Speed of scroll in pixels per second
     * @public
     */

    this.speed = 600;
    /**
     * Attribute used for easing, defaults to ease-in-out
     * @public
     */

    this.easing = ScrollEasing.easeInOut;
    /**
     * Attribute to hide flippers from assistive technology
     * @public
     */

    this.flippersHiddenFromAT = false;
    /**
     * Scrolling state
     * @internal
     */

    this.scrolling = false;
    /**
     * Detects if the component has been resized
     * @internal
     */

    this.resizeDetector = null;
  }
  /**
   * The calculated duration for a frame.
   *
   * @internal
   */


  get frameTime() {
    return 1000 / this.framesPerSecond;
  }
  /**
   * Firing scrollstart and scrollend events
   * @internal
   */


  scrollingChanged(prev, next) {
    if (this.scrollContainer) {
      const event = this.scrolling == true ? "scrollstart" : "scrollend";
      this.$emit(event, this.scrollContainer.scrollLeft);
    }
  }
  /**
   * In RTL mode
   * @internal
   */


  get isRtl() {
    return this.scrollItems.length > 1 && this.scrollItems[0].offsetLeft > this.scrollItems[1].offsetLeft;
  }

  connectedCallback() {
    super.connectedCallback();
    this.initializeResizeDetector();
  }

  disconnectedCallback() {
    this.disconnectResizeDetector();
    super.disconnectedCallback();
  }
  /**
   * Updates scroll stops and flippers when scroll items change
   * @param previous - current scroll items
   * @param next - new updated scroll items
   * @public
   */


  scrollItemsChanged(previous, next) {
    if (next && !this.updatingItems) {
      Updates.enqueue(() => this.setStops());
    }
  }
  /**
   * destroys the instance's resize observer
   * @internal
   */


  disconnectResizeDetector() {
    if (this.resizeDetector) {
      this.resizeDetector.disconnect();
      this.resizeDetector = null;
    }
  }
  /**
   * initializes the instance's resize observer
   * @internal
   */


  initializeResizeDetector() {
    this.disconnectResizeDetector();
    this.resizeDetector = new window.ResizeObserver(this.resized.bind(this));
    this.resizeDetector.observe(this);
  }
  /**
   * Looks for slots and uses child nodes instead
   * @internal
   */


  updateScrollStops() {
    this.updatingItems = true;
    const updatedItems = this.scrollItems.reduce((scrollItems, scrollItem) => {
      if (scrollItem instanceof HTMLSlotElement) {
        return scrollItems.concat(scrollItem.assignedElements());
      }

      scrollItems.push(scrollItem);
      return scrollItems;
    }, []);
    this.scrollItems = updatedItems;
    this.updatingItems = false;
  }
  /**
   * Finds all of the scroll stops between elements
   * @internal
   */


  setStops() {
    this.updateScrollStops();
    const {
      scrollContainer: container
    } = this;
    const {
      scrollLeft
    } = container;
    const {
      width: containerWidth,
      left: containerLeft
    } = container.getBoundingClientRect();
    this.width = containerWidth;
    let lastStop = 0;
    let stops = this.scrollItems.map((item, index) => {
      const {
        left,
        width
      } = item.getBoundingClientRect();
      const leftPosition = Math.round(left + scrollLeft - containerLeft);
      const right = Math.round(leftPosition + width);

      if (this.isRtl) {
        return -right;
      }

      lastStop = right;
      return index === 0 ? 0 : leftPosition;
    }).concat(lastStop);
    /* Fixes a FireFox bug where it doesn't scroll to the start */

    stops = this.fixScrollMisalign(stops);
    /* Sort to zero */

    stops.sort((a, b) => Math.abs(a) - Math.abs(b));
    this.scrollStops = stops;
    this.setFlippers();
  }
  /**
   * Checks to see if the stops are returning values
   *  otherwise it will try to reinitialize them
   *
   * @returns boolean indicating that current scrollStops are valid non-zero values
   * @internal
   */


  validateStops(reinit = true) {
    const hasStops = () => !!this.scrollStops.find(stop => stop > 0);

    if (!hasStops() && reinit) {
      this.setStops();
    }

    return hasStops();
  }
  /**
   *
   */


  fixScrollMisalign(stops) {
    if (this.isRtl && stops.some(stop => stop > 0)) {
      stops.sort((a, b) => b - a);
      const offset = stops[0];
      stops = stops.map(stop => stop - offset);
    }

    return stops;
  }
  /**
   * Sets the controls view if enabled
   * @internal
   */


  setFlippers() {
    var _a, _b;

    const position = this.scrollContainer.scrollLeft;
    (_a = this.previousFlipperContainer) === null || _a === void 0 ? void 0 : _a.classList.toggle("disabled", position === 0);

    if (this.scrollStops) {
      const lastStop = Math.abs(this.scrollStops[this.scrollStops.length - 1]);
      (_b = this.nextFlipperContainer) === null || _b === void 0 ? void 0 : _b.classList.toggle("disabled", this.validateStops(false) && Math.abs(position) + this.width >= lastStop);
    }
  }
  /**
   * Function that can scroll an item into view.
   * @param item - An item index, a scroll item or a child of one of the scroll items
   * @param padding - Padding of the viewport where the active item shouldn't be
   * @param rightPadding - Optional right padding. Uses the padding if not defined
   *
   * @public
   */


  scrollInView(item, padding = 0, rightPadding) {
    var _a;

    if (typeof item !== "number" && item) {
      item = this.scrollItems.findIndex(scrollItem => scrollItem === item || scrollItem.contains(item));
    }

    if (item !== undefined) {
      rightPadding = rightPadding !== null && rightPadding !== void 0 ? rightPadding : padding;
      const {
        scrollContainer: container,
        scrollStops,
        scrollItems: items
      } = this;
      const {
        scrollLeft
      } = this.scrollContainer;
      const {
        width: containerWidth
      } = container.getBoundingClientRect();
      const itemStart = scrollStops[item];
      const {
        width
      } = items[item].getBoundingClientRect();
      const itemEnd = itemStart + width;
      const isBefore = scrollLeft + padding > itemStart;

      if (isBefore || scrollLeft + containerWidth - rightPadding < itemEnd) {
        const stops = [...scrollStops].sort((a, b) => isBefore ? b - a : a - b);
        const scrollTo = (_a = stops.find(position => isBefore ? position + padding < itemStart : position + containerWidth - (rightPadding !== null && rightPadding !== void 0 ? rightPadding : 0) > itemEnd)) !== null && _a !== void 0 ? _a : 0;
        this.scrollToPosition(scrollTo);
      }
    }
  }
  /**
   * Lets the user arrow left and right through the horizontal scroll
   * @param e - Keyboard event
   * @public
   */


  keyupHandler(e) {
    const key = e.key;

    switch (key) {
      case "ArrowLeft":
        this.scrollToPrevious();
        break;

      case "ArrowRight":
        this.scrollToNext();
        break;
    }
  }
  /**
   * Scrolls items to the left
   * @public
   */


  scrollToPrevious() {
    this.validateStops();
    const scrollPosition = this.scrollContainer.scrollLeft;
    const current = this.scrollStops.findIndex((stop, index) => stop >= scrollPosition && (this.isRtl || index === this.scrollStops.length - 1 || this.scrollStops[index + 1] > scrollPosition));
    const right = Math.abs(this.scrollStops[current + 1]);
    let nextIndex = this.scrollStops.findIndex(stop => Math.abs(stop) + this.width > right);

    if (nextIndex >= current || nextIndex === -1) {
      nextIndex = current > 0 ? current - 1 : 0;
    }

    this.scrollToPosition(this.scrollStops[nextIndex], scrollPosition);
  }
  /**
   * Scrolls items to the right
   * @public
   */


  scrollToNext() {
    this.validateStops();
    const scrollPosition = this.scrollContainer.scrollLeft;
    const current = this.scrollStops.findIndex(stop => Math.abs(stop) >= Math.abs(scrollPosition));
    const outOfView = this.scrollStops.findIndex(stop => Math.abs(scrollPosition) + this.width <= Math.abs(stop));
    let nextIndex = current;

    if (outOfView > current + 2) {
      nextIndex = outOfView - 2;
    } else if (current < this.scrollStops.length - 2) {
      nextIndex = current + 1;
    }

    this.scrollToPosition(this.scrollStops[nextIndex], scrollPosition);
  }
  /**
   * Handles scrolling with easing
   * @param position - starting position
   * @param newPosition - position to scroll to
   * @public
   */


  scrollToPosition(newPosition, position = this.scrollContainer.scrollLeft) {
    var _a;

    if (this.scrolling) {
      return;
    }

    this.scrolling = true;
    const seconds = (_a = this.duration) !== null && _a !== void 0 ? _a : `${Math.abs(newPosition - position) / this.speed}s`;
    this.content.style.setProperty("transition-duration", seconds);
    const computedDuration = parseFloat(getComputedStyle(this.content).getPropertyValue("transition-duration"));

    const transitionendHandler = e => {
      if (e && e.target !== e.currentTarget) {
        return;
      }

      this.content.style.setProperty("transition-duration", "0s");
      this.content.style.removeProperty("transform");
      this.scrollContainer.style.setProperty("scroll-behavior", "auto");
      this.scrollContainer.scrollLeft = newPosition;
      this.setFlippers();
      this.content.removeEventListener("transitionend", transitionendHandler);
      this.scrolling = false;
    };

    if (computedDuration === 0) {
      transitionendHandler();
      return;
    }

    this.content.addEventListener("transitionend", transitionendHandler);
    const maxScrollValue = this.scrollContainer.scrollWidth - this.scrollContainer.clientWidth;
    let transitionStop = this.scrollContainer.scrollLeft - Math.min(newPosition, maxScrollValue);

    if (this.isRtl) {
      transitionStop = this.scrollContainer.scrollLeft + Math.min(Math.abs(newPosition), maxScrollValue);
    }

    this.content.style.setProperty("transition-property", "transform");
    this.content.style.setProperty("transition-timing-function", this.easing);
    this.content.style.setProperty("transform", `translateX(${transitionStop}px)`);
  }
  /**
   * Monitors resize event on the horizontal-scroll element
   * @public
   */


  resized() {
    if (this.resizeTimeout) {
      this.resizeTimeout = clearTimeout(this.resizeTimeout);
    }

    this.resizeTimeout = setTimeout(() => {
      this.width = this.scrollContainer.offsetWidth;
      this.setFlippers();
    }, this.frameTime);
  }
  /**
   * Monitors scrolled event on the content container
   * @public
   */


  scrolled() {
    if (this.scrollTimeout) {
      this.scrollTimeout = clearTimeout(this.scrollTimeout);
    }

    this.scrollTimeout = setTimeout(() => {
      this.setFlippers();
    }, this.frameTime);
  }

}

__decorate([attr({
  converter: nullableNumberConverter
})], FASTHorizontalScroll.prototype, "speed", void 0);

__decorate([attr], FASTHorizontalScroll.prototype, "duration", void 0);

__decorate([attr], FASTHorizontalScroll.prototype, "easing", void 0);

__decorate([attr({
  attribute: "flippers-hidden-from-at",
  converter: booleanConverter
})], FASTHorizontalScroll.prototype, "flippersHiddenFromAT", void 0);

__decorate([observable], FASTHorizontalScroll.prototype, "scrolling", void 0);

__decorate([observable], FASTHorizontalScroll.prototype, "scrollItems", void 0);

__decorate([attr({
  attribute: "view"
})], FASTHorizontalScroll.prototype, "view", void 0);

applyMixins(FASTHorizontalScroll, StartEnd);

/**
 * @public
 */

function horizontalScrollTemplate(options = {}) {
  return html`<template @keyup="${(x, c) => x.keyupHandler(c.event)}">${startSlotTemplate(options)}<div class="scroll-area" part="scroll-area"><div class="scroll-view" part="scroll-view" @scroll="${x => x.scrolled()}" ${ref("scrollContainer")}><div class="content-container" part="content-container" ${ref("content")}><slot ${slotted({
    property: "scrollItems",
    filter: elements()
  })}></slot></div></div>${when(x => x.view !== "mobile", html`<div class="scroll scroll-prev" part="scroll-prev" ${ref("previousFlipperContainer")}><div class="scroll-action" part="scroll-action-previous"><slot name="previous-flipper">${staticallyCompose(options.previousFlipper)}</slot></div></div><div class="scroll scroll-next" part="scroll-next" ${ref("nextFlipperContainer")}><div class="scroll-action" part="scroll-action-next"><slot name="next-flipper">${staticallyCompose(options.nextFlipper)}</slot></div></div>`)}</div>${endSlotTemplate(options)}</template>`;
}

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTSearch:class)} component.
 * @public
 */

function searchTemplate(options = {}) {
  return html`<label part="label" for="control" class="${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"><slot ${slotted({
    property: "defaultSlottedNodes",
    filter: whitespaceFilter
  })}></slot></label><div class="root" part="root" ${ref("root")}>${startSlotTemplate(options)}<div class="input-wrapper" part="input-wrapper"><input class="control" part="control" id="control" @input="${x => x.handleTextInput()}" @change="${x => x.handleChange()}" ?autofocus="${x => x.autofocus}" ?disabled="${x => x.disabled}" list="${x => x.list}" maxlength="${x => x.maxlength}" minlength="${x => x.minlength}" pattern="${x => x.pattern}" placeholder="${x => x.placeholder}" ?readonly="${x => x.readOnly}" ?required="${x => x.required}" size="${x => x.size}" ?spellcheck="${x => x.spellcheck}" :value="${x => x.value}" type="search" aria-atomic="${x => x.ariaAtomic}" aria-busy="${x => x.ariaBusy}" aria-controls="${x => x.ariaControls}" aria-current="${x => x.ariaCurrent}" aria-describedby="${x => x.ariaDescribedby}" aria-details="${x => x.ariaDetails}" aria-disabled="${x => x.ariaDisabled}" aria-errormessage="${x => x.ariaErrormessage}" aria-flowto="${x => x.ariaFlowto}" aria-haspopup="${x => x.ariaHaspopup}" aria-hidden="${x => x.ariaHidden}" aria-invalid="${x => x.ariaInvalid}" aria-keyshortcuts="${x => x.ariaKeyshortcuts}" aria-label="${x => x.ariaLabel}" aria-labelledby="${x => x.ariaLabelledby}" aria-live="${x => x.ariaLive}" aria-owns="${x => x.ariaOwns}" aria-relevant="${x => x.ariaRelevant}" aria-roledescription="${x => x.ariaRoledescription}" ${ref("control")} /><slot name="clear-button"><button class="clear-button ${x => x.value ? "" : "clear-button__hidden"}" part="clear-button" tabindex="-1" @click=${x => x.handleClearInput()}><slot name="clear-glyph"><svg width="9" height="9" viewBox="0 0 9 9" xmlns="http://www.w3.org/2000/svg"><path d="M0.146447 0.146447C0.338683 -0.0478972 0.645911 -0.0270359 0.853553 0.146447L4.5 3.793L8.14645 0.146447C8.34171 -0.0488155 8.65829 -0.0488155 8.85355 0.146447C9.04882 0.341709 9.04882 0.658291 8.85355 0.853553L5.207 4.5L8.85355 8.14645C9.05934 8.35223 9.03129 8.67582 8.85355 8.85355C8.67582 9.03129 8.35409 9.02703 8.14645 8.85355L4.5 5.207L0.853553 8.85355C0.658291 9.04882 0.341709 9.04882 0.146447 8.85355C-0.0488155 8.65829 -0.0488155 8.34171 0.146447 8.14645L3.793 4.5L0.146447 0.853553C-0.0268697 0.680237 -0.0457894 0.34079 0.146447 0.146447Z" /></svg></slot></button></slot></div>${endSlotTemplate(options)}</div>`;
}

class _Search extends FASTElement {}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(FASTSearch:class)} component.
 *
 * @beta
 */


class FormAssociatedSearch extends FormAssociated(_Search) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }

}

/**
 * A Search Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search | <input type="search" /> element }.
 *
 * @slot start - Content which can be provided before the search input
 * @slot end - Content which can be provided after the search clear button
 * @slot - The default slot for the label
 * @slot clear-button - The clear button
 * @slot clear-glyph - The clear glyph
 * @csspart label - The label
 * @csspart root - The element wrapping the control, including start and end slots
 * @csspart control - The element representing the input
 * @csspart clear-button - The button to clear the input
 *
 * @public
 */

class FASTSearch extends FormAssociatedSearch {
  readOnlyChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.readOnly = this.readOnly;
      this.validate();
    }
  }

  autofocusChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.autofocus = this.autofocus;
      this.validate();
    }
  }

  placeholderChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.placeholder = this.placeholder;
    }
  }

  listChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.setAttribute("list", this.list);
      this.validate();
    }
  }

  maxlengthChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.maxLength = this.maxlength;
      this.validate();
    }
  }

  minlengthChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.minLength = this.minlength;
      this.validate();
    }
  }

  patternChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.pattern = this.pattern;
      this.validate();
    }
  }

  sizeChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.size = this.size;
    }
  }

  spellcheckChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.spellcheck = this.spellcheck;
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.validate();

    if (this.autofocus) {
      Updates.enqueue(() => {
        this.focus();
      });
    }
  }
  /** {@inheritDoc (FormAssociated:interface).validate} */


  validate() {
    super.validate(this.control);
  }
  /**
   * Handles the internal control's `input` event
   * @internal
   */


  handleTextInput() {
    this.value = this.control.value;
  }
  /**
   * Handles the control's clear value event
   * @public
   */


  handleClearInput() {
    this.value = "";
    this.control.focus();
    this.handleChange();
  }
  /**
   * Change event handler for inner control.
   * @remarks
   * "Change" events are not `composable` so they will not
   * permeate the shadow DOM boundary. This fn effectively proxies
   * the change event, emitting a `change` event whenever the internal
   * control emits a `change` event
   * @internal
   */


  handleChange() {
    this.$emit("change");
  }

}

__decorate([attr({
  attribute: "readonly",
  mode: "boolean"
})], FASTSearch.prototype, "readOnly", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTSearch.prototype, "autofocus", void 0);

__decorate([attr], FASTSearch.prototype, "placeholder", void 0);

__decorate([attr], FASTSearch.prototype, "list", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTSearch.prototype, "maxlength", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTSearch.prototype, "minlength", void 0);

__decorate([attr], FASTSearch.prototype, "pattern", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTSearch.prototype, "size", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTSearch.prototype, "spellcheck", void 0);

__decorate([observable], FASTSearch.prototype, "defaultSlottedNodes", void 0);
/**
 * Includes ARIA states and properties relating to the ARIA textbox role
 *
 * @public
 */


class DelegatesARIASearch {}
applyMixins(DelegatesARIASearch, ARIAGlobalStatesAndProperties);
applyMixins(FASTSearch, StartEnd, DelegatesARIASearch);

class _Select extends FASTListboxElement {}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(Select:class)} component.
 *
 * @beta
 */


class FormAssociatedSelect extends FormAssociated(_Select) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("select");
  }

}

/**
 * A Select Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#select | ARIA select }.
 *
 * @slot start - Content which can be provided before the button content
 * @slot end - Content which can be provided after the button content
 * @slot button-container - The element representing the select button
 * @slot selected-value - The selected value
 * @slot indicator - The visual indicator for the expand/collapse state of the button
 * @slot - The default slot for slotted options
 * @csspart control - The element representing the select invoking element
 * @csspart selected-value - The element wrapping the selected value
 * @csspart indicator - The element wrapping the visual indicator
 * @csspart listbox - The listbox element
 * @fires input - Fires a custom 'input' event when the value updates
 * @fires change - Fires a custom 'change' event when the value updates
 *
 * @public
 */

class FASTSelect extends FormAssociatedSelect {
  constructor() {
    super(...arguments);
    /**
     * The open attribute.
     *
     * @public
     * @remarks
     * HTML Attribute: open
     */

    this.open = false;
    /**
     * The unique id for the internal listbox element.
     *
     * @internal
     */

    this.listboxId = uniqueId("listbox-");
  }
  /**
   * Sets focus and synchronizes ARIA attributes when the open property changes.
   *
   * @param prev - the previous open value
   * @param next - the current open value
   *
   * @internal
   */


  openChanged(prev, next) {
    var _a;

    if (!this.collapsible) {
      return;
    }

    if (this.open) {
      this.ariaControls = this.listboxId;
      this.ariaExpanded = "true";
      Updates.enqueue(() => this.setPositioning());
      this.focusAndScrollOptionIntoView();
      this.indexWhenOpened = this.selectedIndex; // focus is directed to the element when `open` is changed programmatically

      Updates.enqueue(() => this.focus());
      return;
    }

    (_a = this.cleanup) === null || _a === void 0 ? void 0 : _a.call(this);
    this.ariaControls = "";
    this.ariaExpanded = "false";
  }
  /**
   * The component is collapsible when in single-selection mode with no size attribute.
   *
   * @internal
   */


  get collapsible() {
    return !(this.multiple || typeof this.size === "number");
  }
  /**
   * The value property.
   *
   * @public
   */


  get value() {
    Observable.track(this, "value");
    return this._value;
  }

  set value(next) {
    var _a, _b, _c, _d, _e, _f, _g;

    const prev = `${this._value}`;

    if ((_a = this._options) === null || _a === void 0 ? void 0 : _a.length) {
      const selectedIndex = this._options.findIndex(el => el.value === next);

      const prevSelectedValue = (_c = (_b = this._options[this.selectedIndex]) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : null;
      const nextSelectedValue = (_e = (_d = this._options[selectedIndex]) === null || _d === void 0 ? void 0 : _d.value) !== null && _e !== void 0 ? _e : null;

      if (selectedIndex === -1 || prevSelectedValue !== nextSelectedValue) {
        next = "";
        this.selectedIndex = selectedIndex;
      }

      next = (_g = (_f = this.firstSelectedOption) === null || _f === void 0 ? void 0 : _f.value) !== null && _g !== void 0 ? _g : next;
    }

    if (prev !== next) {
      this._value = next;
      super.valueChanged(prev, next);
      Observable.notify(this, "value");
      this.updateDisplayValue();
    }
  }
  /**
   * Sets the value and display value to match the first selected option.
   *
   * @param shouldEmit - if true, the input and change events will be emitted
   *
   * @internal
   */


  updateValue(shouldEmit) {
    var _a, _b;

    if (this.$fastController.isConnected) {
      this.value = (_b = (_a = this.firstSelectedOption) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : "";
    }

    if (shouldEmit) {
      this.$emit("input");
      this.$emit("change", this, {
        bubbles: true,
        composed: undefined
      });
    }
  }
  /**
   * Updates the proxy value when the selected index changes.
   *
   * @param prev - the previous selected index
   * @param next - the next selected index
   *
   * @internal
   */


  selectedIndexChanged(prev, next) {
    super.selectedIndexChanged(prev, next);
    this.updateValue();
  }
  /**
   * Calculate and apply listbox positioning based on available viewport space.
   *
   * @public
   */


  setPositioning() {
    if (this.$fastController.isConnected) {
      this.cleanup = autoUpdate(this, this.listbox, () => __awaiter(this, void 0, void 0, function* () {
        var _a;

        const {
          middlewareData,
          x,
          y
        } = yield computePosition(this.control, this.listbox, {
          placement: "bottom",
          strategy: "fixed",
          middleware: [flip(), size({
            apply: ({
              availableHeight,
              rects
            }) => {
              Object.assign(this.listbox.style, {
                maxHeight: `${availableHeight}px`,
                width: `${rects.reference.width}px`
              });
            }
          }), hide()]
        });

        if ((_a = middlewareData.hide) === null || _a === void 0 ? void 0 : _a.referenceHidden) {
          this.open = false;
          return;
        }

        Object.assign(this.listbox.style, {
          position: "fixed",
          top: "0",
          left: "0",
          transform: `translate(${x}px, ${y}px)`
        });
      }));
    }
  }
  /**
   * The value displayed on the button.
   *
   * @public
   */


  get displayValue() {
    var _a, _b;

    Observable.track(this, "displayValue");
    return (_b = (_a = this.firstSelectedOption) === null || _a === void 0 ? void 0 : _a.text) !== null && _b !== void 0 ? _b : "";
  }
  /**
   * Synchronize the `aria-disabled` property when the `disabled` property changes.
   *
   * @param prev - The previous disabled value
   * @param next - The next disabled value
   *
   * @internal
   */


  disabledChanged(prev, next) {
    if (super.disabledChanged) {
      super.disabledChanged(prev, next);
    }

    this.ariaDisabled = this.disabled ? "true" : "false";
  }
  /**
   * Reset the element to its first selectable option when its parent form is reset.
   *
   * @internal
   */


  formResetCallback() {
    this.setProxyOptions(); // Call the base class's implementation setDefaultSelectedOption instead of the select's
    // override, in order to reset the selectedIndex without using the value property.

    super.setDefaultSelectedOption();

    if (this.selectedIndex === -1) {
      this.selectedIndex = 0;
    }
  }
  /**
   * Handle opening and closing the listbox when the select is clicked.
   *
   * @param e - the mouse event
   * @internal
   */


  clickHandler(e) {
    // do nothing if the select is disabled
    if (this.disabled) {
      return;
    }

    if (this.open) {
      const captured = e.target.closest(`option,[role=option]`);

      if (captured && captured.disabled) {
        return;
      }
    }

    super.clickHandler(e);
    this.open = this.collapsible && !this.open;

    if (!this.open && this.indexWhenOpened !== this.selectedIndex) {
      this.updateValue(true);
    }

    return true;
  }
  /**
   * Handles focus state when the element or its children lose focus.
   *
   * @param e - The focus event
   * @internal
   */


  focusoutHandler(e) {
    var _a;

    super.focusoutHandler(e);

    if (!this.open) {
      return true;
    }

    const focusTarget = e.relatedTarget;

    if (this.isSameNode(focusTarget)) {
      this.focus();
      return;
    }

    if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.includes(focusTarget))) {
      this.open = false;

      if (this.indexWhenOpened !== this.selectedIndex) {
        this.updateValue(true);
      }
    }
  }
  /**
   * Updates the value when an option's value changes.
   *
   * @param source - the source object
   * @param propertyName - the property to evaluate
   *
   * @internal
   * @override
   */


  handleChange(source, propertyName) {
    super.handleChange(source, propertyName);

    if (propertyName === "value") {
      this.updateValue();
    }
  }
  /**
   * Synchronize the form-associated proxy and updates the value property of the element.
   *
   * @param prev - the previous collection of slotted option elements
   * @param next - the next collection of slotted option elements
   *
   * @internal
   */


  slottedOptionsChanged(prev, next) {
    this.options.forEach(o => {
      const notifier = Observable.getNotifier(o);
      notifier.unsubscribe(this, "value");
    });
    super.slottedOptionsChanged(prev, next);
    this.options.forEach(o => {
      const notifier = Observable.getNotifier(o);
      notifier.subscribe(this, "value");
    });
    this.setProxyOptions();
    this.updateValue();
  }
  /**
   * Prevents focus when size is set and a scrollbar is clicked.
   *
   * @param e - the mouse event object
   *
   * @override
   * @internal
   */


  mousedownHandler(e) {
    var _a;

    if (e.offsetX >= 0 && e.offsetX <= ((_a = this.listbox) === null || _a === void 0 ? void 0 : _a.scrollWidth)) {
      return super.mousedownHandler(e);
    }

    return this.collapsible;
  }
  /**
   * Sets the multiple property on the proxy element.
   *
   * @param prev - the previous multiple value
   * @param next - the current multiple value
   */


  multipleChanged(prev, next) {
    super.multipleChanged(prev, next);

    if (this.proxy) {
      this.proxy.multiple = next;
    }
  }
  /**
   * Updates the selectedness of each option when the list of selected options changes.
   *
   * @param prev - the previous list of selected options
   * @param next - the current list of selected options
   *
   * @override
   * @internal
   */


  selectedOptionsChanged(prev, next) {
    var _a;

    super.selectedOptionsChanged(prev, next);
    (_a = this.options) === null || _a === void 0 ? void 0 : _a.forEach((o, i) => {
      var _a;

      const proxyOption = (_a = this.proxy) === null || _a === void 0 ? void 0 : _a.options.item(i);

      if (proxyOption) {
        proxyOption.selected = o.selected;
      }
    });
  }
  /**
   * Sets the selected index to match the first option with the selected attribute, or
   * the first selectable option.
   *
   * @override
   * @internal
   */


  setDefaultSelectedOption() {
    var _a;

    const options = (_a = this.options) !== null && _a !== void 0 ? _a : Array.from(this.children).filter(FASTListbox.slottedOptionFilter);
    const selectedIndex = options === null || options === void 0 ? void 0 : options.findIndex(el => el.hasAttribute("selected") || el.selected || el.value === this.value);

    if (selectedIndex !== -1) {
      this.selectedIndex = selectedIndex;
      return;
    }

    this.selectedIndex = 0;
  }
  /**
   * Resets and fills the proxy to match the component's options.
   *
   * @internal
   */


  setProxyOptions() {
    if (this.proxy instanceof HTMLSelectElement && this.options) {
      this.proxy.options.length = 0;
      this.options.forEach(option => {
        const proxyOption = option.proxy || (option instanceof HTMLOptionElement ? option.cloneNode() : null);

        if (proxyOption) {
          this.proxy.options.add(proxyOption);
        }
      });
    }
  }
  /**
   * Handle keyboard interaction for the select.
   *
   * @param e - the keyboard event
   * @internal
   */


  keydownHandler(e) {
    super.keydownHandler(e);
    const key = e.key || e.key.charCodeAt(0);

    switch (key) {
      case keySpace:
        {
          e.preventDefault();

          if (this.collapsible && this.typeAheadExpired) {
            this.open = !this.open;
          }

          break;
        }

      case keyHome:
      case keyEnd:
        {
          e.preventDefault();
          break;
        }

      case keyEnter:
        {
          e.preventDefault();
          this.open = !this.open;
          break;
        }

      case keyEscape:
        {
          if (this.collapsible && this.open) {
            e.preventDefault();
            this.open = false;
          }

          break;
        }

      case keyTab:
        {
          if (this.collapsible && this.open) {
            e.preventDefault();
            this.open = false;
          }

          return true;
        }
    }

    if (!this.open && this.indexWhenOpened !== this.selectedIndex) {
      this.updateValue(true);
      this.indexWhenOpened = this.selectedIndex;
    }

    return !(key === keyArrowDown || key === keyArrowUp);
  }

  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("contentchange", this.updateDisplayValue);
  }

  disconnectedCallback() {
    var _a;

    this.removeEventListener("contentchange", this.updateDisplayValue);
    (_a = this.cleanup) === null || _a === void 0 ? void 0 : _a.call(this);
    super.disconnectedCallback();
  }
  /**
   * Updates the proxy's size property when the size attribute changes.
   *
   * @param prev - the previous size
   * @param next - the current size
   *
   * @override
   * @internal
   */


  sizeChanged(prev, next) {
    super.sizeChanged(prev, next);

    if (this.proxy) {
      this.proxy.size = next;
    }
  }
  /**
   *
   * @internal
   */


  updateDisplayValue() {
    if (this.collapsible) {
      Observable.notify(this, "displayValue");
    }
  }

}

__decorate([attr({
  attribute: "open",
  mode: "boolean"
})], FASTSelect.prototype, "open", void 0);

__decorate([volatile], FASTSelect.prototype, "collapsible", null);

__decorate([observable], FASTSelect.prototype, "control", void 0);
/**
 * Includes ARIA states and properties relating to the ARIA select role.
 *
 * @public
 */


class DelegatesARIASelect {}

__decorate([observable], DelegatesARIASelect.prototype, "ariaControls", void 0);

applyMixins(DelegatesARIASelect, DelegatesARIAListbox);
applyMixins(FASTSelect, StartEnd, DelegatesARIASelect);

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTSelect:class)} component.
 * @public
 */

function selectTemplate(options = {}) {
  return html`<template aria-activedescendant="${x => x.ariaActiveDescendant}" aria-controls="${x => x.ariaControls}" aria-disabled="${x => x.ariaDisabled}" aria-expanded="${x => x.ariaExpanded}" aria-haspopup="${x => x.collapsible ? "listbox" : null}" aria-multiselectable="${x => x.ariaMultiSelectable}" ?open="${x => x.open}" role="combobox" tabindex="${x => !x.disabled ? "0" : null}" @click="${(x, c) => x.clickHandler(c.event)}" @focusin="${(x, c) => x.focusinHandler(c.event)}" @focusout="${(x, c) => x.focusoutHandler(c.event)}" @keydown="${(x, c) => x.keydownHandler(c.event)}" @mousedown="${(x, c) => x.mousedownHandler(c.event)}">${when(x => x.collapsible, html`<div class="control" part="control" ?disabled="${x => x.disabled}" ${ref("control")}>${startSlotTemplate(options)}<slot name="button-container"><div class="selected-value" part="selected-value"><slot name="selected-value">${x => x.displayValue}</slot></div><div aria-hidden="true" class="indicator" part="indicator"><slot name="indicator">${staticallyCompose(options.indicator)}</slot></div></slot>${endSlotTemplate(options)}</div>`)}<div class="listbox" id="${x => x.listboxId}" part="listbox" role="listbox" ?disabled="${x => x.disabled}" ?hidden="${x => x.collapsible ? !x.open : false}" ${ref("listbox")}><slot ${slotted({
    filter: FASTListbox.slottedOptionFilter,
    flatten: true,
    property: "slottedOptions"
  })}></slot></div></template>`;
}

/**
 * The template for the fast-skeleton component
 * @public
 */

function skeletonTemplate() {
  return html`<template pattern="${x => x.pattern}" ?shimmer="${x => x.shimmer}">${when(x => x.shimmer === true, html`<span class="shimmer"></span>`)}<object type="image/svg+xml" data="${x => x.pattern}" role="presentation"><img class="pattern" src="${x => x.pattern}" /></object><slot></slot></template>`;
}

/**
 * A structure representing skeleton shapes
 * @public
 */

const SkeletonShape = {
  rect: "rect",
  circle: "circle"
};
/**
 * A Skeleton Custom HTML Element.
 *
 * @slot - The default slot
 *
 * @public
 */

class FASTSkeleton extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * Indicates what the shape of the Skeleton should be.
     *
     * @public
     * @remarks
     * HTML Attribute: shape
     */

    this.shape = SkeletonShape.rect;
  }

}

__decorate([attr], FASTSkeleton.prototype, "fill", void 0);

__decorate([attr], FASTSkeleton.prototype, "shape", void 0);

__decorate([attr], FASTSkeleton.prototype, "pattern", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTSkeleton.prototype, "shimmer", void 0);

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTSliderLabel:class)} component.
 * @public
 */

function sliderLabelTemplate() {
  return html`<template aria-disabled="${x => x.disabled}"><div ${ref("root")} part="root" class="root" style="${x => x.positionStyle}"><div class="container">${when(x => !x.hideMark, html`<div class="mark"></div>`)}<div class="label"><slot></slot></div></div></div></template>`;
}

/**
 * The orientation of a {@link @microsoft/fast-foundation#(FASTSlider:class)}.
 * @public
 */

const SliderOrientation = Orientation;
/**
 * The selection modes of a {@link @microsoft/fast-foundation#(FASTSlider:class)}.
 * @public
 */

const SliderMode = {
  singleValue: "single-value"
};

/**
 * Converts a pixel coordinate on the track to a percent of the track's range
 */

function convertPixelToPercent(pixelPos, minPosition, maxPosition, direction) {
  let pct = limit(0, 1, (pixelPos - minPosition) / (maxPosition - minPosition));

  if (direction === Direction.rtl) {
    pct = 1 - pct;
  }

  return pct;
}

const defaultConfig = {
  min: 0,
  max: 0,
  direction: Direction.ltr,
  orientation: SliderOrientation.horizontal,
  disabled: false
};
/**
 * A label element intended to be used with the {@link @microsoft/fast-foundation#(FASTSlider:class)} component.
 *
 * @slot - The default slot for the label content
 * @csspart root - The element wrapping the label mark and text
 *
 * @public
 */

class FASTSliderLabel extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * Hides the tick mark.
     *
     * @public
     * @remarks
     * HTML Attribute: hide-mark
     */

    this.hideMark = false;
    /**
     * The orientation state of the label. This is generally controlled by the parent {@link @microsoft/fast-foundation#(FASTSlider:class)}.
     *
     * @public
     * @deprecated - will be removed in coming ALPHA version
     * @remarks
     * HTML Attribute: orientation
     */

    this.orientation = SliderOrientation.horizontal;
    /**
     * @internal
     */

    this.sliderDirection = Direction.ltr;

    this.getSliderConfiguration = () => {
      if (!this.isSliderConfig(this.parentNode)) {
        this.sliderDirection = defaultConfig.direction || Direction.ltr;
        this.orientation = defaultConfig.orientation || SliderOrientation.horizontal;
        this.sliderMaxPosition = defaultConfig.max;
        this.sliderMinPosition = defaultConfig.min;
      } else {
        const parentSlider = this.parentNode;
        const {
          min,
          max,
          direction,
          orientation,
          disabled
        } = parentSlider;

        if (disabled !== undefined) {
          this.disabled = disabled;
        }

        this.sliderDirection = direction || Direction.ltr;
        this.orientation = orientation || SliderOrientation.horizontal;
        this.sliderMaxPosition = max;
        this.sliderMinPosition = min;
      }
    };

    this.positionAsStyle = () => {
      const direction = this.sliderDirection ? this.sliderDirection : Direction.ltr;
      const pct = convertPixelToPercent(Number(this.position), Number(this.sliderMinPosition), Number(this.sliderMaxPosition));
      let rightNum = Math.round((1 - pct) * 100);
      let leftNum = Math.round(pct * 100);

      if (Number.isNaN(leftNum) && Number.isNaN(rightNum)) {
        rightNum = 50;
        leftNum = 50;
      }

      if (this.orientation === SliderOrientation.horizontal) {
        return direction === Direction.rtl ? `right: ${leftNum}%; left: ${rightNum}%;` : `left: ${leftNum}%; right: ${rightNum}%;`;
      } else {
        return `top: ${rightNum}%; bottom: ${leftNum}%;`;
      }
    };
  }

  positionChanged() {
    this.positionStyle = this.positionAsStyle();
  }
  /**
   * @internal
   */


  orientationChanged() {
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.getSliderConfiguration();
    this.positionStyle = this.positionAsStyle();
    this.notifier = Observable.getNotifier(this.parentNode);
    this.notifier.subscribe(this, "orientation");
    this.notifier.subscribe(this, "direction");
    this.notifier.subscribe(this, "max");
    this.notifier.subscribe(this, "min");
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    super.disconnectedCallback();
    this.notifier.unsubscribe(this, "orientation");
    this.notifier.unsubscribe(this, "direction");
    this.notifier.unsubscribe(this, "max");
    this.notifier.unsubscribe(this, "min");
  }
  /**
   * @internal
   */


  handleChange(source, propertyName) {
    switch (propertyName) {
      case "direction":
        this.sliderDirection = source.direction;
        break;

      case "orientation":
        this.orientation = source.orientation;
        break;

      case "max":
        this.sliderMaxPosition = source.max;
        break;

      case "min":
        this.sliderMinPosition = source.min;
        break;
    }

    this.positionStyle = this.positionAsStyle();
  }

  isSliderConfig(node) {
    return node.max !== undefined && node.min !== undefined;
  }

}

__decorate([observable], FASTSliderLabel.prototype, "positionStyle", void 0);

__decorate([attr], FASTSliderLabel.prototype, "position", void 0);

__decorate([attr({
  attribute: "hide-mark",
  mode: "boolean"
})], FASTSliderLabel.prototype, "hideMark", void 0);

__decorate([attr({
  attribute: "disabled",
  mode: "boolean"
})], FASTSliderLabel.prototype, "disabled", void 0);

__decorate([attr], FASTSliderLabel.prototype, "orientation", void 0);

__decorate([observable], FASTSliderLabel.prototype, "sliderMinPosition", void 0);

__decorate([observable], FASTSliderLabel.prototype, "sliderMaxPosition", void 0);

__decorate([observable], FASTSliderLabel.prototype, "sliderDirection", void 0);

class _Slider extends FASTElement {}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(Slider:class)} component.
 *
 * @beta
 */


class FormAssociatedSlider extends FormAssociated(_Slider) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }

}

/**
 * A Slider Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#slider | ARIA slider }.
 *
 * @slot track - The track of the slider
 * @slot track-start - The track-start visual indicator
 * @slot thumb - The slider thumb
 * @slot - The default slot for labels
 * @csspart positioning-region - The region used to position the elements of the slider
 * @csspart track-container - The region containing the track elements
 * @csspart track-start - The element wrapping the track start slot
 * @csspart thumb-container - The thumb container element which is programatically positioned
 * @fires change - Fires a custom 'change' event when the slider value changes
 *
 * @public
 */

class FASTSlider extends FormAssociatedSlider {
  constructor() {
    super(...arguments);
    /**
     * @internal
     */

    this.direction = Direction.ltr;
    /**
     * @internal
     */

    this.isDragging = false;
    /**
     * @internal
     */

    this.trackWidth = 0;
    /**
     * @internal
     */

    this.trackMinWidth = 0;
    /**
     * @internal
     */

    this.trackHeight = 0;
    /**
     * @internal
     */

    this.trackLeft = 0;
    /**
     * @internal
     */

    this.trackMinHeight = 0;
    /**
     * Custom function that generates a string for the component's "aria-valuetext" attribute based on the current value.
     *
     * @public
     */

    this.valueTextFormatter = () => null;
    /**
     * The minimum allowed value.
     *
     * @defaultValue - 0
     * @public
     * @remarks
     * HTML Attribute: min
     */


    this.min = 0; // Map to proxy element.

    /**
     * The maximum allowed value.
     *
     * @defaultValue - 10
     * @public
     * @remarks
     * HTML Attribute: max
     */

    this.max = 10; // Map to proxy element.

    /**
     * The orientation of the slider.
     *
     * @public
     * @remarks
     * HTML Attribute: orientation
     */

    this.orientation = Orientation.horizontal;
    /**
     * The selection mode.
     *
     * @public
     * @remarks
     * HTML Attribute: mode
     */

    this.mode = SliderMode.singleValue;

    this.keypressHandler = e => {
      if (this.readOnly || this.disabled) {
        return;
      }

      if (e.key === keyHome) {
        e.preventDefault();
        this.direction !== Direction.rtl && this.orientation !== Orientation.vertical ? this.value = `${this.min}` : this.value = `${this.max}`;
      } else if (e.key === keyEnd) {
        e.preventDefault();
        this.direction !== Direction.rtl && this.orientation !== Orientation.vertical ? this.value = `${this.max}` : this.value = `${this.min}`;
      } else if (!e.shiftKey) {
        switch (e.key) {
          case keyArrowRight:
          case keyArrowUp:
            e.preventDefault();
            this.increment();
            break;

          case keyArrowLeft:
          case keyArrowDown:
            e.preventDefault();
            this.decrement();
            break;
        }
      }
    };

    this.setupTrackConstraints = () => {
      const clientRect = this.track.getBoundingClientRect();
      this.trackWidth = this.track.clientWidth;
      this.trackMinWidth = this.track.clientLeft;
      this.trackHeight = clientRect.top;
      this.trackMinHeight = clientRect.bottom;
      this.trackLeft = this.getBoundingClientRect().left;

      if (this.trackWidth === 0) {
        this.trackWidth = 1;
      }
    };

    this.setupListeners = (remove = false) => {
      const eventAction = `${remove ? "remove" : "add"}EventListener`;
      this[eventAction]("keydown", this.keypressHandler);
      this[eventAction]("mousedown", this.handleMouseDown);
      this.thumb[eventAction]("mousedown", this.handleThumbMouseDown, {
        passive: true
      });
      this.thumb[eventAction]("touchstart", this.handleThumbMouseDown, {
        passive: true
      }); // removes handlers attached by mousedown handlers

      if (remove) {
        this.handleMouseDown(null);
        this.handleThumbMouseDown(null);
      }
    };
    /**
     * @internal
     */


    this.initialValue = "";
    /**
     *  Handle mouse moves during a thumb drag operation
     *  If the event handler is null it removes the events
     */

    this.handleThumbMouseDown = event => {
      const eventAction = `${event !== null ? "add" : "remove"}EventListener`;
      window[eventAction]("mouseup", this.handleWindowMouseUp);
      window[eventAction]("mousemove", this.handleMouseMove, {
        passive: true
      });
      window[eventAction]("touchmove", this.handleMouseMove, {
        passive: true
      });
      window[eventAction]("touchend", this.handleWindowMouseUp);
      this.isDragging = event !== null;
    };
    /**
     *  Handle mouse moves during a thumb drag operation
     */


    this.handleMouseMove = e => {
      if (this.readOnly || this.disabled || e.defaultPrevented) {
        return;
      } // update the value based on current position


      const sourceEvent = window.TouchEvent && e instanceof TouchEvent ? e.touches[0] : e;
      const eventValue = this.orientation === Orientation.horizontal ? sourceEvent.pageX - document.documentElement.scrollLeft - this.trackLeft : sourceEvent.pageY - document.documentElement.scrollTop;
      this.value = `${this.calculateNewValue(eventValue)}`;
    };
    /**
     * Handle a window mouse up during a drag operation
     */


    this.handleWindowMouseUp = event => {
      this.stopDragging();
    };

    this.stopDragging = () => {
      this.isDragging = false;
      this.handleMouseDown(null);
      this.handleThumbMouseDown(null);
    };
    /**
     *
     * @param e - MouseEvent or null. If there is no event handler it will remove the events
     */


    this.handleMouseDown = e => {
      const eventAction = `${e !== null ? "add" : "remove"}EventListener`;

      if (e === null || !this.disabled && !this.readOnly) {
        window[eventAction]("mouseup", this.handleWindowMouseUp);
        window.document[eventAction]("mouseleave", this.handleWindowMouseUp);
        window[eventAction]("mousemove", this.handleMouseMove);

        if (e) {
          this.setupTrackConstraints();
          const controlValue = this.orientation === Orientation.horizontal ? e.pageX - document.documentElement.scrollLeft - this.trackLeft : e.pageY - document.documentElement.scrollTop;
          this.value = `${this.calculateNewValue(controlValue)}`;
        }
      }
    };
  }

  readOnlyChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.readOnly = this.readOnly;
    }
  }
  /**
   * The value property, typed as a number.
   *
   * @public
   */


  get valueAsNumber() {
    return parseFloat(super.value);
  }

  set valueAsNumber(next) {
    this.value = next.toString();
  }
  /**
   * @internal
   */


  valueChanged(previous, next) {
    if (this.$fastController.isConnected) {
      const nextAsNumber = parseFloat(next);
      const value = limit(this.min, this.max, this.convertToConstrainedValue(nextAsNumber)).toString();

      if (value !== next) {
        this.value = value;
        return;
      }

      super.valueChanged(previous, next);
      this.setThumbPositionForOrientation(this.direction);
      this.$emit("change");
    }
  }

  minChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.min = `${this.min}`;
    }

    this.validate();
  }

  maxChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.max = `${this.max}`;
    }

    this.validate();
  }

  stepChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.step = `${this.step}`;
    }

    this.updateStepMultiplier();
    this.validate();
  }

  orientationChanged() {
    if (this.$fastController.isConnected) {
      this.setThumbPositionForOrientation(this.direction);
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.proxy.setAttribute("type", "range");
    this.direction = getDirection(this);
    this.updateStepMultiplier();
    this.setupTrackConstraints();
    this.setupListeners();
    this.setupDefaultValue();
    this.setThumbPositionForOrientation(this.direction);
  }
  /**
   * @internal
   */


  disconnectedCallback() {
    this.setupListeners(true);
  }
  /**
   * Increment the value by the step
   *
   * @public
   */


  increment() {
    const newVal = this.direction !== Direction.rtl && this.orientation !== Orientation.vertical ? Number(this.value) + Number(this.stepValue) : Number(this.value) + Number(this.stepValue);
    const incrementedVal = this.convertToConstrainedValue(newVal);
    const incrementedValString = incrementedVal < Number(this.max) ? `${incrementedVal}` : `${this.max}`;
    this.value = incrementedValString;
  }
  /**
   * Decrement the value by the step
   *
   * @public
   */


  decrement() {
    const newVal = this.direction !== Direction.rtl && this.orientation !== Orientation.vertical ? Number(this.value) - Number(this.stepValue) : Number(this.value) - Number(this.stepValue);
    const decrementedVal = this.convertToConstrainedValue(newVal);
    const decrementedValString = decrementedVal > Number(this.min) ? `${decrementedVal}` : `${this.min}`;
    this.value = decrementedValString;
  }
  /**
   * Gets the actual step value for the slider
   *
   */


  get stepValue() {
    return this.step === undefined ? 1 : this.step;
  }
  /**
   * Places the thumb based on the current value
   *
   * @public
   * @param direction - writing mode
   */


  setThumbPositionForOrientation(direction) {
    const newPct = convertPixelToPercent(Number(this.value), Number(this.min), Number(this.max), direction);
    const percentage = (1 - newPct) * 100;

    if (this.orientation === Orientation.horizontal) {
      this.position = this.isDragging ? `right: ${percentage}%; transition: none;` : `right: ${percentage}%; transition: all 0.2s ease;`;
    } else {
      this.position = this.isDragging ? `top: ${percentage}%; transition: none;` : `top: ${percentage}%; transition: all 0.2s ease;`;
    }
  }
  /**
   * Update the step multiplier used to ensure rounding errors from steps that
   * are not whole numbers
   */


  updateStepMultiplier() {
    const stepString = this.stepValue + "";
    const decimalPlacesOfStep = !!(this.stepValue % 1) ? stepString.length - stepString.indexOf(".") - 1 : 0;
    this.stepMultiplier = Math.pow(10, decimalPlacesOfStep);
  }

  get midpoint() {
    return `${this.convertToConstrainedValue((this.max + this.min) / 2)}`;
  }

  setupDefaultValue() {
    if (typeof this.value === "string") {
      if (this.value.length === 0) {
        this.initialValue = this.midpoint;
      } else {
        const value = parseFloat(this.value);

        if (!Number.isNaN(value) && (value < this.min || value > this.max)) {
          this.value = this.midpoint;
        }
      }
    }
  }
  /**
   * Calculate the new value based on the given raw pixel value.
   *
   * @param rawValue - the value to be converted to a constrained value
   * @returns the constrained value
   *
   * @internal
   */


  calculateNewValue(rawValue) {
    this.setupTrackConstraints(); // update the value based on current position

    const newPosition = convertPixelToPercent(rawValue, this.orientation === Orientation.horizontal ? this.trackMinWidth : this.trackMinHeight, this.orientation === Orientation.horizontal ? this.trackWidth : this.trackHeight, this.direction);
    const newValue = (this.max - this.min) * newPosition + this.min;
    return this.convertToConstrainedValue(newValue);
  }

  convertToConstrainedValue(value) {
    if (isNaN(value)) {
      value = this.min;
    }
    /**
     * The following logic intends to overcome the issue with math in JavaScript with regards to floating point numbers.
     * This is needed as the `step` may be an integer but could also be a float. To accomplish this the step  is assumed to be a float
     * and is converted to an integer by determining the number of decimal places it represent, multiplying it until it is an
     * integer and then dividing it to get back to the correct number.
     */


    let constrainedValue = value - this.min;
    const roundedConstrainedValue = Math.round(constrainedValue / this.stepValue);
    const remainderValue = constrainedValue - roundedConstrainedValue * (this.stepMultiplier * this.stepValue) / this.stepMultiplier;
    constrainedValue = remainderValue >= Number(this.stepValue) / 2 ? constrainedValue - remainderValue + Number(this.stepValue) : constrainedValue - remainderValue;
    return constrainedValue + this.min;
  }

}

__decorate([attr({
  attribute: "readonly",
  mode: "boolean"
})], FASTSlider.prototype, "readOnly", void 0);

__decorate([observable], FASTSlider.prototype, "direction", void 0);

__decorate([observable], FASTSlider.prototype, "isDragging", void 0);

__decorate([observable], FASTSlider.prototype, "position", void 0);

__decorate([observable], FASTSlider.prototype, "trackWidth", void 0);

__decorate([observable], FASTSlider.prototype, "trackMinWidth", void 0);

__decorate([observable], FASTSlider.prototype, "trackHeight", void 0);

__decorate([observable], FASTSlider.prototype, "trackLeft", void 0);

__decorate([observable], FASTSlider.prototype, "trackMinHeight", void 0);

__decorate([observable], FASTSlider.prototype, "valueTextFormatter", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTSlider.prototype, "min", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTSlider.prototype, "max", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTSlider.prototype, "step", void 0);

__decorate([attr], FASTSlider.prototype, "orientation", void 0);

__decorate([attr], FASTSlider.prototype, "mode", void 0);

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTSlider:class)} component.
 * @public
 */

function sliderTemplate(options = {}) {
  return html`<template role="slider" tabindex="${x => x.disabled ? null : 0}" aria-valuetext="${x => x.valueTextFormatter(x.value)}" aria-valuenow="${x => x.value}" aria-valuemin="${x => x.min}" aria-valuemax="${x => x.max}" aria-disabled="${x => x.disabled ? true : void 0}" aria-readonly="${x => x.readOnly ? true : void 0}" aria-orientation="${x => x.orientation}" class="${x => x.orientation}"><div part="positioning-region" class="positioning-region"><div ${ref("track")} part="track-container" class="track"><slot name="track"></slot><div part="track-start" class="track-start" style="${x => x.position}"><slot name="track-start"></slot></div></div><slot></slot><div ${ref("thumb")} part="thumb-container" class="thumb-container" style="${x => x.position}"><slot name="thumb">${staticallyCompose(options.thumb)}</slot></div></div></template>`;
}

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTSwitch:class)} component.
 * @public
 */

function switchTemplate(options = {}) {
  return html`<template role="switch" aria-checked="${x => x.checked}" aria-disabled="${x => x.disabled}" aria-readonly="${x => x.readOnly}" tabindex="${x => x.disabled ? null : 0}" @keypress="${(x, c) => x.keypressHandler(c.event)}" @click="${(x, c) => x.clickHandler(c.event)}"><label part="label" class="${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"><slot ${slotted("defaultSlottedNodes")}></slot></label><div part="switch" class="switch"><slot name="switch">${staticallyCompose(options.switch)}</slot></div></template>`;
}

class _Switch extends FASTElement {}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(FASTSwitch:class)} component.
 *
 * @beta
 */


class FormAssociatedSwitch extends CheckableFormAssociated(_Switch) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("input");
  }

}

/**
 * A Switch Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#switch | ARIA switch }.
 *
 * @slot - The deafult slot for the label
 * @slot checked-message - The message when in a checked state
 * @slot unchecked-message - The message when in an unchecked state
 * @csspart label - The label
 * @csspart switch - The element representing the switch, which wraps the indicator
 * @csspart status-message - The wrapper for the status messages
 * @csspart checked-message - The checked message
 * @csspart unchecked-message - The unchecked message
 * @fires change - Emits a custom change event when the checked state changes
 *
 * @public
 */

class FASTSwitch extends FormAssociatedSwitch {
  constructor() {
    super();
    /**
     * The element's value to be included in form submission when checked.
     * Default to "on" to reach parity with input[type="checkbox"]
     *
     * @internal
     */

    this.initialValue = "on";
    /**
     * @internal
     */

    this.keypressHandler = e => {
      if (this.readOnly) {
        return;
      }

      switch (e.key) {
        case keyEnter:
        case keySpace:
          this.checked = !this.checked;
          break;
      }
    };
    /**
     * @internal
     */


    this.clickHandler = e => {
      if (!this.disabled && !this.readOnly) {
        this.checked = !this.checked;
      }
    };

    this.proxy.setAttribute("type", "checkbox");
  }

  readOnlyChanged() {
    if (this.proxy instanceof HTMLInputElement) {
      this.proxy.readOnly = this.readOnly;
    }
  }

}

__decorate([attr({
  attribute: "readonly",
  mode: "boolean"
})], FASTSwitch.prototype, "readOnly", void 0);

__decorate([observable], FASTSwitch.prototype, "defaultSlottedNodes", void 0);

/**
 * The template for the {@link @microsoft/fast-foundation#FASTTabPanel} component.
 * @public
 */

function tabPanelTemplate() {
  return html`<template slot="tabpanel" role="tabpanel"><slot></slot></template>`;
}

/**
 * A TabPanel Component to be used with {@link @microsoft/fast-foundation#(FASTTabs:class)}
 *
 * @slot - The default slot for the tabpanel content
 *
 * @public
 */

class FASTTabPanel extends FASTElement {}

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTTab:class)} component.
 * @public
 */

function tabTemplate(options = {}) {
  return html`<template slot="tab" role="tab" aria-disabled="${x => x.disabled}">${startSlotTemplate(options)}<slot></slot>${endSlotTemplate(options)}</template>`;
}

/**
 * A Tab Component to be used with {@link @microsoft/fast-foundation#(FASTTabs:class)}
 *
 * @slot start - Content which can be provided before the tab content
 * @slot end - Content which can be provided after the tab content
 * @slot - The default slot for the tab content
 *
 * @public
 */

class FASTTab extends FASTElement {}

__decorate([attr({
  mode: "boolean"
})], FASTTab.prototype, "disabled", void 0);

applyMixins(FASTTab, StartEnd);

/**
 * The orientation of the {@link @microsoft/fast-foundation#(FASTTabs:class)} component
 * @public
 */

const TabsOrientation = Orientation;

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTTabs:class)} component.
 * @public
 */

function tabsTemplate(options = {}) {
  return html` ${startSlotTemplate(options)}<div class="tablist" part="tablist" role="tablist"><slot name="tab" ${slotted("tabs")}></slot></div>${endSlotTemplate(options)}<div class="tabpanel" part="tabpanel"><slot name="tabpanel" ${slotted("tabpanels")}></slot></div>`;
}

/**
 * A Tabs Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#tablist | ARIA tablist }.
 *
 * @slot start - Content which can be provided before the tablist element
 * @slot end - Content which can be provided after the tablist element
 * @slot tab - The slot for tabs
 * @slot tabpanel - The slot for tabpanels
 * @csspart tablist - The element wrapping for the tabs
 * @fires change - Fires a custom 'change' event when a tab is clicked or during keyboard navigation
 *
 * @public
 */

class FASTTabs extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * The orientation
     * @public
     * @remarks
     * HTML Attribute: orientation
     */

    this.orientation = TabsOrientation.horizontal;
    this.prevActiveTabIndex = 0;
    this.activeTabIndex = 0;

    this.change = () => {
      this.$emit("change", this.activetab);
    };

    this.isDisabledElement = el => {
      return el.getAttribute("aria-disabled") === "true";
    };

    this.isFocusableElement = el => {
      return !this.isDisabledElement(el);
    };

    this.setTabs = () => {
      const gridHorizontalProperty = "gridColumn";
      const gridVerticalProperty = "gridRow";
      const gridProperty = this.isHorizontal() ? gridHorizontalProperty : gridVerticalProperty;
      this.activeTabIndex = this.getActiveIndex();
      this.tabs.forEach((tab, index) => {
        if (tab.slot === "tab") {
          const isActiveTab = this.activeTabIndex === index && this.isFocusableElement(tab);
          const tabId = this.tabIds[index];
          const tabpanelId = this.tabpanelIds[index];
          tab.setAttribute("id", tabId);
          tab.setAttribute("aria-selected", isActiveTab ? "true" : "false");
          tab.setAttribute("aria-controls", tabpanelId);
          tab.addEventListener("click", this.handleTabClick);
          tab.addEventListener("keydown", this.handleTabKeyDown);
          tab.setAttribute("tabindex", isActiveTab ? "0" : "-1");

          if (isActiveTab) {
            this.activetab = tab;
          }
        } // If the original property isn't emptied out,
        // the next set will morph into a grid-area style setting that is not what we want


        tab.style[gridHorizontalProperty] = "";
        tab.style[gridVerticalProperty] = "";
        tab.style[gridProperty] = `${index + 1}`;
        !this.isHorizontal() ? tab.classList.add("vertical") : tab.classList.remove("vertical");
      });
    };

    this.setTabPanels = () => {
      this.tabpanels.forEach((tabpanel, index) => {
        const tabId = this.tabIds[index];
        const tabpanelId = this.tabpanelIds[index];
        tabpanel.setAttribute("id", tabpanelId);
        tabpanel.setAttribute("aria-labelledby", tabId);
        this.activeTabIndex !== index ? tabpanel.setAttribute("hidden", "") : tabpanel.removeAttribute("hidden");
      });
    };

    this.handleTabClick = event => {
      const selectedTab = event.currentTarget;

      if (selectedTab.nodeType === 1 && this.isFocusableElement(selectedTab)) {
        this.prevActiveTabIndex = this.activeTabIndex;
        this.activeTabIndex = this.tabs.indexOf(selectedTab);
        this.setComponent();
      }
    };

    this.handleTabKeyDown = event => {
      if (this.isHorizontal()) {
        switch (event.key) {
          case keyArrowLeft:
            event.preventDefault();
            this.adjustBackward(event);
            break;

          case keyArrowRight:
            event.preventDefault();
            this.adjustForward(event);
            break;
        }
      } else {
        switch (event.key) {
          case keyArrowUp:
            event.preventDefault();
            this.adjustBackward(event);
            break;

          case keyArrowDown:
            event.preventDefault();
            this.adjustForward(event);
            break;
        }
      }

      switch (event.key) {
        case keyHome:
          event.preventDefault();
          this.adjust(-this.activeTabIndex);
          break;

        case keyEnd:
          event.preventDefault();
          this.adjust(this.tabs.length - this.activeTabIndex - 1);
          break;
      }
    };

    this.adjustForward = e => {
      const group = this.tabs;
      let index = 0;
      index = this.activetab ? group.indexOf(this.activetab) + 1 : 1;

      if (index === group.length) {
        index = 0;
      }

      while (index < group.length && group.length > 1) {
        if (this.isFocusableElement(group[index])) {
          this.moveToTabByIndex(group, index);
          break;
        } else if (this.activetab && index === group.indexOf(this.activetab)) {
          break;
        } else if (index + 1 >= group.length) {
          index = 0;
        } else {
          index += 1;
        }
      }
    };

    this.adjustBackward = e => {
      const group = this.tabs;
      let index = 0;
      index = this.activetab ? group.indexOf(this.activetab) - 1 : 0;
      index = index < 0 ? group.length - 1 : index;

      while (index >= 0 && group.length > 1) {
        if (this.isFocusableElement(group[index])) {
          this.moveToTabByIndex(group, index);
          break;
        } else if (index - 1 < 0) {
          index = group.length - 1;
        } else {
          index -= 1;
        }
      }
    };

    this.moveToTabByIndex = (group, index) => {
      const tab = group[index];
      this.activetab = tab;
      this.prevActiveTabIndex = this.activeTabIndex;
      this.activeTabIndex = index;
      tab.focus();
      this.setComponent();
    };
  }
  /**
   * @internal
   */


  orientationChanged() {
    if (this.$fastController.isConnected) {
      this.setTabs();
      this.setTabPanels();
    }
  }
  /**
   * @internal
   */


  activeidChanged(oldValue, newValue) {
    if (this.$fastController.isConnected && this.tabs.length <= this.tabpanels.length) {
      this.prevActiveTabIndex = this.tabs.findIndex(item => item.id === oldValue);
      this.setTabs();
      this.setTabPanels();
    }
  }
  /**
   * @internal
   */


  tabsChanged() {
    if (this.$fastController.isConnected && this.tabs.length <= this.tabpanels.length) {
      this.tabIds = this.getTabIds();
      this.tabpanelIds = this.getTabPanelIds();
      this.setTabs();
      this.setTabPanels();
    }
  }
  /**
   * @internal
   */


  tabpanelsChanged() {
    if (this.$fastController.isConnected && this.tabpanels.length <= this.tabs.length) {
      this.tabIds = this.getTabIds();
      this.tabpanelIds = this.getTabPanelIds();
      this.setTabs();
      this.setTabPanels();
    }
  }

  getActiveIndex() {
    const id = this.activeid;

    if (id !== undefined) {
      return this.tabIds.indexOf(this.activeid) === -1 ? 0 : this.tabIds.indexOf(this.activeid);
    } else {
      return 0;
    }
  }

  getTabIds() {
    return this.tabs.map(tab => {
      var _a;

      return (_a = tab.getAttribute("id")) !== null && _a !== void 0 ? _a : `tab-${uniqueId()}`;
    });
  }

  getTabPanelIds() {
    return this.tabpanels.map(tabPanel => {
      var _a;

      return (_a = tabPanel.getAttribute("id")) !== null && _a !== void 0 ? _a : `panel-${uniqueId()}`;
    });
  }

  setComponent() {
    if (this.activeTabIndex !== this.prevActiveTabIndex) {
      this.activeid = this.tabIds[this.activeTabIndex];
      this.focusTab();
      this.change();
    }
  }

  isHorizontal() {
    return this.orientation === TabsOrientation.horizontal;
  }
  /**
   * The adjust method for FASTTabs
   * @public
   * @remarks
   * This method allows the active index to be adjusted by numerical increments
   */


  adjust(adjustment) {
    const focusableTabs = this.tabs.filter(t => !this.isDisabledElement(t));
    const currentActiveTabIndex = focusableTabs.indexOf(this.activetab);
    const nextTabIndex = limit(0, focusableTabs.length - 1, currentActiveTabIndex + adjustment); // the index of the next focusable tab within the context of all available tabs

    const nextIndex = this.tabs.indexOf(focusableTabs[nextTabIndex]);

    if (nextIndex > -1) {
      this.moveToTabByIndex(this.tabs, nextIndex);
    }
  }

  focusTab() {
    this.tabs[this.activeTabIndex].focus();
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.tabIds = this.getTabIds();
    this.tabpanelIds = this.getTabPanelIds();
    this.activeTabIndex = this.getActiveIndex();
  }

}

__decorate([attr], FASTTabs.prototype, "orientation", void 0);

__decorate([attr], FASTTabs.prototype, "activeid", void 0);

__decorate([observable], FASTTabs.prototype, "tabs", void 0);

__decorate([observable], FASTTabs.prototype, "tabpanels", void 0);

applyMixins(FASTTabs, StartEnd);

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTTextArea:class)} component.
 * @public
 */

function textAreaTemplate() {
  return html`<label part="label" for="control" class="${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"><slot ${slotted("defaultSlottedNodes")}></slot></label><textarea part="control" class="control" id="control" ?autofocus="${x => x.autofocus}" cols="${x => x.cols}" ?disabled="${x => x.disabled}" form="${x => x.form}" list="${x => x.list}" maxlength="${x => x.maxlength}" minlength="${x => x.minlength}" name="${x => x.name}" placeholder="${x => x.placeholder}" ?readonly="${x => x.readOnly}" ?required="${x => x.required}" rows="${x => x.rows}" ?spellcheck="${x => x.spellcheck}" :value="${x => x.value}" aria-atomic="${x => x.ariaAtomic}" aria-busy="${x => x.ariaBusy}" aria-controls="${x => x.ariaControls}" aria-current="${x => x.ariaCurrent}" aria-describedby="${x => x.ariaDescribedby}" aria-details="${x => x.ariaDetails}" aria-disabled="${x => x.ariaDisabled}" aria-errormessage="${x => x.ariaErrormessage}" aria-flowto="${x => x.ariaFlowto}" aria-haspopup="${x => x.ariaHaspopup}" aria-hidden="${x => x.ariaHidden}" aria-invalid="${x => x.ariaInvalid}" aria-keyshortcuts="${x => x.ariaKeyshortcuts}" aria-label="${x => x.ariaLabel}" aria-labelledby="${x => x.ariaLabelledby}" aria-live="${x => x.ariaLive}" aria-owns="${x => x.ariaOwns}" aria-relevant="${x => x.ariaRelevant}" aria-roledescription="${x => x.ariaRoledescription}" @input="${(x, c) => x.handleTextInput()}" @change="${x => x.handleChange()}" ${ref("control")}></textarea>`;
}

class _TextArea extends FASTElement {}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(FASTTextArea:class)} component.
 *
 * @beta
 */


class FormAssociatedTextArea extends FormAssociated(_TextArea) {
  constructor() {
    super(...arguments);
    this.proxy = document.createElement("textarea");
  }

}

/**
 * Resize mode for a TextArea
 * @public
 */
const TextAreaResize = {
  /**
   * No resize.
   */
  none: "none",

  /**
   * Resize vertically and horizontally.
   */
  both: "both",

  /**
   * Resize horizontally.
   */
  horizontal: "horizontal",

  /**
   * Resize vertically.
   */
  vertical: "vertical"
};

/**
 * A Text Area Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea | <textarea> element }.
 *
 * @slot - The default slot for the label
 * @csspart label - The label
 * @csspart root - The element wrapping the control
 * @csspart control - The textarea element
 * @fires change - Emits a custom 'change' event when the textarea emits a change event
 *
 * @public
 */

class FASTTextArea extends FormAssociatedTextArea {
  constructor() {
    super(...arguments);
    /**
     * The resize mode of the element.
     * @public
     * @remarks
     * HTML Attribute: resize
     */

    this.resize = TextAreaResize.none;
    /**
     * Sizes the element horizontally by a number of character columns.
     *
     * @public
     * @remarks
     * HTML Attribute: cols
     */

    this.cols = 20;
    /**
     * @internal
     */

    this.handleTextInput = () => {
      this.value = this.control.value;
    };
  }

  readOnlyChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.readOnly = this.readOnly;
    }
  }

  autofocusChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.autofocus = this.autofocus;
    }
  }

  listChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.setAttribute("list", this.list);
    }
  }

  maxlengthChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.maxLength = this.maxlength;
    }
  }

  minlengthChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.minLength = this.minlength;
    }
  }

  spellcheckChanged() {
    if (this.proxy instanceof HTMLTextAreaElement) {
      this.proxy.spellcheck = this.spellcheck;
    }
  }
  /**
   * Selects all the text in the text area
   *
   * @public
   */


  select() {
    this.control.select();
    /**
     * The select event does not permeate the shadow DOM boundary.
     * This fn effectively proxies the select event,
     * emitting a `select` event whenever the internal
     * control emits a `select` event
     */

    this.$emit("select");
  }
  /**
   * Change event handler for inner control.
   * @remarks
   * "Change" events are not `composable` so they will not
   * permeate the shadow DOM boundary. This fn effectively proxies
   * the change event, emitting a `change` event whenever the internal
   * control emits a `change` event
   * @internal
   */


  handleChange() {
    this.$emit("change");
  }
  /** {@inheritDoc (FormAssociated:interface).validate} */


  validate() {
    super.validate(this.control);
  }

}

__decorate([attr({
  mode: "boolean"
})], FASTTextArea.prototype, "readOnly", void 0);

__decorate([attr], FASTTextArea.prototype, "resize", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTTextArea.prototype, "autofocus", void 0);

__decorate([attr({
  attribute: "form"
})], FASTTextArea.prototype, "formId", void 0);

__decorate([attr], FASTTextArea.prototype, "list", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTTextArea.prototype, "maxlength", void 0);

__decorate([attr({
  converter: nullableNumberConverter
})], FASTTextArea.prototype, "minlength", void 0);

__decorate([attr], FASTTextArea.prototype, "name", void 0);

__decorate([attr], FASTTextArea.prototype, "placeholder", void 0);

__decorate([attr({
  converter: nullableNumberConverter,
  mode: "fromView"
})], FASTTextArea.prototype, "cols", void 0);

__decorate([attr({
  converter: nullableNumberConverter,
  mode: "fromView"
})], FASTTextArea.prototype, "rows", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTTextArea.prototype, "spellcheck", void 0);

__decorate([observable], FASTTextArea.prototype, "defaultSlottedNodes", void 0);

applyMixins(FASTTextArea, DelegatesARIATextbox);

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTTextField:class)} component.
 * @public
 */

function textFieldTemplate(options = {}) {
  return html`<label part="label" for="control" class="${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length ? "label" : "label label__hidden"}"><slot ${slotted({
    property: "defaultSlottedNodes",
    filter: whitespaceFilter
  })}></slot></label><div class="root" part="root">${startSlotTemplate(options)}<input class="control" part="control" id="control" @input="${x => x.handleTextInput()}" @change="${x => x.handleChange()}" ?autofocus="${x => x.autofocus}" ?disabled="${x => x.disabled}" list="${x => x.list}" maxlength="${x => x.maxlength}" name="${x => x.name}" minlength="${x => x.minlength}" pattern="${x => x.pattern}" placeholder="${x => x.placeholder}" ?readonly="${x => x.readOnly}" ?required="${x => x.required}" size="${x => x.size}" ?spellcheck="${x => x.spellcheck}" :value="${x => x.value}" type="${x => x.type}" aria-atomic="${x => x.ariaAtomic}" aria-busy="${x => x.ariaBusy}" aria-controls="${x => x.ariaControls}" aria-current="${x => x.ariaCurrent}" aria-describedby="${x => x.ariaDescribedby}" aria-details="${x => x.ariaDetails}" aria-disabled="${x => x.ariaDisabled}" aria-errormessage="${x => x.ariaErrormessage}" aria-flowto="${x => x.ariaFlowto}" aria-haspopup="${x => x.ariaHaspopup}" aria-hidden="${x => x.ariaHidden}" aria-invalid="${x => x.ariaInvalid}" aria-keyshortcuts="${x => x.ariaKeyshortcuts}" aria-label="${x => x.ariaLabel}" aria-labelledby="${x => x.ariaLabelledby}" aria-live="${x => x.ariaLive}" aria-owns="${x => x.ariaOwns}" aria-relevant="${x => x.ariaRelevant}" aria-roledescription="${x => x.ariaRoledescription}" ${ref("control")} />${endSlotTemplate(options)}</div>`;
}

/**
 * The orientation of the {@link @microsoft/fast-foundation#(FASTToolbar:class)} component
 * @public
 */

const ToolbarOrientation = Orientation;

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTToolbar:class)} component.
 *
 * @public
 */

function toolbarTemplate(options = {}) {
  return html`<template aria-label="${x => x.ariaLabel}" aria-labelledby="${x => x.ariaLabelledby}" aria-orientation="${x => x.orientation}" orientation="${x => x.orientation}" role="toolbar" @click="${(x, c) => x.clickHandler(c.event)}" @focusin="${(x, c) => x.focusinHandler(c.event)}" @keydown="${(x, c) => x.keydownHandler(c.event)}" ${children({
    property: "childItems",
    attributeFilter: ["disabled", "hidden"],
    selector: "*",
    subtree: true
  })}><slot name="label"></slot><div class="positioning-region" part="positioning-region">${startSlotTemplate(options)}<slot ${slotted({
    filter: elements(),
    property: "slottedItems"
  })}></slot>${endSlotTemplate(options)}</div></template>`;
}

/**
 * A map for directionality derived from keyboard input strings,
 * visual orientation, and text direction.
 *
 * @internal
 */

const ToolbarArrowKeyMap = Object.freeze({
  [ArrowKeys.ArrowUp]: {
    [ToolbarOrientation.vertical]: -1
  },
  [ArrowKeys.ArrowDown]: {
    [ToolbarOrientation.vertical]: 1
  },
  [ArrowKeys.ArrowLeft]: {
    [ToolbarOrientation.horizontal]: {
      [Direction.ltr]: -1,
      [Direction.rtl]: 1
    }
  },
  [ArrowKeys.ArrowRight]: {
    [ToolbarOrientation.horizontal]: {
      [Direction.ltr]: 1,
      [Direction.rtl]: -1
    }
  }
});
/**
 * A Toolbar Custom HTML Element.
 * Implements the {@link https://w3c.github.io/aria-practices/#Toolbar|ARIA Toolbar}.
 *
 * @slot start - Content which can be provided before the slotted items
 * @slot end - Content which can be provided after the slotted items
 * @slot - The default slot for slotted items
 * @slot label - The toolbar label
 * @csspart positioning-region - The element containing the items, start and end slots
 *
 * @public
 */

class FASTToolbar extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * The internal index of the currently focused element.
     *
     * @internal
     */

    this._activeIndex = 0;
    /**
     * The text direction of the toolbar.
     *
     * @internal
     */

    this.direction = Direction.ltr;
    /**
     * The orientation of the toolbar.
     *
     * @public
     * @remarks
     * HTML Attribute: `orientation`
     */

    this.orientation = ToolbarOrientation.horizontal;
  }
  /**
   * The index of the currently focused element, clamped between 0 and the last element.
   *
   * @internal
   */


  get activeIndex() {
    Observable.track(this, "activeIndex");
    return this._activeIndex;
  }

  set activeIndex(value) {
    if (this.$fastController.isConnected) {
      this._activeIndex = limit(0, this.focusableElements.length - 1, value);
      Observable.notify(this, "activeIndex");
    }
  }

  slottedItemsChanged() {
    if (this.$fastController.isConnected) {
      this.reduceFocusableElements();
    }
  }
  /**
   * Set the activeIndex when a focusable element in the toolbar is clicked.
   *
   * @internal
   */


  clickHandler(e) {
    var _a;

    const activeIndex = (_a = this.focusableElements) === null || _a === void 0 ? void 0 : _a.indexOf(e.target);

    if (activeIndex > -1 && this.activeIndex !== activeIndex) {
      this.setFocusedElement(activeIndex);
    }

    return true;
  }

  childItemsChanged(prev, next) {
    if (this.$fastController.isConnected) {
      this.reduceFocusableElements();
    }
  }
  /**
   * @internal
   */


  connectedCallback() {
    super.connectedCallback();
    this.direction = getDirection(this);
  }
  /**
   * When the toolbar receives focus, set the currently active element as focused.
   *
   * @internal
   */


  focusinHandler(e) {
    const relatedTarget = e.relatedTarget;

    if (!relatedTarget || this.contains(relatedTarget)) {
      return;
    }

    this.setFocusedElement();
  }
  /**
   * Determines a value that can be used to iterate a list with the arrow keys.
   *
   * @param this - An element with an orientation and direction
   * @param key - The event key value
   * @internal
   */


  getDirectionalIncrementer(key) {
    var _a, _b, _c, _d, _e;

    return (_e = (_c = (_b = (_a = ToolbarArrowKeyMap[key]) === null || _a === void 0 ? void 0 : _a[this.orientation]) === null || _b === void 0 ? void 0 : _b[this.direction]) !== null && _c !== void 0 ? _c : (_d = ToolbarArrowKeyMap[key]) === null || _d === void 0 ? void 0 : _d[this.orientation]) !== null && _e !== void 0 ? _e : 0;
  }
  /**
   * Handle keyboard events for the toolbar.
   *
   * @internal
   */


  keydownHandler(e) {
    const key = e.key;

    if (!(key in ArrowKeys) || e.defaultPrevented || e.shiftKey) {
      return true;
    }

    const incrementer = this.getDirectionalIncrementer(key);

    if (!incrementer) {
      return !e.target.closest("[role=radiogroup]");
    }

    const nextIndex = this.activeIndex + incrementer;

    if (this.focusableElements[nextIndex]) {
      e.preventDefault();
    }

    this.setFocusedElement(nextIndex);
    return true;
  }
  /**
   * get all the slotted elements
   * @internal
   */


  get allSlottedItems() {
    return [...this.start.assignedElements(), ...this.slottedItems, ...this.end.assignedElements()];
  }
  /**
   * Prepare the slotted elements which can be focusable.
   *
   * @internal
   */


  reduceFocusableElements() {
    var _a;

    const previousFocusedElement = (_a = this.focusableElements) === null || _a === void 0 ? void 0 : _a[this.activeIndex];
    this.focusableElements = this.allSlottedItems.reduce(FASTToolbar.reduceFocusableItems, []); // If the previously active item is still focusable, adjust the active index to the
    // index of that item.

    const adjustedActiveIndex = this.focusableElements.indexOf(previousFocusedElement);
    this.activeIndex = Math.max(0, adjustedActiveIndex);
    this.setFocusableElements();
  }
  /**
   * Set the activeIndex and focus the corresponding control.
   *
   * @param activeIndex - The new index to set
   * @internal
   */


  setFocusedElement(activeIndex = this.activeIndex) {
    var _a;

    this.activeIndex = activeIndex;
    this.setFocusableElements();
    (_a = this.focusableElements[this.activeIndex]) === null || _a === void 0 ? void 0 : _a.focus();
  }
  /**
   * Reduce a collection to only its focusable elements.
   *
   * @param elements - Collection of elements to reduce
   * @param element - The current element
   *
   * @internal
   */


  static reduceFocusableItems(elements, element) {
    var _a, _b, _c, _d;

    const isRoleRadio = element.getAttribute("role") === "radio";
    const isFocusableFastElement = (_b = (_a = element.$fastController) === null || _a === void 0 ? void 0 : _a.definition.shadowOptions) === null || _b === void 0 ? void 0 : _b.delegatesFocus;
    const hasFocusableShadow = Array.from((_d = (_c = element.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelectorAll("*")) !== null && _d !== void 0 ? _d : []).some(x => isFocusable(x));

    if (!element.hasAttribute("disabled") && !element.hasAttribute("hidden") && (isFocusable(element) || isRoleRadio || isFocusableFastElement || hasFocusableShadow)) {
      elements.push(element);
      return elements;
    }

    if (element.childElementCount) {
      return elements.concat(Array.from(element.children).reduce(FASTToolbar.reduceFocusableItems, []));
    }

    return elements;
  }
  /**
   * @internal
   */


  setFocusableElements() {
    if (this.$fastController.isConnected && this.focusableElements.length > 0) {
      this.focusableElements.forEach((element, index) => {
        element.tabIndex = this.activeIndex === index ? 0 : -1;
      });
    }
  }

}

__decorate([observable], FASTToolbar.prototype, "direction", void 0);

__decorate([attr], FASTToolbar.prototype, "orientation", void 0);

__decorate([observable], FASTToolbar.prototype, "slottedItems", void 0);

__decorate([observable], FASTToolbar.prototype, "slottedLabel", void 0);

__decorate([observable], FASTToolbar.prototype, "childItems", void 0);
/**
 * Includes ARIA states and properties relating to the ARIA toolbar role
 *
 * @public
 */


class DelegatesARIAToolbar {}

__decorate([attr({
  attribute: "aria-labelledby"
})], DelegatesARIAToolbar.prototype, "ariaLabelledby", void 0);

__decorate([attr({
  attribute: "aria-label"
})], DelegatesARIAToolbar.prototype, "ariaLabel", void 0);

applyMixins(DelegatesARIAToolbar, ARIAGlobalStatesAndProperties);
applyMixins(FASTToolbar, StartEnd, DelegatesARIAToolbar);

/**
 * Enumerates possible tooltip placements.
 *
 * @public
 */
const TooltipPlacement = {
  bottom: "bottom",
  bottomEnd: "bottom-end",
  bottomStart: "bottom-start",
  left: "left",
  leftEnd: "left-end",
  leftStart: "left-start",
  right: "right",
  rightEnd: "right-end",
  rightStart: "right-start",
  top: "top",
  topEnd: "top-end",
  topStart: "top-start"
};

/**
 * A Tooltip Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.2/#tooltip | ARIA tooltip }.
 *
 * @slot - The default slot for the tooltip content
 * @fires dismiss - Fires a custom 'dismiss' event when the tooltip is visible and escape key is pressed
 *
 * @public
 */

class FASTTooltip extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * The visibility of the tooltip.
     *
     * @internal
     */

    this._visible = false;
    /**
     * Indicates if the tooltip visibility is controlled by the `visible` attribute.
     *
     * When `true`, the tooltip visibility is controlled by the `visible` attribute.
     * When `false`, the tooltip visibility is controlled by the `mouseover` and `focusin` events on the anchor element.
     *
     * @internal
     */

    this.controlledVisibility = false;
    /**
     * Hides the tooltip when the anchor element loses focus.
     *
     * @internal
     */

    this.focusoutAnchorHandler = () => {
      if (!this.controlledVisibility && this._visible) {
        this.hideTooltip();
      }
    };
    /**
     * Shows the tooltip when the anchor element gains focus.
     *
     * @internal
     */


    this.focusinAnchorHandler = () => {
      if (!this.controlledVisibility && !this._visible) {
        this.showTooltip();
      }
    };
    /**
     * Hides the tooltip when the `Escape` key is pressed.
     *
     * @param e - the keyboard event
     *
     * @internal
     */


    this.keydownDocumentHandler = e => {
      if (!e.defaultPrevented && this.visible) {
        switch (e.key) {
          case keyEscape:
            {
              this.dismiss();
              break;
            }
        }
      }
    };
    /**
     * Shows the tooltip when the mouse is over the anchor element.
     *
     * @internal
     */


    this.mouseoverAnchorHandler = () => {
      var _a;

      if (!((_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.isSameNode(this.anchorElement))) {
        this.showTooltip();
      }
    };
    /**
     * Hides the tooltip when the mouse leaves the anchor element.
     *
     * @internal
     */


    this.mouseoutAnchorHandler = e => {
      var _a;

      if (!((_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.isSameNode(this.anchorElement)) && !this.isSameNode(e.relatedTarget)) {
        this.hideTooltip();
      }
    };
    /**
     * The placement of the tooltip relative to the anchor element.
     *
     * @public
     * @remarks
     * HTML Attribute: `placement`
     */


    this.placement = TooltipPlacement.bottom;
  }
  /**
   * Removes listeners from the previous anchor element and updates the anchor element reference.
   *
   * @param prev - the previous anchor string
   * @param next - the current anchor string
   *
   * @internal
   */


  anchorChanged(prev, next) {
    if (this.$fastController.isConnected) {
      this.removeListeners();
      this.removeAnchorAriaDescribedBy(this.id);
      this.anchorElement = this.getAnchorElement(next);
      this.addAnchorAriaDescribedBy();

      if (!this.controlledVisibility) {
        this.addListeners();
      }
    }
  }
  /**
   * Switches between controlled and uncontrolled visibility.
   *
   * @param prev - the previous forced visibility state
   * @param next - the current forced visibility state
   * @internal
   */


  controlledVisibilityChanged(prev, next) {
    if (!next) {
      this.addListeners();
      this.hideTooltip();
      return;
    }

    this.removeListeners();
  }

  idChanged(prev, next) {
    this.removeAnchorAriaDescribedBy(prev);
    Updates.enqueue(() => {
      this.addAnchorAriaDescribedBy();
    });
  }
  /**
   * Updates the styles for the tooltip position.
   *
   * @param prev - the previous placement styles
   * @param next - the current placement styles
   *
   * @internal
   */


  positionStylesChanged(prev, next) {
    this.$fastController.removeStyles(prev);
    this.$fastController.addStyles(next);
  }

  showChanged(prev, next) {
    this.visible = next;
  }
  /**
   * Returns the current visibility of the tooltip.
   * @public
   */


  get visible() {
    return this._visible;
  }
  /**
   * Sets the forced visibility state and shows or hides the tooltip.
   *
   * @internal
   */


  set visible(value) {
    this.controlledVisibility = typeof value === "boolean";

    if (this.controlledVisibility) {
      this.show = value;
    }

    if (value) {
      this.showTooltip();
      return;
    }

    this.hideTooltip();
  }
  /**
   * Adds the `id` of the tooltip to the `aria-describedby` attribute of the anchor element.
   *
   * @internal
   */


  addAnchorAriaDescribedBy() {
    var _a;

    if (!this.id) {
      this.id = uniqueId("tooltip-");
      return;
    }

    if (!this.anchorElement) {
      return;
    }

    const anchorElementDescribedBy = (_a = this.anchorElement.getAttribute("aria-describedby")) === null || _a === void 0 ? void 0 : _a.concat(" ", this.id).trim();

    if (anchorElementDescribedBy) {
      this.anchorElement.setAttribute("aria-describedby", anchorElementDescribedBy);
    }
  }
  /**
   * Adds event listeners to the anchor element, the tooltip element, and the document.
   *
   * @internal
   */


  addListeners() {
    if (!this.anchorElement) {
      return;
    }

    this.anchorElement.addEventListener("focusin", this.focusinAnchorHandler);
    this.anchorElement.addEventListener("focusout", this.focusoutAnchorHandler);
    this.anchorElement.addEventListener("mouseout", this.mouseoutAnchorHandler);
    this.anchorElement.addEventListener("mouseover", this.mouseoverAnchorHandler);
    this.addEventListener("mouseout", this.mouseoutAnchorHandler);
    this.addEventListener("mouseover", this.mouseoverAnchorHandler);
    document.addEventListener("keydown", this.keydownDocumentHandler);
  }

  connectedCallback() {
    super.connectedCallback();
    this.anchorChanged(undefined, this.anchor);
  }
  /**
   * Hides the tooltip and emits a custom `dismiss` event.
   *
   * @internal
   */


  dismiss() {
    this.hideTooltip();
    this.$emit("dismiss");
  }
  /**
   * Hides the tooltip.
   *
   * @internal
   */


  hideTooltip() {
    var _a;

    this._visible = false;
    (_a = this.cleanup) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  /**
   * Gets the anchor element by id.
   *
   * @param id - the id of the anchor element
   *
   * @internal
   */


  getAnchorElement(id = "") {
    const rootNode = this.getRootNode();

    if (rootNode instanceof ShadowRoot) {
      return rootNode.getElementById(id);
    }

    return document.getElementById(id);
  }
  /**
   * Removes the `id` of the tooltip from the `aria-describedby` attribute of the anchor element.
   *
   * @param id - the id of the tooltip
   *
   * @internal
   */


  removeAnchorAriaDescribedBy(id) {
    var _a;

    if (this.anchorElement) {
      const anchorElementDescribedBy = (_a = this.anchorElement.getAttribute("aria-describedby")) === null || _a === void 0 ? void 0 : _a.split(" ");
      this.anchorElement.setAttribute("aria-describedby", (anchorElementDescribedBy !== null && anchorElementDescribedBy !== void 0 ? anchorElementDescribedBy : []).filter(i => i !== id).join(" "));

      if (this.anchorElement.getAttribute("aria-describedby") === "") {
        this.anchorElement.removeAttribute("aria-describedby");
      }
    }
  }
  /**
   * Removes event listeners from the anchor element, the tooltip element, and the document.
   *
   * @internal
   */


  removeListeners() {
    if (!this.anchorElement) {
      return;
    }

    this.anchorElement.removeEventListener("focusin", this.focusinAnchorHandler);
    this.anchorElement.removeEventListener("focusout", this.focusoutAnchorHandler);
    this.anchorElement.removeEventListener("mouseout", this.mouseoutAnchorHandler);
    this.anchorElement.removeEventListener("mouseover", this.mouseoverAnchorHandler);
    this.removeEventListener("mouseout", this.mouseoutAnchorHandler);
    this.removeEventListener("mouseover", this.mouseoverAnchorHandler);
    document.removeEventListener("keydown", this.keydownDocumentHandler);
  }
  /**
   * Sets the tooltip position.
   *
   * @public
   */


  setPositioning() {
    var _a;

    (_a = this.cleanup) === null || _a === void 0 ? void 0 : _a.call(this);

    if (!this.anchorElement) {
      this.hideTooltip();
      return;
    }

    const anchorElement = this.anchorElement;
    this.cleanup = autoUpdate(anchorElement, this, () => __awaiter(this, void 0, void 0, function* () {
      const middleware = [shift()];

      if (!this.placement) {
        middleware.unshift(flip());
      }

      const {
        x,
        y
      } = yield computePosition(anchorElement, this, {
        placement: this.placement,
        strategy: "fixed",
        middleware
      });
      this.positionStyles = css`
                :host{position:fixed;left:${x.toString()}px;top:${y.toString()}px}`;
    }));
  }
  /**
   * Shows the tooltip.
   *
   * @internal
   */


  showTooltip() {
    this._visible = true;
    Updates.enqueue(() => this.setPositioning());
  }

}

__decorate([observable], FASTTooltip.prototype, "_visible", void 0);

__decorate([attr({
  attribute: "anchor"
})], FASTTooltip.prototype, "anchor", void 0);

__decorate([observable], FASTTooltip.prototype, "controlledVisibility", void 0);

__decorate([attr], FASTTooltip.prototype, "id", void 0);

__decorate([attr], FASTTooltip.prototype, "placement", void 0);

__decorate([observable], FASTTooltip.prototype, "positionStyles", void 0);

__decorate([attr({
  attribute: "show",
  converter: nullableBooleanConverter,
  mode: "fromView"
})], FASTTooltip.prototype, "show", void 0);

/**
 * Creates a template for the {@link @microsoft/fast-foundation#(FASTTooltip:class)} component using the provided prefix.
 * @public
 */

function tooltipTemplate() {
  return html`<template role="tooltip" ?visible="${x => x.visible}"><slot></slot></template>`;
}

/**
 * The template for the {@link @microsoft/fast-foundation#(FASTTreeItem:class)} component.
 * @public
 */

function treeItemTemplate(options = {}) {
  return html`<template role="treeitem" slot="${x => x.isNestedItem() ? "item" : void 0}" tabindex="-1" aria-expanded="${x => x.childItems && x.childItemLength > 0 ? x.expanded : void 0}" aria-selected="${x => x.selected}" aria-disabled="${x => x.disabled}" @focusin="${(x, c) => x.handleFocus(c.event)}" @focusout="${(x, c) => x.handleBlur(c.event)}" ${children({
    property: "childItems",
    filter: elements()
  })}><div class="positioning-region" part="positioning-region"><div class="content-region" part="content-region">${when(x => x.childItems && x.childItemLength > 0, html`<div aria-hidden="true" class="expand-collapse-button" part="expand-collapse-button" @click="${(x, c) => x.handleExpandCollapseButtonClick(c.event)}" ${ref("expandCollapseButton")}><slot name="expand-collapse-glyph">${staticallyCompose(options.expandCollapseGlyph)}</slot></div>`)} ${startSlotTemplate(options)}<slot></slot>${endSlotTemplate(options)}</div></div>${when(x => x.childItems && x.childItemLength > 0 && x.expanded, html`<div role="group" class="items" part="items"><slot name="item" ${slotted("items")}></slot></div>`)}</template>`;
}

/**
 * check if the item is a tree item
 * @public
 * @remarks
 * determines if element is an HTMLElement and if it has the role treeitem
 */

function isTreeItemElement(el) {
  return isHTMLElement$1(el) && el.isTreeItem;
}
/**
 * A Tree item Custom HTML Element.
 *
 * @slot start - Content which can be provided before the tree item content
 * @slot end - Content which can be provided after the tree item content
 * @slot - The default slot for tree item text content
 * @slot item - The slot for tree items (fast tree items manage this assignment themselves)
 * @slot expand-collapse-button - The expand/collapse button
 * @csspart positioning-region - The element used to position the tree item content with exception of any child nodes
 * @csspart content-region - The element containing the expand/collapse, start, and end slots
 * @csspart items - The element wrapping any child items
 * @csspart expand-collapse-button - The expand/collapse button
 * @fires expanded-change - Fires a custom 'expanded-change' event when the expanded state changes
 * @fires selected-change - Fires a custom 'selected-change' event when the selected state changes
 *
 * @public
 */

class FASTTreeItem extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * When true, the control will be appear expanded by user interaction.
     * @public
     * @remarks
     * HTML Attribute: expanded
     */

    this.expanded = false;
    /**
     *  Readonly property identifying the element as a tree item
     *
     * @internal
     */

    this.isTreeItem = true;
    /**
     * Whether the item is focusable
     *
     * @internal
     */

    this.focusable = false;
    /**
     * Indicates if the tree item is nested
     *
     * @public
     * @deprecated - will be removed in coming ALPHA version
     * HTML Attribute: nested
     */

    this.nested = false;
    /**
     * Whether the tree is nested
     *
     * @public
     */

    this.isNestedItem = () => {
      return isTreeItemElement(this.parentElement);
    };
    /**
     * Handle expand button click
     *
     * @internal
     */


    this.handleExpandCollapseButtonClick = e => {
      if (!this.disabled && !e.defaultPrevented) {
        this.expanded = !this.expanded;
      }
    };
    /**
     * Handle focus events
     *
     * @internal
     */


    this.handleFocus = e => {
      this.setAttribute("tabindex", "0");
    };
    /**
     * Handle blur events
     *
     * @internal
     */


    this.handleBlur = e => {
      this.setAttribute("tabindex", "-1");
    };
  }

  expandedChanged(prev, next) {
    if (this.$fastController.isConnected) {
      this.$emit("expanded-change", this);
    }
  }

  selectedChanged(prev, next) {
    if (this.$fastController.isConnected) {
      this.$emit("selected-change", this);
    }
  }

  itemsChanged(oldValue, newValue) {
    if (this.$fastController.isConnected) {
      this.items.forEach(node => {
        if (isTreeItemElement(node)) {
          // TODO: maybe not require it to be a TreeItem?
          node.nested = true;
        }
      });
    }
  }
  /**
   * Places document focus on a tree item
   *
   * @public
   * @param el - the element to focus
   */


  static focusItem(el) {
    el.focusable = true;
    el.focus();
  }
  /**
   * Gets number of children
   *
   * @internal
   */


  get childItemLength() {
    var _a;

    if (this.$fastController.isConnected) {
      return (_a = this.childItems) === null || _a === void 0 ? void 0 : _a.filter(item => isTreeItemElement(item)).length;
    }

    return 0;
  }

}

__decorate([attr({
  mode: "boolean"
})], FASTTreeItem.prototype, "expanded", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTTreeItem.prototype, "selected", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTTreeItem.prototype, "disabled", void 0);

__decorate([observable], FASTTreeItem.prototype, "focusable", void 0);

__decorate([observable], FASTTreeItem.prototype, "childItems", void 0);

__decorate([observable], FASTTreeItem.prototype, "items", void 0);

__decorate([attr({
  mode: "boolean"
})], FASTTreeItem.prototype, "nested", void 0);

applyMixins(FASTTreeItem, StartEnd);

/**
 * The template for the {@link @microsoft/fast-foundation#FASTTreeView} component.
 * @public
 */

function treeViewTemplate() {
  return html`<template role="tree" ${ref("treeView")} @keydown="${(x, c) => x.handleKeyDown(c.event)}" @focusin="${(x, c) => x.handleFocus(c.event)}" @focusout="${(x, c) => x.handleBlur(c.event)}" @click="${(x, c) => x.handleClick(c.event)}" @selected-change="${(x, c) => x.handleSelectedChange(c.event)}"><slot ${slotted("slottedTreeItems")}></slot></template>`;
}

/**
 * A Tree view Custom HTML Element.
 * Implements the {@link https://w3c.github.io/aria-practices/#TreeView | ARIA TreeView }.
 *
 * @slot - The default slot for tree items
 *
 * @public
 */

class FASTTreeView extends FASTElement {
  constructor() {
    super(...arguments);
    /**
     * The tree item that is designated to be in the tab queue.
     *
     * @internal
     */

    this.currentFocused = null;
    /**
     * Handle focus events
     *
     * @internal
     */

    this.handleFocus = e => {
      if (this.slottedTreeItems.length < 1) {
        // no child items, nothing to do
        return;
      }

      if (e.target === this) {
        if (this.currentFocused === null) {
          this.currentFocused = this.getValidFocusableItem();
        }

        if (this.currentFocused !== null) {
          FASTTreeItem.focusItem(this.currentFocused);
        }

        return;
      }

      if (this.contains(e.target)) {
        this.setAttribute("tabindex", "-1");
        this.currentFocused = e.target;
      }
    };
    /**
     * Handle blur events
     *
     * @internal
     */


    this.handleBlur = e => {
      if (e.target instanceof HTMLElement && (e.relatedTarget === null || !this.contains(e.relatedTarget))) {
        this.setAttribute("tabindex", "0");
      }
    };
    /**
     * KeyDown handler
     *
     *  @internal
     */


    this.handleKeyDown = e => {
      if (e.defaultPrevented) {
        return;
      }

      if (this.slottedTreeItems.length < 1) {
        return true;
      }

      const treeItems = this.getVisibleNodes();

      switch (e.key) {
        case keyHome:
          if (treeItems.length) {
            FASTTreeItem.focusItem(treeItems[0]);
          }

          return;

        case keyEnd:
          if (treeItems.length) {
            FASTTreeItem.focusItem(treeItems[treeItems.length - 1]);
          }

          return;

        case keyArrowLeft:
          if (e.target && this.isFocusableElement(e.target)) {
            const item = e.target;

            if (item instanceof FASTTreeItem && item.childItemLength > 0 && item.expanded) {
              item.expanded = false;
            } else if (item instanceof FASTTreeItem && item.parentElement instanceof FASTTreeItem) {
              FASTTreeItem.focusItem(item.parentElement);
            }
          }

          return false;

        case keyArrowRight:
          if (e.target && this.isFocusableElement(e.target)) {
            const item = e.target;

            if (item instanceof FASTTreeItem && item.childItemLength > 0 && !item.expanded) {
              item.expanded = true;
            } else if (item instanceof FASTTreeItem && item.childItemLength > 0) {
              this.focusNextNode(1, e.target);
            }
          }

          return;

        case keyArrowDown:
          if (e.target && this.isFocusableElement(e.target)) {
            this.focusNextNode(1, e.target);
          }

          return;

        case keyArrowUp:
          if (e.target && this.isFocusableElement(e.target)) {
            this.focusNextNode(-1, e.target);
          }

          return;

        case keyEnter:
          // In single-select trees where selection does not follow focus (see note below),
          // the default action is typically to select the focused node.
          this.handleClick(e);
          return;
      } // don't prevent default if we took no action


      return true;
    };
    /**
     * Handles the selected-changed events bubbling up
     * from child tree items
     *
     *  @internal
     */


    this.handleSelectedChange = e => {
      if (e.defaultPrevented) {
        return;
      }

      if (!(e.target instanceof Element) || !isTreeItemElement(e.target)) {
        return true;
      }

      const item = e.target;

      if (item.selected) {
        if (this.currentSelected && this.currentSelected !== item) {
          this.currentSelected.selected = false;
        } // new selected item


        this.currentSelected = item;
      } else if (!item.selected && this.currentSelected === item) {
        // selected item deselected
        this.currentSelected = null;
      }

      return;
    };
    /**
     * Updates the tree view when slottedTreeItems changes
     */


    this.setItems = () => {
      // force single selection
      // defaults to first one found
      const selectedItem = this.treeView.querySelector("[aria-selected='true']");
      this.currentSelected = selectedItem; // invalidate the current focused item if it is no longer valid

      if (this.currentFocused === null || !this.contains(this.currentFocused)) {
        this.currentFocused = this.getValidFocusableItem();
      } // toggle properties on child elements


      this.nested = this.checkForNestedItems();
      const treeItems = this.getVisibleNodes();
      treeItems.forEach(node => {
        if (isTreeItemElement(node)) {
          node.nested = this.nested;
        }
      });
    };
    /**
     * check if the item is focusable
     */


    this.isFocusableElement = el => {
      return isTreeItemElement(el);
    };

    this.isSelectedElement = el => {
      return el.selected;
    };
  }

  slottedTreeItemsChanged() {
    if (this.$fastController.isConnected) {
      // update for slotted children change
      this.setItems();
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("tabindex", "0");
    Updates.enqueue(() => {
      this.setItems();
    });
  }
  /**
   * Handles click events bubbling up
   *
   *  @internal
   */


  handleClick(e) {
    if (e.defaultPrevented) {
      // handled, do nothing
      return;
    }

    if (!(e.target instanceof Element) || !isTreeItemElement(e.target)) {
      // not a tree item, ignore
      return true;
    }

    const item = e.target;

    if (!item.disabled) {
      item.selected = !item.selected;
    }

    return;
  }
  /**
   * Move focus to a tree item based on its offset from the provided item
   */


  focusNextNode(delta, item) {
    const visibleNodes = this.getVisibleNodes();

    if (!visibleNodes) {
      return;
    }

    const focusItem = visibleNodes[visibleNodes.indexOf(item) + delta];

    if (isHTMLElement$1(focusItem)) {
      FASTTreeItem.focusItem(focusItem);
    }
  }
  /**
   * checks if there are any nested tree items
   */


  getValidFocusableItem() {
    const treeItems = this.getVisibleNodes(); // default to selected element if there is one

    let focusIndex = treeItems.findIndex(this.isSelectedElement);

    if (focusIndex === -1) {
      // otherwise first focusable tree item
      focusIndex = treeItems.findIndex(this.isFocusableElement);
    }

    if (focusIndex !== -1) {
      return treeItems[focusIndex];
    }

    return null;
  }
  /**
   * checks if there are any nested tree items
   */


  checkForNestedItems() {
    return this.slottedTreeItems.some(node => {
      return isTreeItemElement(node) && node.querySelector("[role='treeitem']");
    });
  }

  getVisibleNodes() {
    return getDisplayedNodes(this, "[role='treeitem']") || [];
  }

}

__decorate([observable], FASTTreeView.prototype, "currentSelected", void 0);

__decorate([observable], FASTTreeView.prototype, "slottedTreeItems", void 0);

/**
 * An abstract behavior to react to media queries. Implementations should implement
 * the `constructListener` method to perform some action based on media query changes.
 *
 * @public
 */
class MatchMediaBehavior {
  /**
   *
   * @param query - The media query to operate from.
   */
  constructor(query) {
    /**
     * The behavior needs to operate on element instances but elements might share a behavior instance.
     * To ensure proper attachment / detachment per instance, we construct a listener for
     * each bind invocation and cache the listeners by element reference.
     */
    this.listenerCache = new WeakMap();
    this.query = query;
  }
  /**
   * Binds the behavior to the element.
   * @param controller - The host controller orchestrating this behavior.
   */


  connectedCallback(controller) {
    const {
      query
    } = this;
    let listener = this.listenerCache.get(controller);

    if (!listener) {
      listener = this.constructListener(controller);
      this.listenerCache.set(controller, listener);
    } // Invoke immediately to add if the query currently matches


    listener.bind(query)();
    query.addEventListener("change", listener);
  }
  /**
   * Unbinds the behavior from the element.
   * @param controller - The host controller orchestrating this behavior.
   */


  disconnectedCallback(controller) {
    const listener = this.listenerCache.get(controller);

    if (listener) {
      this.query.removeEventListener("change", listener);
    }
  }

}
/**
 * A behavior to add or remove a stylesheet from an element based on a media query. The behavior ensures that
 * styles are applied while the a query matches the environment and that styles are not applied if the query does
 * not match the environment.
 *
 * @public
 */

class MatchMediaStyleSheetBehavior extends MatchMediaBehavior {
  /**
   * Constructs a {@link MatchMediaStyleSheetBehavior} instance.
   * @param query - The media query to operate from.
   * @param styles - The styles to coordinate with the query.
   */
  constructor(query, styles) {
    super(query);
    this.styles = styles;
  }
  /**
   * Defines a function to construct {@link MatchMediaStyleSheetBehavior | MatchMediaStyleSheetBehaviors} for
   * a provided query.
   * @param query - The media query to operate from.
   *
   * @public
   * @example
   *
   * ```ts
   * import { css } from "@microsoft/fast-element";
   * import { MatchMediaStyleSheetBehavior } from "@microsoft/fast-foundation";
   *
   * const landscapeBehavior = MatchMediaStyleSheetBehavior.with(
   *   window.matchMedia("(orientation: landscape)")
   * );
   *
   * const styles = css`
   *   :host {
   *     width: 200px;
   *     height: 400px;
   *   }
   * `
   * .withBehaviors(landscapeBehavior(css`
   *   :host {
   *     width: 400px;
   *     height: 200px;
   *   }
   * `))
   * ```
   */


  static with(query) {
    return styles => {
      return new MatchMediaStyleSheetBehavior(query, styles);
    };
  }
  /**
   * Constructs a match-media listener for a provided element.
   * @param source - the element for which to attach or detach styles.
   */


  constructListener(controller) {
    let attached = false;
    const styles = this.styles;
    return function listener() {
      const {
        matches
      } = this;

      if (matches && !attached) {
        controller.addStyles(styles);
        attached = matches;
      } else if (!matches && attached) {
        controller.removeStyles(styles);
        attached = matches;
      }
    };
  }
  /**
   * Unbinds the behavior from the element.
   * @param controller - The host controller orchestrating this behavior.
   * @internal
   */


  removedCallback(controller) {
    controller.removeStyles(this.styles);
  }

}
/**
 * This can be used to construct a behavior to apply a forced-colors only stylesheet.
 * @public
 */

const forcedColorsStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia("(forced-colors)"));
/**
 * This can be used to construct a behavior to apply a prefers color scheme: dark only stylesheet.
 * @public
 */

const darkModeStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia("(prefers-color-scheme: dark)"));
/**
 * This can be used to construct a behavior to apply a prefers color scheme: light only stylesheet.
 * @public
 */

const lightModeStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia("(prefers-color-scheme: light)"));

/**
 * A behavior to add or remove a stylesheet from an element based on a property. The behavior ensures that
 * styles are applied while the property matches and that styles are not applied if the property does
 * not match.
 *
 * @public
 */

class PropertyStyleSheetBehavior {
  /**
   * Constructs a {@link PropertyStyleSheetBehavior} instance.
   * @param propertyName - The property name to operate from.
   * @param value - The property value to operate from.
   * @param styles - The styles to coordinate with the property.
   */
  constructor(propertyName, value, styles) {
    this.propertyName = propertyName;
    this.value = value;
    this.styles = styles;
  }
  /**
   * Binds the behavior to the element.
   * @param elementInstance - The element for which the property is applied.
   */


  addedCallback(controller) {
    Observable.getNotifier(controller.source).subscribe(this, this.propertyName);
    this.handleChange(controller.source, this.propertyName);
  }
  /**
   * Unbinds the behavior from the element.
   * @param source - The element for which the behavior is unbinding.
   */


  removedCallback(controller) {
    Observable.getNotifier(controller.source).unsubscribe(this, this.propertyName);
    controller.removeStyles(this.styles);
  }
  /**
   * Change event for the provided element.
   * @param source - the element for which to attach or detach styles.
   * @param key - the key to lookup to know if the element already has the styles
   * @internal
   */


  handleChange(source, key) {
    const controller = source.$fastController;

    if (source[key] === this.value) {
      controller.addStyles(this.styles);
    } else {
      controller.removeStyles(this.styles);
    }
  }

}

/**
 * The CSS value for disabled cursors.
 * @public
 * @deprecated - fast-foundation is removing styling utilities
 */
const disabledCursor = "not-allowed";

/**
 * A CSS fragment to set `display: none;` when the host is hidden using the [hidden] attribute.
 * @public
 */
const hidden = `:host([hidden]){display:none}`;
/**
 * Applies a CSS display property.
 * Also adds CSS rules to not display the element when the [hidden] attribute is applied to the element.
 * @param display - The CSS display property value
 * @public
 */

function display(displayValue) {
  return `${hidden}:host{display:${displayValue}}`;
}

/**
 * This will always evaluate to 'focus-visible' due to modern browser support.
 * @public
 * @deprecated - fast-foundation is removing styling utilities
 */
const focusVisible = "focus-visible";

DOM.setPolicy(DOMPolicy.create());

export { ARIAGlobalStatesAndProperties, AccordionExpandMode, AnchorTarget, AnchoredRegionPositionLabel, ArrayObserver, AttributeConfiguration, AttributeDefinition, AutoUpdateMode, AxisPositioningMode, AxisScalingMode, Binding, ButtonType, CSSBindingDirective, CSSDesignToken, CSSDirective, CheckableFormAssociated, ChildrenDirective, ComboboxAutocomplete, Compiler, DOM, DOMAspect, DataGridCellTypes, DataGridRowTypes, DataGridSelectionBehavior, DataGridSelectionMode, DateFormatter, DayFormat, DelegatesARIAButton, DelegatesARIACombobox, DelegatesARIALink, DelegatesARIAListbox, DelegatesARIAListboxOption, DelegatesARIASearch, DelegatesARIASelect, DelegatesARIATextbox, DelegatesARIAToolbar, DesignToken, DesignTokenEventResolutionStrategy, DesignTokenStyleTarget, DividerOrientation, DividerRole, ElementController, ElementStyles, ExecutionContext, FAST, FASTAccordion, FASTAccordionItem, FASTAnchor, FASTAnchoredRegion, FASTAvatar, FASTBadge, FASTBaseProgress, FASTBreadcrumb, FASTBreadcrumbItem, FASTButton, FASTCalendar, FASTCard, FASTCheckbox, FASTCombobox, FASTDataGrid, FASTDataGridCell, FASTDataGridRow, FASTDialog, FASTDisclosure, FASTDivider, FASTElement, FASTElementDefinition, FASTFlipper, FASTHorizontalScroll, FASTListbox, FASTListboxElement, FASTListboxOption, FASTMenu, FASTMenuItem, FASTNumberField, FASTPicker, FASTPickerList, FASTPickerListItem, FASTPickerMenu, FASTPickerMenuOption, FASTProgress, FASTProgressRing, FASTRadio, FASTRadioGroup, FASTSearch, FASTSelect, FASTSkeleton, FASTSlider, FASTSliderLabel, FASTSwitch, FASTTab, FASTTabPanel, FASTTabs, FASTTextArea, FASTTextField, FASTToolbar, FASTTooltip, FASTTreeItem, FASTTreeView, FlipperDirection, FlyoutPosBottom, FlyoutPosBottomFill, FlyoutPosTallest, FlyoutPosTallestFill, FlyoutPosTop, FlyoutPosTopFill, FormAssociated, GenerateHeaderOptions, HTMLBindingDirective, HTMLDirective, HTMLView, HorizontalPosition, HorizontalScrollView, InlineTemplateDirective, Markup, MatchMediaBehavior, MatchMediaStyleSheetBehavior, MenuItemRole, MenuPlacement, MonthFormat, NodeObservationDirective, Observable, Parser, PropertyChangeNotifier, PropertyStyleSheetBehavior, RadioGroupOrientation, RefDirective, RepeatBehavior, RepeatDirective, ScrollEasing, SkeletonShape, SliderMode, SliderOrientation, SlottedDirective, SourceLifetime, Splice, SpliceStrategy, SpliceStrategySupport, StartEnd, StatelessAttachedAttributeDirective, SubscriberSet, TabsOrientation, TextAreaResize, TextFieldType, ToolbarOrientation, TooltipPlacement, Updates, VerticalPosition, ViewTemplate, WeekdayFormat, YearFormat, accordionItemTemplate, accordionTemplate, anchorTemplate, anchoredRegionTemplate, applyMixins, attr, avatarTemplate, badgeTemplate, booleanConverter, breadcrumbItemTemplate, breadcrumbTemplate, buttonTemplate, calendarCellTemplate, calendarRowTemplate, calendarTemplate, calendarTitleTemplate, calendarWeekdayTemplate, cardTemplate, checkboxTemplate, children, comboboxTemplate, css, cssDirective, customElement, darkModeStylesheetBehavior, dataGridCellTemplate, dataGridRowTemplate, dataGridTemplate, dialogTemplate, disabledCursor, disclosureTemplate, display, dividerTemplate, elements, emptyArray, endSlotTemplate, flipperTemplate, focusVisible, forcedColorsStylesheetBehavior, getDirection, hidden, horizontalScrollTemplate, html, htmlDirective, interactiveCalendarGridTemplate, isListboxOption, isTreeItemElement, lengthOf, lightModeStylesheetBehavior, listboxOptionTemplate, listboxTemplate, listener, menuItemTemplate, menuTemplate, noninteractiveCalendarTemplate, normalizeBinding, nullableBooleanConverter, nullableNumberConverter, numberFieldTemplate, observable, oneTime, oneWay, pickerListItemTemplate, pickerListTemplate, pickerMenuOptionTemplate, pickerMenuTemplate, pickerTemplate, progressRingTemplate, progressTemplate, radioGroupTemplate, radioTemplate, ref, reflectAttributes, repeat, roleForMenuItem, searchTemplate, selectTemplate, skeletonTemplate, sliderLabelTemplate, sliderTemplate, slotted, startSlotTemplate, staticallyCompose, supportsElementInternals, switchTemplate, tabPanelTemplate, tabTemplate, tabsTemplate, tagFor, textAreaTemplate, textFieldTemplate, toolbarTemplate, tooltipTemplate, treeItemTemplate, treeViewTemplate, volatile, when, whitespaceFilter };
